<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web-development on Unusually Pink</title>
    <link>https://unusually.pink/tags/web-development/</link>
    <description>Recent content in web-development on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - John Fabry</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://unusually.pink/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enable Directory Listing On Specific Directory With Nginx</title>
      <link>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</guid>
      <description>Note: In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.
Generally when you navigate to a website, such as https://unusually.pink/, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site.</description>
      <content>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.&lt;/p&gt;
&lt;p&gt;Generally when you navigate to a website, such as &lt;a href=&#34;https://unusually.pink/&#34;&gt;https://unusually.pink/&lt;/a&gt;, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site. Instead, the web server software will be configured to look for specific files in each folder, such as &lt;code&gt;index.html&lt;/code&gt;, and render those. In some instances, however, you may actually &lt;em&gt;want&lt;/em&gt; to allow someone to browser the files in a directory. This was the situation I found myself in a few days ago for a skunkworks project at work. I already had a server set up running Nginx, and I just needed to expose a particular directory.&lt;/p&gt;
&lt;p&gt;Most searches I did appeared fairly straightforward. The easiest way to do this is to define the &lt;code&gt;autoindex&lt;/code&gt; parameter inside of a &lt;code&gt;location&lt;/code&gt; block of the site&amp;rsquo;s configuration file at: &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt;. I initially did that and had something that looked like this. Note that these are only the relevant pieces for this post, and this is &lt;em&gt;not&lt;/em&gt; the full configuration file:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;Everything in the second &lt;code&gt;location&lt;/code&gt; block contained my newly added content to make this directory I had just created, &lt;code&gt;targetfolder&lt;/code&gt;, exposed. After saving the file, I first tested my configuration with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Crucially, this told me the configuration syntax was okay. Then I restarted my web server via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I tried navigating to my directory via a web browser&amp;hellip; only to be greeted by a 404 error. The 404 (which indicates that the requested resource wasn&amp;rsquo;t found on the server) tells me that something is likely amiss with how I&amp;rsquo;m referencing the requested content. I compared my configuration to a handful of samples online, though, and didn&amp;rsquo;t see what was wrong. Eventually, it dawned on me that all of the examples I found were showing how to enable directory listing for an &lt;em&gt;entire&lt;/em&gt; site, whereas my scenario was as little different considering I only wanted to expose a subfolder. I did a few more searches with that slant in mind, and I eventually hit upon a thread where someone mentioned that having multiple &lt;code&gt;root&lt;/code&gt; definitions in their configuration file caused problems for them.&lt;/p&gt;
&lt;p&gt;I tried adding one additional character to my configuration to comment out the &lt;code&gt;root&lt;/code&gt; definition in my second &lt;code&gt;location&lt;/code&gt; block:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
#root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;After another &lt;code&gt;sudo systemctl reload nginx&lt;/code&gt;, I was able to view the directory just like I expected. In hindsight this makes a lot of sense; if I already define the root of the site somewhere earlier in the file, I can&amp;rsquo;t simply change it on a whim later on. Instead, the &lt;code&gt;location /targetfolder&lt;/code&gt; directive is going to be &lt;em&gt;relative&lt;/em&gt; to the &lt;code&gt;root&lt;/code&gt; I already specified. It was interesting to me that checking my configuration with &lt;code&gt;sudo nginx -t&lt;/code&gt; originally didn&amp;rsquo;t alert me to anything, but I&amp;rsquo;m hardly an Nginx guru. It&amp;rsquo;s certainly possible there may be some scenario where the setup I had was valid.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Twenty Twenty-One WordPress Theme</title>
      <link>https://unusually.pink/twenty-twenty-one-wordpress-theme/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/twenty-twenty-one-wordpress-theme/</guid>
      <description>While I made the change a few weeks ago, it seems fitting that my first post of 2021 should be about my swap to the Twenty Twenty-One WordPress theme. For anyone who isn&amp;rsquo;t aware, each year WordPress releases a new &amp;ldquo;official&amp;rdquo; theme for the platform. While theme-elitists out there may scoff at them in favor of paid, premium themes, I&amp;rsquo;ve always found the yearly offerings to be elegant and well-designed. I had originally planned on putting this post together on January 1st, but what can I say&amp;hellip; movies on HBO Now aren&amp;rsquo;t going to binge-watch themselves.</description>
      <content>&lt;p&gt;While I made the change a few weeks ago, it seems fitting that my first post of 2021 should be about my swap to the Twenty Twenty-One WordPress theme. For anyone who isn&amp;rsquo;t aware, each year WordPress releases a new &amp;ldquo;official&amp;rdquo; theme for the platform. While theme-elitists out there may scoff at them in favor of paid, premium themes, I&amp;rsquo;ve always found the yearly offerings to be elegant and well-designed. I had &lt;em&gt;originally&lt;/em&gt; planned on putting this post together on January 1st, but what can I say&amp;hellip; movies on HBO Now aren&amp;rsquo;t going to binge-watch themselves.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;ve typically enjoyed the yearly WordPress theme releases, the previous iteration of this blog was actually back on the Twenty Sixteen theme since the yearly releases after that one didn&amp;rsquo;t feel like they were a particularly good fit for a blog. I still liked the look of the Twenty Sixteen theme, especially after I switched the colors around to match the &lt;a href=&#34;https://unusually.pink/all-dracula-everything/&#34;&gt;Dracula Theme&lt;/a&gt;, but the fact remains that 2016 is more or less ancient history in the world of web design. As a result, parts of the site just felt a bit&amp;hellip; antiquated. For example, while the banner at the top allowed me to show off the Unusually Pink graphics that we originally commissioned for the podcast, it left the site feeling just a bit old.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/cropped-cropped-Unusually-Pink-Facebook-Cover-Photo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The artwork is still amazing, though.&lt;/p&gt;
&lt;p&gt;While I spent a decent bit of time tweaking the Twenty Sixteen theme to suit my needs, once I saw the &lt;a href=&#34;https://make.wordpress.org/core/2020/09/23/introducing-twenty-twenty-one/&#34;&gt;Twenty Twenty-One theme announcement in September I decided to stop further tweaking and try being patient&lt;/a&gt;. I also followed a bit &lt;a href=&#34;https://github.com/wordpress/twentytwentyone&#34;&gt;of the progress on the GitHub repository&lt;/a&gt;, but not being a web developer meant that it didn&amp;rsquo;t really give me a good vibe for how the theme would feel in practice.&lt;/p&gt;
&lt;p&gt;Once the theme released, though, I immediately found myself drawn to how minimalist and streamlined it is. I feel like it provides me with the bare necessities, and then I can expand upon it from there to fit my needs without a lot of unnecessary overhead. One look at the current layout at the time of this writing probably clues you in to the fact that these aren&amp;rsquo;t the default colors; I once again opted to update the design to feel like the Dracula theme. While Twenty Twenty-One offers less in the customization UI for modifying the colors, it can still easily be done via CSS (a level of access that I sorely missed when &lt;a href=&#34;https://unusually.pink/unusually-pink-migration/&#34;&gt;the site was hosted on Squarespace&lt;/a&gt;.) I&amp;rsquo;m not sure if there&amp;rsquo;s a better way to do it than just opening the published site in my browser&amp;rsquo;s developer tools and using the inspection feature to get the classes of the objects I want to change, but that ended up getting me to the end result I wanted.&lt;/p&gt;
&lt;p&gt;Along with the colors, I also felt the need to adjust some of the font sizes. In the default setup, Twenty Twenty-One opts for &lt;strong&gt;big&lt;/strong&gt; fonts, and while they looked kind of nice on my brand new MacBook Pro with a Retina display, on my 1080p, 11&amp;quot; &lt;a href=&#34;https://unusually.pink/star-lite-mk-iii/&#34;&gt;Star Lite Mk III&lt;/a&gt; going to a post would result in just the header and the post title being visible. None of the actual content could be read without scrolling. I wasn&amp;rsquo;t thrilled about my site looking so gigantic on lower resolution displays, so many of the font sizes were tweaked. That being said, as someone with extremely poor vision I&amp;rsquo;m a fan of large-ish fonts, and I didn&amp;rsquo;t want to completely flip to tiny text. Readability is, arguably, one of the most import things on a text-heavy site.&lt;/p&gt;
&lt;p&gt;If anyone is curious, my full CSS customizations are below. Hopefully it&amp;rsquo;s not too offensive since frontend is most definitely not my specialty.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;While there may still be some minor adjustments for sizes and spacing, for the most part I like where things are at. I&amp;rsquo;ve historically disliked blog landing pages which only showed the beginning of each post, but I&amp;rsquo;ve done a bit of a 180 in that regard. With Twenty Twenty-One I&amp;rsquo;ve been appreciating how the front page is much less cumbersome, especially when trying to reach the links or search box at the very bottom of the page. I think it also provides a bit of a cleaner focus on the &lt;a href=&#34;https://unusually.pink/about/&#34;&gt;link for the About page&lt;/a&gt; that I link to on most of my online profiles.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Connecting An Existing Firebase Hosting Project To A New Site</title>
      <link>https://unusually.pink/connecting-an-existing-firebase-hosting-project-to-a-new-site/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/connecting-an-existing-firebase-hosting-project-to-a-new-site/</guid>
      <description>As a follow-up to my last post on GitHub Pages, I mentioned that I moved one of my websites to Firebase. Firebase is a platform from Google for creating web and mobile applications. As a PaaS offering, there are a lot of different parts to the service, but as a platform for web applications hosting is naturally one of them. The free Spark plan offers 10 GB of storage, 360 MB of data transfer per day (which works out to 10 GB of bandwidth per month), and support for custom domains and SSL.</description>
      <content>&lt;p&gt;As a follow-up to my &lt;a href=&#34;https://unusually.pink/github-pages-hosting/&#34;&gt;last post on GitHub Pages&lt;/a&gt;, I mentioned that I moved one of my websites to &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. Firebase is a platform from Google for creating web and mobile applications. As a PaaS offering, there are a &lt;strong&gt;lot&lt;/strong&gt; of different parts to the service, but as a platform for web applications hosting is naturally one of them. The &lt;a href=&#34;https://firebase.google.com/pricing/&#34;&gt;free Spark plan&lt;/a&gt; offers 10 GB of storage, 360 MB of data transfer per day (which works out to 10 GB of bandwidth per month), and support for custom domains and SSL. That&amp;rsquo;s more than enough for me to host a simple, single page website that&amp;rsquo;s only made up of static HTML, CSS, and a single image. If anyone is curious, my site is using just 1.8 MB of storage and 15 MB of bandwidth. Note that bandwidth used divided by storage used will not be indicative of total hits due to caching, compression, etc.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used Firebase before, so I already had my Google account linked up to Firebase, and I even had a project still technically &amp;ldquo;live&amp;rdquo; there, though the domain had long since been shifted somewhere else. To be honest, it had been so long since I used Firebase that I almost forgot about it until I just happened to start receiving some well-timed emails from the service informing me that I needed to re-verify ownership of the domain I was using for my defunct project. I had no interest in re-verifying anything, but I did want to start hosting something new there.&lt;/p&gt;
&lt;p&gt;The first step for hosting new content was to log in to the &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;Firebase Console&lt;/a&gt;. Since I had already used the service, this gave me tiles of my existing projects; in my scenario, I just had a single project for my hosting. I clicked on that tile, and I was taken to a Project Overview screen. This gives me a high-level look at my project. To get to the hosting-specific functionality, though, I just had to click the &lt;strong&gt;Hosting&lt;/strong&gt; option under the &lt;strong&gt;Develop&lt;/strong&gt; menu to the left.&lt;/p&gt;
&lt;p&gt;On the hosting dashboard, the first item listed contains all of the domains associated with the project. Clicking the 3 dots &amp;hellip; next to a domain allowed me to delete it; I removed the two entries (apex domain and www) for the domain I used previously. Then I clicked the button for &lt;strong&gt;Add a custom domain&lt;/strong&gt;. I followed the instructions on the screen to add a custom domain; I won&amp;rsquo;t document the steps here since they&amp;rsquo;re directly covered through the &lt;a href=&#34;https://firebase.google.com/docs/hosting/custom-domain&#34;&gt;Firebase custom domain documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With everything configured on the Firebase side, I next needed to crack into the Firebase CLI to link up my local project. I opted to &lt;a href=&#34;https://firebase.google.com/docs/cli/#mac-linux-standalone-binary&#34;&gt;install the standalone CLI&lt;/a&gt;, though you can still get it through &lt;code&gt;npm&lt;/code&gt; if you prefer to roll that way. The first thing I had to do was link the CLI to my Firebase account. This is different based on whether you&amp;rsquo;re going to be using the CLI from a system with a GUI or if you&amp;rsquo;re doing it from a headless system you&amp;rsquo;re accessing via SSH. I was using it from a headless system where I cannot pop a browser to follow the normal authentication process; as a result I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase login --no-localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re running this from a system with a GUI, I believe you just omit the &lt;code&gt;--no-localhost&lt;/code&gt; parameter. In the headless setup, though, this gives a Firebase URL to navigate to on another system. I copied it out of my terminal and pasted it into the browser in my laptop. This gives me an authentication code for the CLI. I copied that from my browser, pasted it into my terminal, and that linked the CLI to my account in the Firebase platform.&lt;/p&gt;
&lt;p&gt;Since I was just moving my content from my old VPS to Firebase, I didn&amp;rsquo;t have to worry about actually &lt;em&gt;creating&lt;/em&gt; a website; I already had one that was backed up in a tarball. I simply had to expand my tarball on the same system where I was using the Firebase CLI. I did this by creating a new directory for the project, expanding my tarball that had all of my site&amp;rsquo;s content, and then copying that content to the project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir ~/laifu
tar -zxvf ~/temp/laifu.tar.gz
cp -r ~/temp/html ~/laifu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you look closely at the commands above, you&amp;rsquo;ll see that after I expand the tarball I&amp;rsquo;m recursively copying not the entire directory but the &lt;code&gt;html&lt;/code&gt; folder from it. This is due to the fact that my tarball is of the entire &lt;code&gt;/var/www/laifu.moe/&lt;/code&gt; directory that Nginx was previously hosting on my VPS, and the &lt;code&gt;html&lt;/code&gt; directory is what contains the content of the site. If your backup is storing the content directly (e.g. it&amp;rsquo;s not in a subfolder) that&amp;rsquo;s fine. However, you&amp;rsquo;ll want to make a new folder inside of your project directory that you copy the content to because you do &lt;em&gt;not&lt;/em&gt; want the content of the site to be in the root of the Firebase project&amp;rsquo;s directory. For example, your &lt;code&gt;mkdir&lt;/code&gt; command would look something like: &lt;code&gt;~/myproject/html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One I had the files situated accordingly, I needed to tell Firebase that my directory was a Firebase project. Similar to using &lt;code&gt;git&lt;/code&gt;, I do this by navigating to my project directory and running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gets the ball rolling by asking some questions interactively through the CLI. One question will ask what service the project should be connected to; be sure to pick &amp;ldquo;Hosting.&amp;rdquo; After that there should be a prompt for which existing hosting project you&amp;rsquo;d like to use. The existing project should be listed as an option to be selected. If it&amp;rsquo;s not there, you can cancel out of the process and ensure everything worked correctly with your authentication by running the following and verifying that you see the project. If it&amp;rsquo;s missing, you may need to redo the authentication (e.g. maybe you were in the wrong Google account when pasting into your browser.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase project:list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After selecting the project, the CLI will ask what to use as the &amp;ldquo;public directory.&amp;rdquo; This is essentially asking what directory &lt;em&gt;inside&lt;/em&gt; of the project directory contains the web content to be hosted. In my case I picked &lt;code&gt;html&lt;/code&gt; since that&amp;rsquo;s what I named the folder.&lt;/p&gt;
&lt;p&gt;Be wary of the next couple of prompts, which will trigger regardless of whether or not there&amp;rsquo;s something in your public directory matching them. When prompted about your &lt;code&gt;404.html&lt;/code&gt; page, opt not to overwrite it unless you really hate your existing one. When prompted about &lt;code&gt;index.html&lt;/code&gt;, &lt;strong&gt;definitely&lt;/strong&gt; don&amp;rsquo;t overwrite it or you&amp;rsquo;ll lose the first page of your site.&lt;/p&gt;
&lt;p&gt;Once that&amp;rsquo;s all done, you should get a message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Firebase initialization complete!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that the directory has been initialized successfully as a Firebase project, but the local content still hasn&amp;rsquo;t been pushed to the cloud. So the last step is to run the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give a &amp;ldquo;Deploy complete!&amp;rdquo; message along with a Firebase-specific URL in the format of:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://project-name-GUID.web.app&#34;&gt;https://project-name-GUID.web.app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copying this URL and pasting it into a browser should allow you to verify that the content you expect is now being hosted, even if you&amp;rsquo;re currently waiting for DNS TTLs to expire before you can navigate to the custom DNS. The Hosting Dashboard of the Firebase console will also show the update in the &amp;ldquo;Release History&amp;rdquo; section.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Switching To Squarespace</title>
      <link>https://unusually.pink/switching-to-squarespace/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/switching-to-squarespace/</guid>
      <description>If you happened to see this site around the time when the first post went up, you might notice that:
  The site looks very different now.
  A lot of what’s in that first post no longer seems to be true.
  For example, this is not the Rusty theme for Hugo. Those technically savvy would also notice that the site no longer has the same DNS record value as laifu.</description>
      <content>&lt;p&gt;If you happened to see this site around the time when the &lt;a href=&#34;https://www.unusually.pink/blog/its-all-about-being-unusually-pink&#34;&gt;first post&lt;/a&gt; went up, you might notice that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The site looks very different now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lot of what’s in that first post no longer seems to be true.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, this is &lt;em&gt;not&lt;/em&gt; the &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-rusty/&#34;&gt;Rusty&lt;/a&gt; theme for Hugo. Those technically savvy would also notice that the site no longer has the same DNS record value as &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt; where things were originally hosted. That’s because the site is no longer running on my own web server and is not created using Hugo. There were a few reasons for this. The main was just that I’m &lt;strong&gt;really&lt;/strong&gt; bad at web design. The Rusty theme in Hugo is pretty light on imagery, which I’m cool with. Once we decided to actually make &lt;em&gt;Unusually Pink&lt;/em&gt; into a thing and do a podcast, though, we had our &lt;strong&gt;amazing&lt;/strong&gt; logos made by the uber-talented &lt;a href=&#34;https://www.jpfdesigns.com/&#34;&gt;JPFDesigns&lt;/a&gt;. Integrating those into the Rusty theme for Hugo was a bit more than I was up for; CSS is legitimately the final boss of my life, and my life is (apparently) an NES &lt;em&gt;Contra&lt;/em&gt; game; I couldn’t do it.&lt;/p&gt;
&lt;p&gt;The other reason was just that it allows for &lt;strong&gt;much&lt;/strong&gt; better reliability. The site isn’t beholden to my ability to not mess up my web server. Not that it’s particularly likely for me to do something to brick it (I’ve been using Linux and Nginx for my web servers for ages now), but it’s possible. I was also responsible for backups, which I’d prefer to take off of my own hands if possible.&lt;/p&gt;
&lt;p&gt;The last reason was that the site really needed to be divided from one main section (e.g. the blog I originally planned just to do &lt;strong&gt;something&lt;/strong&gt; with the domain) to two sections: a blog and a list of podcast episodes. While I was able to just dump a &lt;strong&gt;/podcast&lt;/strong&gt; directory into my &lt;strong&gt;static&lt;/strong&gt; folder for Hugo, it meant that posting podcast episodes and summaries was now an entirely manual process rather than something assisted by a CMS-esque system like Hugo.&lt;/p&gt;
&lt;p&gt;Swapping to &lt;a href=&#34;https://www.squarespace.com/&#34;&gt;Squarespace&lt;/a&gt; allowed me to let someone far smarter than me figure out all of that within a theme; all I had to do was upload some images (Squarespace is awesome at scaling images for me, even when it needed to make one tiny for the favicon) and then swap around a few of the colors in the theme to get something &lt;em&gt;unusually pink&lt;/em&gt;. I was also able to simply add two blogs to the site; one is a normal blog and the other will have posts for each podcast episode. In this way, both sections of the site are managed by a CMS rather than being done manually. Doing it manually may not seem like &lt;strong&gt;too&lt;/strong&gt; big of a deal at first, but once you start to get too many posts for a single page, creating and manually updating the pagination after each new post would be enough to drive someone insane.&lt;/p&gt;
&lt;p&gt;As for choosing Squarespace, it’s the one I’ve heard the most about through various avenues on the Internet. Their pricing was reasonable, and I figured it seemed like a safe bet since I know a few other people who have experience with them. The other recommendation I got was Wix, which I admittedly had never heard of previously. Looking at the &lt;a href=&#34;https://www.wix.com/upgrade/website&#34;&gt;pricing for Wix&lt;/a&gt; compared to the &lt;a href=&#34;https://www.squarespace.com/pricing&#34;&gt;pricing for Squarespace&lt;/a&gt;, though, I think it’s clear that Squarespace is a better deal. The Wix $11 USD per month package is pretty lackluster, especially when you look at 2 GB of bandwidth and 3 GB of storage. To get something more comparable to Squarespace’s $12 per month package that includes unlimited bandwidth and storage, you’d need the $14 per month plan from Wix… and that still doesn’t give you unlimited storage.&lt;/p&gt;
&lt;p&gt;Expect the site to still go through a few minor changes as we continue to tweak the layout, colors, and everything else. Feel free to drop any feedback to our &lt;a href=&#34;https://twitter.com/UnusuallyPink&#34;&gt;Twitter profile&lt;/a&gt;!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Firebase Update Control Error</title>
      <link>https://unusually.pink/firebase-update-control-error/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/firebase-update-control-error/</guid>
      <description>One of my websites (not this one) is hosted via Firebase. It’s a largely static site that I rarely need to touch. I manage it from their CLI running on a VPS that I do some coding on so that I can access it regardless of which of my numerous devices I happen to be using. Since I don’t touch the site regularly, though, the Firebase tools tend to get a bit out of date.</description>
      <content>&lt;p&gt;One of my websites (not this one) is hosted via &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. It’s a largely static site that I rarely need to touch. I manage it from &lt;a href=&#34;https://firebase.google.com/docs/cli/&#34;&gt;their CLI&lt;/a&gt; running on a VPS that I do some coding on so that I can access it regardless of which of my numerous devices I happen to be using. Since I don’t touch the site regularly, though, the Firebase tools tend to get a bit out of date. I needed to push a minor change the other day and figured I’d check for an update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of completing happily, though, I got the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm ERR! path /usr/local/bin/firebase
npm ERR! code EEXIST
npm ERR! Refusing to delete /usr/local/bin/firebase: ../lib/node_modules/firebase-tools/bin/firebase symlink target is not controlled by npm /usr/local/bin
npm ERR! File exists: /usr/local/bin/firebase
npm ERR! Move it away, and try again.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’m a bit embarrassed that I did a bunch of super unnecessary troubleshooting at first instead of just &lt;em&gt;reading&lt;/em&gt; the error. When I finally got to that point because things like clearing the &lt;code&gt;npm&lt;/code&gt; cache didn’t work, I saw noticed this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;File exists: /usr/local/bin/firebase
Move it away, and try again.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, seems sensible enough. I first just renamed it in the same directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mv /usr/local/bin/firebase /usr/local/bin/firebaseBKP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I re-ran the &lt;code&gt;npm&lt;/code&gt; installation command, and sure enough it worked without any issues. I verified I could actually see &lt;code&gt;firebase&lt;/code&gt; in my &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;which firebase
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that it was the newer version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;firebase --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that out of the way, I simply deleted the file I renamed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo rm /usr/local/bin/firebaseBKP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I could push the update to my site without any issues. To be honest I’m not entirely sure why or how that file wouldn’t be controlled by &lt;code&gt;firebase&lt;/code&gt; or it couldn’t be removed by running the command under &lt;code&gt;sudo&lt;/code&gt;, but I’m happy that it had a clear error message that allowed me to fix things easily enough… once I actually, you know, &lt;em&gt;read&lt;/em&gt; the error message.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>PSA: Get Ready For New Let&#39;s Encrypt Validation</title>
      <link>https://unusually.pink/psa-get-ready-for-new-lets-encrypt-validation/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/psa-get-ready-for-new-lets-encrypt-validation/</guid>
      <description>If you’re using Let’s Encrypt, now would be a really great time to make sure that you’re ready for them to stop supporting ACME TLS-SNI-01 domain validation. I got an email a couple of days ago (as I assume everyone using Let’s Encrypt did) letting me know this change was coming. I had nothing to actually do, but going through the validation was super easy and is likely worth the time to ensure your site(s) aren’t impacted.</description>
      <content>&lt;p&gt;If you’re using &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt;, now would be a really great time to make sure that you’re ready for them to stop supporting ACME TLS-SNI-01 domain validation. I got an email a couple of days ago (as I assume everyone using Let’s Encrypt did) letting me know this change was coming. I had nothing to actually do, but going through the validation was super easy and is likely worth the time to ensure your site(s) aren’t impacted. March 13th is the deadline for ACME TLS-SNI-01 to no longer function, so there’s still a lot of time to take a couple of minutes and verify you’re in good shape.&lt;/p&gt;
&lt;p&gt;*Note: I’m using &lt;code&gt;certbot&lt;/code&gt;, which makes this whole thing super easy. If you’re &lt;strong&gt;not&lt;/strong&gt; using &lt;code&gt;certbot&lt;/code&gt; then your steps will be different.*&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://letsencrypt.org/docs/staging-environment/&#34;&gt;Let’s Encrypt staging environment&lt;/a&gt; already has disabled ACME TLS-SNI-01 validation, so checking against that is a good test. As a &lt;code&gt;certbot&lt;/code&gt; user, I also needed to validate that I was using at least version 0.28 of the application, which is simple enough to do via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;certbot --version    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That appears to be the latest version offered by the PPA: &lt;code&gt;ppa:certbot/certbot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Testing a &lt;code&gt;certbot&lt;/code&gt; run against the staging environment is toggled via the &lt;code&gt;--dry-run&lt;/code&gt; switch. If you do a dry run of your renewal against the staging environment and everything comes back successful, you should be in good shape:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo certbot renew --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My certs all validated successfully, so everything is ready to go for the change. I presume if there are any failures then the dry run will alert you to what needs to be fixed; I can’t say for sure since I was lucky enough to not see any of those. Full instructions from Let’s Encrypt are &lt;a href=&#34;https://community.letsencrypt.org/t/how-to-stop-using-tls-sni-01-with-certbot/83210&#34;&gt;available on their site&lt;/a&gt;, though.&lt;/p&gt;
&lt;p&gt;Happy encrypting!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
