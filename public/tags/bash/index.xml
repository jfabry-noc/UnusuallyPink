<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/bash/</link>
    <description>Recent content in bash on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grep and Sed to Modify All Files in a Directory</title>
      <link>https://hugo.unusually.pink/grep-and-sed-to-modify-all-files-in-a-directory/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/grep-and-sed-to-modify-all-files-in-a-directory/</guid>
      <description>I recently decided to rebrand one of my websites, complete with a different domain, title, and author (that’s me!) This is part of the beauty of using a static site generator like Hugo; I updated the domain in my configuration file, and everything else just magically changed when the site was recompiled. The caveat is that I wanted to change the author attribute in each post to a different name to match my new Mastodon profile.</description>
      <content>&lt;p&gt;I recently decided to rebrand one of my websites, complete with a different domain, title, and author (that’s me!) This is part of the beauty of using a static site generator like &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;; I updated the domain in my configuration file, and everything else just magically changed when the site was recompiled. The caveat is that I wanted to change the &lt;code&gt;author&lt;/code&gt; attribute in each post to a different name to match my &lt;a href=&#34;https://fosstodon.org/@consoleaccess&#34;&gt;new Mastodon profile&lt;/a&gt;. In this particular &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-terminal/&#34;&gt;Hugo theme&lt;/a&gt; the author is specified in each post rather than in the central &lt;code&gt;config.toml&lt;/code&gt; file so that I can have different authors in a single site. This meant I needed to mass modify all of my posts to change the author (at least for the ones that have it since I previously used a theme where the author wasn’t specified.) I knew that this should be possible with &lt;code&gt;sed&lt;/code&gt; but couldn’t remember the exact syntax. Since Hugo stores all of the Markdown files for my posts in a single directory, though, I knew it shouldn’t be too complicated.&lt;/p&gt;
&lt;p&gt;The syntax &lt;code&gt;sed&lt;/code&gt; uses to do find-and-replace is &lt;em&gt;very&lt;/em&gt; familiar to me since I use the same syntax in &lt;code&gt;vim&lt;/code&gt; all the time. It’s great for those moments when I realize I’ve given a particular variable or function an extremely poor name and need to change every instance in a particular file. So what I really needed in this case was to recall how to use the CLI to change the value in multiple files; specifically I needed to change every file in a particular directory. It didn’t take many searches for me to confirm that this would require another utility to discover each file so that &lt;code&gt;sed&lt;/code&gt; could then update them. Ultimately I got up and running with the following commands thanks to &lt;a href=&#34;https://isaacsukin.com/news/2013/06/command-line-tip-replace-word-all-files-directory&#34;&gt;what I found on this site&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;grep -lr -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author = \&amp;#34;oldName\&amp;#34;&amp;#34;&lt;/span&gt; . | xargs sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/author = \&amp;#34;oldName\&amp;#34;/author = \&amp;#34;consoleaccess\&amp;#34;/g&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, &lt;code&gt;grep&lt;/code&gt; is discovering the files and then I’m using &lt;code&gt;xargs&lt;/code&gt; to redirect the output from &lt;code&gt;grep&lt;/code&gt; to the arguments for &lt;code&gt;sed&lt;/code&gt;. I won’t rehash the specific parameters of each command, as the original site I linked to above does a terrific job of that. However, it’s worth mentioning that I was able to swap out &lt;em&gt;just&lt;/em&gt; the instances of my old account name for the Markdown file’s &lt;strong&gt;author&lt;/strong&gt; property by specifying the full line instead of just the account name; all I had to do was use the &lt;code&gt;\&lt;/code&gt; to escape things like the double-quotes that I needed to include. This way everything runs as efficiently as possible since &lt;code&gt;grep&lt;/code&gt; is only returning the files that contain the old name in the author property, and then &lt;code&gt;sed&lt;/code&gt; is only changing that single line of each file passed to it.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Quarantine Time Script</title>
      <link>https://hugo.unusually.pink/quarantine-time-script/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/quarantine-time-script/</guid>
      <description>Are you tired of sitting at home wondering how many days you’ve been choosing to quarantine like a responsible adult? Me too! The number of times I’ve been in conversations or working on posts for blogs or social media and thought, “Wait, how long have I been at home now?” followed by wasting time doing rough calendar math in my head was enough that I finally burned some time this weekend putting together a script for it.</description>
      <content>&lt;p&gt;Are you tired of sitting at home wondering how many days you’ve been choosing to quarantine like a responsible adult? Me too! The number of times I’ve been in conversations or working on posts for blogs or social media and thought, “Wait, how long have I been at home now?” followed by wasting time doing rough calendar math in my head was enough that I finally burned some time this weekend putting together a script for it.&lt;/p&gt;
&lt;p&gt;In the interest of full disclosure, every time this has come up before I’ve done some very simple PowerShell to actually calculate this, at least once I passed the point where I couldn’t just think of it off the top of my head:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$now = Get-Date
$then = Get-Date -Date &amp;quot;2020/03/11&amp;quot;
($now - $then).Days
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Clearly this is extremely simple! I’ve found myself needing a few shell scripts, though, so I figured it would be a good opportunity to write this in Bash instead for a little exposure. The biggest key was to just figure out how the heck to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a date at a specific time.&lt;/li&gt;
&lt;li&gt;Subtract the dates.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;date-at-a-specific-time&#34;&gt;Date at a specific time&lt;/h2&gt;
&lt;p&gt;This was pretty easy after a quick &lt;a href=&#34;https://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt; search. The &lt;code&gt;date&lt;/code&gt; utility includes a &lt;code&gt;-d&lt;/code&gt; parameter that allows me to give it a string that it’ll use as the date, just like &lt;code&gt;-Date&lt;/code&gt; does in PowerShell.&lt;/p&gt;
&lt;h2 id=&#34;subtract-the-dates&#34;&gt;Subtract the dates&lt;/h2&gt;
&lt;p&gt;The second piece also ended up being &lt;em&gt;much&lt;/em&gt; more straightforward than I expected. The &lt;code&gt;date&lt;/code&gt; utility similarly includes a few codes I can use to specify how I’d like the date to be formatted, including &lt;code&gt;%s&lt;/code&gt; which will give the date in seconds relative to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;Unix epoch time&lt;/a&gt;. I could get both dates in seconds, subtract the current date from when I started quarantine, and then convert the seconds to days. For those keeping score at home, there are 86,400 seconds in a day.&lt;/p&gt;
&lt;p&gt;As an added bonus, &lt;code&gt;date&lt;/code&gt; returns the time in seconds just like everything else in the universe that isn’t Java-based. I’m looking at you, &lt;a href=&#34;https://failti.me/posts/groovy_prog/&#34;&gt;Groovy&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;getting-a-starting-date&#34;&gt;Getting a starting date&lt;/h2&gt;
&lt;p&gt;The easy method would’ve been to hard-code the date when I started quarantine and leave it at that. To make it a little more extensible, though, I instead opted to pass the date as a parameter. Given that people can pass anything as a parameter, though, I put together a regex to enforce the YYYY/MM/DD format on whatever is typed. That being said, I still included an additional check after parsing the starting date regardless since it would still be possible to specify a date that matches the regex but that isn’t real (e.g. 2020/02/31.)&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the code in all of its janky glory.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It’s extremely simple, but it was a fun little learning experience to kill some time on a weekend when I was sitting at home… continuing to quarantine…&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hugo and the Implausibly Old Timestamp</title>
      <link>https://hugo.unusually.pink/hugo-and-the-implausibly-old-timestamp/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/hugo-and-the-implausibly-old-timestamp/</guid>
      <description>Management of one of my blogs is handled through a variety of shell scripts. I have a script for executing hugo to rebuild the site and copy the output of the public directory to the folder where Nginx hosts it, for example. One of my scripts creates a tarball of the site and uses rsync to copy it to another server so that, if my VPS blows up, I can easily retrieve the backup.</description>
      <content>&lt;p&gt;Management of one of my blogs is handled through a variety of shell scripts. I have a script for executing &lt;code&gt;hugo&lt;/code&gt; to rebuild the site and copy the output of the &lt;code&gt;public&lt;/code&gt; directory to the folder where Nginx hosts it, for example. One of my scripts creates a tarball of the site and uses &lt;code&gt;rsync&lt;/code&gt; to copy it to another server so that, if my VPS blows up, I can easily retrieve the backup.&lt;/p&gt;
&lt;p&gt;After composing &lt;a href=&#34;https://unusually.pink/making-a-hash-for-the-html-integrity-property/&#34;&gt;yesterday’s post&lt;/a&gt;, though, I ran into an error with the backup script. It basically runs the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zvcf /home/fail/backups/failti_me.tar.gz blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This started throwing a warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tar: blog/public: implausibly old time stamp 1754-08-30 16:53:05.128654848 -0550&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It claimed the &lt;strong&gt;public&lt;/strong&gt; directory where Hugo publishes the compiled site contents to was created in 1754… which is probably a bit older than seems plausible. My blog still published correctly; it was only &lt;code&gt;tar&lt;/code&gt; being salty about the weird timestamp. I used &lt;code&gt;stat&lt;/code&gt; to check the directory and confirmed that the timetsamp on when it was modified was completely borked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;stat blog/public/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That told me:&lt;/p&gt;
&lt;p&gt;File: blog/public/
Size: 4096        Blocks: 8          IO Block: 4096   directory
Device: fc01h/64513d    Inode: 512063      Links: 73
Access: (0755/drwxr-xr-x)  Uid: ( 1000/    john)   Gid: ( 1000/    john)
Access: 2020-07-21 18:58:28.669384769 -0500
Modify: 1754-08-30 16:53:05.128654848 -0550
Change: 2020-07-21 18:58:28.189382080 -0500
Birth: -&lt;/p&gt;
&lt;p&gt;After some searches online I found the following &lt;a href=&#34;https://github.com/gohugoio/hugo/issues/6161&#34;&gt;GitHub issue thread&lt;/a&gt; confirming that plenty of people other than me were seeing the same problem and that it was still present in the current version of Hugo. While I had initially been confused as to why I suddenly started seeing this now since I hadn’t upgraded Hugo or anything like that, I saw a few comments indicating that placing items in Hugo’s static directory seemed to trigger the issue; I had placed an image there from my last post, and it was the first addition to that directory in quite a while. With some additional searching and testing, I verified I could do the following to simply ignore the warning from &lt;code&gt;tar&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zvcf /home/fail/backups/failti_me.tar.gz blog --warning&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no-timestamp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I didn’t like the idea of having such a wonky date on my filesystem; as a result, I started searching for how I could fix it by manually adjusting the “Modify” timestamp. &lt;code&gt;touch&lt;/code&gt; seemed like a likely candidate, and after reviewing the &lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/man1/touch.1.html&#34;&gt;man page&lt;/a&gt; I saw that there was a &lt;code&gt;-t&lt;/code&gt; flag for it which would allow me to manually specify the timestamp. I basically just wanted to set it to the current time so I added the following to the my script which recompiles the site, placing it after the build and before &lt;code&gt;rsync&lt;/code&gt;ing the contents of the public directory to the Nginx directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;STUPID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+%y%m%d%H%M&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
touch -t $STUPID /home/john/blog/public/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sure enough, after running this the resulting &lt;code&gt;tar&lt;/code&gt; command has no qualms. Likewise, re-running the &lt;code&gt;stat&lt;/code&gt; command from above shows the current date and time as the modified time on the directory. I really hope this bug gets fixed soon since it seems to have been around for a hot minute, but at least I have a workaround for the time being.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
