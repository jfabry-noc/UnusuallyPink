<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nginx on Unusually Pink</title>
    <link>https://unusually.pink/tags/nginx/</link>
    <description>Recent content in nginx on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - John Fabry</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://unusually.pink/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enable Directory Listing On Specific Directory With Nginx</title>
      <link>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</guid>
      <description>Note: In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.
Generally when you navigate to a website, such as https://unusually.pink/, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site.</description>
      <content>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.&lt;/p&gt;
&lt;p&gt;Generally when you navigate to a website, such as &lt;a href=&#34;https://unusually.pink/&#34;&gt;https://unusually.pink/&lt;/a&gt;, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site. Instead, the web server software will be configured to look for specific files in each folder, such as &lt;code&gt;index.html&lt;/code&gt;, and render those. In some instances, however, you may actually &lt;em&gt;want&lt;/em&gt; to allow someone to browser the files in a directory. This was the situation I found myself in a few days ago for a skunkworks project at work. I already had a server set up running Nginx, and I just needed to expose a particular directory.&lt;/p&gt;
&lt;p&gt;Most searches I did appeared fairly straightforward. The easiest way to do this is to define the &lt;code&gt;autoindex&lt;/code&gt; parameter inside of a &lt;code&gt;location&lt;/code&gt; block of the site&amp;rsquo;s configuration file at: &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt;. I initially did that and had something that looked like this. Note that these are only the relevant pieces for this post, and this is &lt;em&gt;not&lt;/em&gt; the full configuration file:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;Everything in the second &lt;code&gt;location&lt;/code&gt; block contained my newly added content to make this directory I had just created, &lt;code&gt;targetfolder&lt;/code&gt;, exposed. After saving the file, I first tested my configuration with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Crucially, this told me the configuration syntax was okay. Then I restarted my web server via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I tried navigating to my directory via a web browser&amp;hellip; only to be greeted by a 404 error. The 404 (which indicates that the requested resource wasn&amp;rsquo;t found on the server) tells me that something is likely amiss with how I&amp;rsquo;m referencing the requested content. I compared my configuration to a handful of samples online, though, and didn&amp;rsquo;t see what was wrong. Eventually, it dawned on me that all of the examples I found were showing how to enable directory listing for an &lt;em&gt;entire&lt;/em&gt; site, whereas my scenario was as little different considering I only wanted to expose a subfolder. I did a few more searches with that slant in mind, and I eventually hit upon a thread where someone mentioned that having multiple &lt;code&gt;root&lt;/code&gt; definitions in their configuration file caused problems for them.&lt;/p&gt;
&lt;p&gt;I tried adding one additional character to my configuration to comment out the &lt;code&gt;root&lt;/code&gt; definition in my second &lt;code&gt;location&lt;/code&gt; block:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
#root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;After another &lt;code&gt;sudo systemctl reload nginx&lt;/code&gt;, I was able to view the directory just like I expected. In hindsight this makes a lot of sense; if I already define the root of the site somewhere earlier in the file, I can&amp;rsquo;t simply change it on a whim later on. Instead, the &lt;code&gt;location /targetfolder&lt;/code&gt; directive is going to be &lt;em&gt;relative&lt;/em&gt; to the &lt;code&gt;root&lt;/code&gt; I already specified. It was interesting to me that checking my configuration with &lt;code&gt;sudo nginx -t&lt;/code&gt; originally didn&amp;rsquo;t alert me to anything, but I&amp;rsquo;m hardly an Nginx guru. It&amp;rsquo;s certainly possible there may be some scenario where the setup I had was valid.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Self-Hosting A Static Website</title>
      <link>https://unusually.pink/self-hosting-a-static-website/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/self-hosting-a-static-website/</guid>
      <description>Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.</description>
      <content>&lt;p&gt;Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.&lt;/p&gt;
&lt;p&gt;We first took some early steps gathering requirements. What did he want for the site? Literally just the privacy policy. Where did he want to host it? Wherever was the cheapest. Did he have a domain name already? Yes! This was fairly straightforward; he literally &lt;em&gt;just&lt;/em&gt; wanted the very basics. After a bit of discussion I convinced him to write up a quick &amp;ldquo;about me&amp;rdquo; type of page so that we could have more than just the privacy policy. From there I could get to work.&lt;/p&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;The first thing I did was have him head over to &lt;a href=&#34;https://www.vultr.com/&#34;&gt;Vultr&lt;/a&gt; and spin up their cheapest instance. I think this is running him $5 USD per month. I had him pick &lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; as the server operating system given that it&amp;rsquo;s the one I&amp;rsquo;m most familiar with. My friend has some familiarity with Linux but not a lot of practical knowledge; when I asked him to shoot me some SSH credentials with &lt;code&gt;sudo&lt;/code&gt; access he literally sent me the root account from Vultr. Ick.&lt;/p&gt;
&lt;h1 id=&#34;configuring-the-host&#34;&gt;Configuring The Host&lt;/h1&gt;
&lt;h3 id=&#34;accounts&#34;&gt;Accounts&lt;/h3&gt;
&lt;p&gt;My first goal was to configure the host. I started that off by creating user accounts for each of us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;adduser username
usermod -aG sudo username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After switching users and verifying my new account worked, I disabled root&amp;rsquo;s ability to log in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo passwd -l root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ports&#34;&gt;Ports&lt;/h3&gt;
&lt;p&gt;Next I wanted to change the default SSH port since having 22 open means a million places from across the planet are going to throw garbage traffic at your server. I did this by modifying the SSH config at &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, finding the line with &lt;code&gt;#Port 22&lt;/code&gt;, uncommenting it, and changing the port to a high number of my friend&amp;rsquo;s choice. Then I restarted SSH:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;firewall&#34;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;I wanted to enable the firewall as well, so I opened up with the new SSH port &lt;em&gt;and&lt;/em&gt; 80 and 443 for our eventual website:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ufw allow sshPortNumber/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;webserver&#34;&gt;Webserver&lt;/h3&gt;
&lt;p&gt;I next needed a web server; &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; has been my go-to choice for a long time. Rather than re-hashing all of the steps, I&amp;rsquo;ll just recommend following the excellent documentation from &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04&#34;&gt;DigitalOcean&lt;/a&gt; which nicely covers the Nginx configuration. That takes you to the point where you are hosting a website. Then you just need content on it.&lt;/p&gt;
&lt;h3 id=&#34;certificate&#34;&gt;Certificate&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m an advocate of using HTTPS for everything, and with free certificates from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; there&amp;rsquo;s no reason not to. Given that we have shell access, using &lt;code&gt;certbot&lt;/code&gt; is the way to go. There&amp;rsquo;s also excellent &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&#34;&gt;documentation on that process on Ubuntu with Nginx&lt;/a&gt;. I highly recommend selecting the option to redirect any HTTP traffic to HTTPS.&lt;/p&gt;
&lt;h1 id=&#34;website&#34;&gt;Website&lt;/h1&gt;
&lt;p&gt;Now for the website itself. I&amp;rsquo;m not really much of a web developer, and I dislike making anything frontend; I don&amp;rsquo;t exactly have the best design sense. So I once again opted to leverage &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to take care of that for me. I&amp;rsquo;ve written about &lt;a href=&#34;https://failti.me/posts/hugo_setup_guide/&#34;&gt;the specifics of using Hugo in detail&lt;/a&gt;. Since we really just wanted a generic landing page with my friend&amp;rsquo;s socials and then links to the About and Privacy Policy pages, I ended up going with the &lt;a href=&#34;https://themes.gohugo.io/hermit/&#34;&gt;Hermit theme&lt;/a&gt;. It has a nice, simple look. My friend&amp;rsquo;s favorite color is mint green, so the default background also works nicely with that when I changed the accent color. The theme nicely includes an &lt;a href=&#34;https://github.com/Track3/hermit/tree/master/exampleSite&#34;&gt;exampleSite&lt;/a&gt; so that I can steal their &lt;code&gt;config.toml&lt;/code&gt; file and also their &amp;ldquo;About&amp;rdquo; page to make things even easier for myself.&lt;/p&gt;
&lt;h1 id=&#34;backups&#34;&gt;Backups&lt;/h1&gt;
&lt;p&gt;One of the nice things about Hugo is that, since everything is a simple text file, it&amp;rsquo;s very easy to compress your entire site and save a backup. Then if something terrible happens to your server, it&amp;rsquo;s extremely easy to get the site back up and running on a different machine. In this case, I made tarballs for both the finished, compiled site and the Hugo directory storing the configuration and Markdown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zvcf ~/temp/html_output.tar.gz /var/www/mySite.com/
tar -zvcf ~/temp/hugo_directory.tar.gz /var/www/mySite.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the tarballs created, I used an SFTP client to copy them off the server for safe keeping.&lt;/p&gt;
&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h1&gt;
&lt;p&gt;In total it took me about an hour and a half to get everything up and running. Having gone through this process &lt;em&gt;many&lt;/em&gt; times for websites of my own, I&amp;rsquo;ve got a decent bit of experience with the process, but this shows it still doesn&amp;rsquo;t necessarily take a super long time to get a decent website up and running. The big benefits are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The site is &lt;em&gt;cheap&lt;/em&gt; to run. Even the smallest instance at any VPS provider will be able to handle multiple sites with ease unless they start getting really popular, so if my friend wants to create any other sites in the future he won&amp;rsquo;t need additional hosting.&lt;/li&gt;
&lt;li&gt;Backups are stupid simple. My friend isn&amp;rsquo;t beholden to a hosting provider or trying to work within the confines of something more expensive like Wordpress or Squarespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The downsides are present, though, so you have to be cool with them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup takes more technical chops than clicking through a Squarespace template editor. While the documentation for everything in this post is extremely good, if working out a terminal freaks you out then this likely isn&amp;rsquo;t for you.&lt;/li&gt;
&lt;li&gt;Content is authored in Markdown. This likely doesn&amp;rsquo;t matter for my friend at the moment since he&amp;rsquo;s not really posting anything new to the site, but it would be something to keep in mind if he decided to start a blog. In that scenario, I usually just SSH to the server and author my content in &lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;. You could also author the Markdown elsewhere and copy it to the server, or use SFTP to open the Markdown file on the server from an editor on your local machine. It&amp;rsquo;s definitely &lt;em&gt;not&lt;/em&gt; as simple as a WYIWYG editor in your browser, though.&lt;/li&gt;
&lt;li&gt;Maintenance is something that will need to be done at least periodically. The server will need to be patched. That&amp;rsquo;s easy enough to do with a simple &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; and then reboot when necessary, but it&amp;rsquo;s just another step to keep in mind. Likewise, bouncing the server means that the website will be down, even if it&amp;rsquo;s typically only for a moment or two.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being kind of pretentious, technical snob I personally find it &lt;em&gt;easier&lt;/em&gt; to author my comment in Markdown on Vim instead of using a WYSIWYG editor in a GUI, but your mileage will vary based on your own prefrences.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fixing Let&#39;s Encrypt Certificates After You Delete Them Like An Idiot</title>
      <link>https://unusually.pink/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</guid>
      <description>In Episode 11, I had discussed how I run a couple of my websites on a Linux server running Nginx as the web server and encrypting connections to them via Let’s Encrypt certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via certbot. If you don’t recall the episode, I had taken my web server which was only running laifu.moe and added awk.ninja to it so that I had both sites running on the same server.</description>
      <content>&lt;p&gt;In &lt;a href=&#34;https://www.unusually.pink/podcast/episode-11-attach-all-the-storage&#34;&gt;Episode 11&lt;/a&gt;, I had discussed how I run a couple of my websites on a Linux server running &lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; as the web server and encrypting connections to them via &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt; certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;certbot&lt;/a&gt;. If you don’t recall the episode, I had taken my web server which was only running &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt; and added &lt;a href=&#34;https://awk.ninja&#34;&gt;awk.ninja&lt;/a&gt; to it so that I had both sites running on the same server. When I added awk.ninja, I had to re-run certbot and get a certificate for it along with the certificate I had for laifu.moe. That’s where I messed up; I got tipped off when I received the following email from Let’s Encrypt letting me know that my certificate for laifu.moe was about to expire.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Your certificate (or certificates) for the names listed below will expire in 10 days (on 07 Jul 19 12:52 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.&lt;/p&gt;
&lt;p&gt;We recommend renewing certificates automatically when they have a third of their&lt;br&gt;
total lifetime left. For Let’s Encrypt’s current 90-day certificates, that means&lt;br&gt;
renewing 30 days before expiration. See&lt;br&gt;
&lt;a href=&#34;https://letsencrypt.org/docs/integration-guide/&#34;&gt;https://letsencrypt.org/docs/integration-guide/&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;laifu.moe&lt;br&gt;
&lt;a href=&#34;http://www.laifu.moe&#34;&gt;www.laifu.moe&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seemed odd to me since I knew I had a &lt;strong&gt;cron&lt;/strong&gt; job running to update the certificates. I checked the expiration for the certificate on laifu.moe and saw that it had nearly two months left on it. I checked the certificate applied to awk.ninja and saw the same thing. EXACTLY the same thing in fact. In double-checking the certificate on laifu.moe, I realized that the Common Name was for awk.ninja. I was using the awk.ninja certificate for &lt;em&gt;both&lt;/em&gt; of my sites. Oops. What happened was that when I added awk.ninja and re-ran &lt;strong&gt;certbot&lt;/strong&gt;, I got the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/FixingLetsEncryptCertificatesAfterYouDeleteThemLikeAnIdiot_certbot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;My thought at the time was that I needed to select ALL of the sites. In reality, this overwrote the configuration I already had on laifu.moe and applied the awk.ninja certificate to both sites. This is where I decided to be really stupid. I decided that I would delete the existing certificates, re-run &lt;strong&gt;certbot&lt;/strong&gt; twice (one for laifu.moe and once for awk.ninja), and then be done. I started off by deleting the awk.ninja certificate that was applied to both sites:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo certbot delete --cert-name awk.ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I did the same to delete the laifu.moe certificate. Then I tried to do a vanilla run of &lt;strong&gt;certbot&lt;/strong&gt; to get the menu in my screenshot above and individually configure each of my two sites. Instead of getting that menu, though, I received an error message that my sites were pointing to certificates that didn’t exist. &lt;strong&gt;certbot&lt;/strong&gt; then exited without giving me any further options. The problem is that my configuration files below still referenced the certificates that I just nuked. Oops.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/nginx/sites-available/awk.ninja
/etc/nginx/sites-available/laifu.moe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After thinking about it for a few seconds, it made sense; &lt;strong&gt;certbot&lt;/strong&gt; can’t know what’s going on and is expecting me to do some cleanup on the mess I made instead of making assumptions about whether or not I should still have certificates. To keep my life simple, I decided to go back to a clean slate on my &lt;strong&gt;sites-available&lt;/strong&gt; configurations since I knew that I could get &lt;strong&gt;certbot&lt;/strong&gt; to redo the configuration again as long as I could get it to successfully run. As a result, I just set the configurations for both laifu.moe and awk.ninja back to a super vanilla setup. Just &lt;strong&gt;%s/laifu.moe/awk.ninja/g&lt;/strong&gt; on the file below for what I configured on awk.ninja.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen [::]:80;

        root /var/www/laifu.moe/html;
        index index.html index.htm index.nginx-debian.html;

        server_name laifu.moe www.laifu.moe;

        location / {
                try_files $uri $uri/ =404;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once I had that done, I restarted nginx just to make sure it was working and I could hit port 80 for both sites.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that working, I was able to re-run &lt;strong&gt;certbot&lt;/strong&gt; and finally get the menu from my initial screenshot. I first configured a certificate for awk.ninja and its www variant. Once that was done, I ran &lt;strong&gt;certbot&lt;/strong&gt; one more time and walked through getting a certificate for laifu.moe and its www-variant. In both instances, I opted to have &lt;strong&gt;certbot&lt;/strong&gt; reconfigure the files in &lt;strong&gt;sites-available&lt;/strong&gt; to redirect all HTTP traffic for HTTPS. I restarted Nginx one more time and &lt;em&gt;finally&lt;/em&gt; I had everything configured the way I wanted with each site using its &lt;em&gt;own&lt;/em&gt; certificate.&lt;/p&gt;
&lt;p&gt;The moral of the story is to actually troubleshoot the problem instead of just starting off by deleting shit from your server. Also, try staying pink!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
