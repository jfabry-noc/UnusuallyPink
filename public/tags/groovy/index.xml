<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>groovy on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/groovy/</link>
    <description>Recent content in groovy on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Sat, 23 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>msal4j With Groovy</title>
      <link>https://hugo.unusually.pink/msal4j-with-groovy/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/msal4j-with-groovy/</guid>
      <description>I&amp;rsquo;ve written before about the fact that I use Groovy heavily in my current role since the platform I work the most frequently with is able to treat it as a first class citizen, whereas using something like PowerShell or Python adds a few more hurdles. The other thing I work with heavily is Office 365; this got me wondering if I might be able to combine the two by using Groovy to query Microsoft&amp;rsquo;s Graph API.</description>
      <content>&lt;p&gt;I&amp;rsquo;ve written before about the fact that I &lt;a href=&#34;https://unusually.pink/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc/&#34;&gt;use Groovy heavily&lt;/a&gt; in my current role since the platform I work the most frequently with is able to treat it as a first class citizen, whereas using something like PowerShell or Python adds a few more hurdles. The other thing I work with heavily is Office 365; this got me wondering if I might be able to combine the two by using Groovy to query &lt;a href=&#34;https://developer.microsoft.com/en-us/graph/&#34;&gt;Microsoft&amp;rsquo;s Graph API&lt;/a&gt;. Microsoft&amp;rsquo;s current standard for interacting with the Graph API, replacing the old Active Directory Authentication Library (ADAL), is the Microsoft Authentication Library (MSAL.) &lt;a href=&#34;https://github.com/AzureAD&#34;&gt;Microsoft provides MSAL packages for a &lt;em&gt;ton&lt;/em&gt; of popular languages&lt;/a&gt;, and considering that Groovy is a superset of Java, I figured that I should be able to leverage the &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-java&#34;&gt;msal4j version&lt;/a&gt; within Groovy.&lt;/p&gt;
&lt;p&gt;In my particular case, the code that I write is typically used as &amp;ldquo;glue&amp;rdquo; to link disparate systems together. As such, I based my work off of the Microsoft sample code for &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-java/blob/dev/src/samples/confidential-client/ClientCredentialGrant.java&#34;&gt;authenticating as a daemon with a client secret&lt;/a&gt;. This is the method I&amp;rsquo;ve always used with my PowerShell and Python code. tl;dr, I was able to get this working with almost no difference from the Java sample, and you can see the end code that successfully authenticates and queries for the users in an AAD instance &lt;a href=&#34;https://github.com/jfabry-noc/GroovyMSAL/blob/main/graphToken.groovy&#34;&gt;on my GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can see if you check out the code, I first used &lt;a href=&#34;https://docs.groovy-lang.org/latest/html/documentation/grape.html&#34;&gt;Grape for my dependency management&lt;/a&gt;. I&amp;rsquo;m admittedly not much of a Java developer, but I found Grape to be a very handy way to add additional libraries with very little overhead. It&amp;rsquo;s a much more Python-esque experience than trying to add &lt;code&gt;.jar&lt;/code&gt; files to a project in an IDE. There were a few dependencies I needed for this project, but the main one, msal4j, was added via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://mvnrepository.com/artifact/com.microsoft.azure/msal4j       
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Grapes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;                     
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Grab&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;microsoft&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;azure&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; module&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;msal4j&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;       
        &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To figure out what the heck to enter to import the library via Grape, I used the &lt;a href=&#34;https://mvnrepository.com/&#34;&gt;Maven Repository&lt;/a&gt;, which gives you the additions required to use Grape &amp;ndash; or other dependency management tools like Maven or Gradle. Just be sure you&amp;rsquo;re using the &lt;a href=&#34;https://mvnrepository.com/artifact/com.microsoft.azure/msal4j/1.8.1&#34;&gt;msal4j library&lt;/a&gt;, which is designed for vanilla Java. The &lt;a href=&#34;https://mvnrepository.com/artifact/com.microsoft.identity.client/msal&#34;&gt;library just named msal&lt;/a&gt; is the one designed for Android. This was my first experience using Grape, and the only issue I ran into was a failure to realize that I needed to immediately include &lt;code&gt;import&lt;/code&gt; statements after all of my Grape calls; adding the library doesn&amp;rsquo;t magically add the functions and classes you may need, hence all of the msal-specific imports like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.ClientCredentialFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.ClientCredentialParameters&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;          
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.ConfidentialClientApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.IAuthenticationResult&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.IClientCredential&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.MsalException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.microsoft.aad.msal4j.SilentParameters&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once I verified I could execute my baseline code making the imports without any issues, I started converting the function for getting an access token. Since this was completely new territory for me, I was running it against my free developer tenant. Anyone is free to sign up for the &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-365/dev-program&#34;&gt;Microsoft 365 Developer Program&lt;/a&gt;, which gets you a free tenant, 25 Office 365 E5 licenses, and plenty of other fun Azure goodies to test with. Be mindful that this is &lt;em&gt;not&lt;/em&gt; something for production purposes, and every 90 days Microsoft performs an evaluation on the tenant to verify that you&amp;rsquo;re using it for development purposes and not for free access into Office 365. Admittedly, mine has gone neglected for many 90 day cycles without any active development work, but I also wasn&amp;rsquo;t actively using the O365 accounts for anything, which has been cool in Microsoft&amp;rsquo;s book so far. My tenant has always been renewed, and I was happy to have it around for testing this out. I &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app&#34;&gt;registered a new application in Azure AD&lt;/a&gt;, and then I tested the details from it that are typically needed for getting a token (the tenant ID, the client ID, and the client secret) in some existing Python code to verify that everything was working as expected.&lt;/p&gt;
&lt;p&gt;With the foundation out of the way, I worked to &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-java/blob/dev/src/samples/confidential-client/ClientCredentialGrant.java&#34;&gt;modify Microsoft&amp;rsquo;s acquireToken() function&lt;/a&gt; to be a bit more Groovy-esque:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Function to get an access token.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; def &lt;span style=&#34;color:#a6e22e&#34;&gt;GetAccessToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String clientId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String authority&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String secret&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String scope&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;// Create the app.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     ConfidentialClientApplication app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConfidentialClientApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clientId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ClientCredentialFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createFromSecret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;secret&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;authority&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authority&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
     ClientCredentialParameters clientCredentialParam &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientCredentialParameters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
     def result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;acquireToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clientCredentialParam&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;

     &lt;span style=&#34;color:#75715e&#34;&gt;// Return to the caller.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     result
 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This worked, though I didn&amp;rsquo;t realize it at first. I originally took my calling code of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def accessToken &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetAccessToken&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;aadConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; aadConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;authority&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; aadConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; aadConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And attempted to just print it to the screen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;println accessToken
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This resulted in an error message that spent quite a while driving me moderately insane:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;com.microsoft.aad.msal4j.MsalClientException: Cached JWT could not be parsed: Invalid JWT serialization: Missing dot delimiter(s)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not being super familiar with the &lt;code&gt;IAuthenticationResult&lt;/code&gt; object type, this threw me for a bit of a loop since I didn&amp;rsquo;t really know what to expect. Searching for this error just turned up generic results surrounding the JWT library that Microsoft calls from within the msal4j library. Searching for it in relation to msal4j in particular returns almost no results, and searching for with respect to Groovy returns &lt;em&gt;literally&lt;/em&gt; no results.&lt;/p&gt;
&lt;p&gt;I tried to make a function to query the Microsoft Graph using the &lt;code&gt;accessToken&lt;/code&gt; value passed as the Bearer, but that simply resulted in the same error. Since I was working on this on my MacBook Pro running a &lt;a href=&#34;https://formulae.brew.sh/formula/openjdk#default&#34;&gt;beta build of the OpenJDK 16 for Apple&amp;rsquo;s M1 chip&lt;/a&gt; and on a Linux VPS with OpenJDK 11, I tried running against OpenJDK 8 since that&amp;rsquo;s the version that plays the nicest with Groovy, but I got the same result. I eventually even went to the point of setting up a Java environment with &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; to verify that the sample code worked in vanilla Java 15, which it did. While looking at the Java code in IDEA, though, I realized that the sample output was &lt;em&gt;not&lt;/em&gt; calling the &lt;code&gt;accessToken&lt;/code&gt; directly, but was rather calling a method on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def tokenValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accessToken&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;accessToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I modified my code with this, passing the value from the method to my &lt;code&gt;GetUsersListFromGraph()&lt;/code&gt; function, and sure enough the user accounts from my test tenant were dumped to the screen as expected. Obviously, this error was a pretty simple mistake on my part to not leverage the object from msal4j properly. That being said, I figured that noting the error message might be helpful for someone else who makes the same mistake and finds the same lack of results when searching for the error message. I also thought it was quite slick how seamlessly Grape makes importing libraries into Groovy code without needing to worry about downloading &lt;code&gt;.jar&lt;/code&gt; files, specifying a &lt;code&gt;classpath&lt;/code&gt; when calling Groovy, etc. I think it&amp;rsquo;ll be interesting to see what new integrations I can create now with our monitoring platform.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Parse ISO 8601 String With Timezone Offset To Date Object In Groovy</title>
      <link>https://hugo.unusually.pink/parse-iso-8601-string-with-timezone-offset-to-date-object-in-groovy/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/parse-iso-8601-string-with-timezone-offset-to-date-object-in-groovy/</guid>
      <description>My Groovy posts always have the absolute worst titles, but I figure that making them verbose is really the only way to make them discoverable. I write a good bit of Groovy code at work, and given that it&amp;rsquo;s been a few years since the heyday of Groovy it can occasionally be a bit of a struggle to figure out exactly what I need with the resources I dig up online.</description>
      <content>&lt;p&gt;My &lt;a href=&#34;https://unusually.pink/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc/&#34;&gt;Groovy posts always have the absolute worst titles&lt;/a&gt;, but I figure that making them verbose is really the only way to make them discoverable. I write a good bit of Groovy code at work, and given that it&amp;rsquo;s been a few years since the heyday of Groovy it can occasionally be a bit of a struggle to figure out exactly what I need with the resources I dig up online. Any time I manage to figure out something that was difficult to find information on, it seems like a good opportunity to fill the gap a bit.&lt;/p&gt;
&lt;p&gt;I do a lot of work with APIs, mostly making calls against cloud-based systems. In the cloud, no one generally cares about what timezone you happen to be in, so UTC is always used. I&amp;rsquo;ve recently been making calls against local software platform, though, and &lt;strong&gt;it&lt;/strong&gt; returns timestamps in the local time of the server running it. Ick. I ended up with string values like the following which I then needed to parse as a Date object in Groovy for the sake of comparison.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;2020-10-17T02:00:21.644-04:00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;m quite familiar with converting something like this &lt;em&gt;without&lt;/em&gt; the timezone offset at the end; that one was new for me. My first struggle was exactly what to search for in order to dig up information on this; I eventually discovered that this is &lt;a href=&#34;https://www.iso.org/iso-8601-date-and-time-format.html&#34;&gt;an ISO 8601 date and time format&lt;/a&gt;. I first attempted to simply pass this value straight to &lt;code&gt;Date.parse()&lt;/code&gt; like I would with something in UTC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def dateString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-10-17T02:00:21.644-04:00&amp;#34;&lt;/span&gt;
def dateObject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HH:mm:ss.SSSZ&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; dateString&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attempting this gives a really nice error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unparseable date: &amp;ldquo;2020-10-17T02:00:21.644-04:00&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Groovy telling me to get bent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After more digging than I care to admit, I finally got to the root of the problem: Groovy doesn&amp;rsquo;t like the colon in the timezone offset. Rather than &lt;code&gt;04:00&lt;/code&gt; it wants &lt;code&gt;0400&lt;/code&gt;. Given that I work in the western hemisphere, I &lt;em&gt;could&lt;/em&gt; have taken the easy route and simply removed the last 3 characters, replacing &lt;code&gt;:00&lt;/code&gt; with &lt;code&gt;00&lt;/code&gt;. It&amp;rsquo;s not the most elegant solution, though, and there are parts of the world with timezone offsets in fractions of an hour; assuming it&amp;rsquo;s always going to be a whole hour isn&amp;rsquo;t safe. My first take, written last week, was to be extremely complicated by splitting the string into a list at each colon. From there, I concatenated the list items back into a string, separating them with colons, until attaching the very last piece, which is added sans colon:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It technically works but doesn&amp;rsquo;t look so good; no one would ever call the above solution &amp;ldquo;elegant&amp;rdquo; by any stretch. That was done late on a Friday, though, and over the weekend I had a better thought pop into my head. What if instead of spitting up the entire string I simply:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verified first that the end of the string matched what was expected.&lt;/li&gt;
&lt;li&gt;Took a substring that was everything up until the problematic part of the offset.&lt;/li&gt;
&lt;li&gt;Took a substring for the numbers after the last colon.&lt;/li&gt;
&lt;li&gt;Put the parts from 2 and 3 together.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After shaking off a bit of regular expression rust, this is what I ended up using:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The partial regex match of &lt;code&gt;:\d{2}$&lt;/code&gt; validates that the string ends with a colon followed by any 2 digits. If so, I first create a substring from the first index (0) up to the index at the length of the string minus 3, meaning I omit the colon and last 2 numbers. Then I append to that a substring from the overall string&amp;rsquo;s length minus &lt;strong&gt;2&lt;/strong&gt; through the end of the string. Using the overall string&amp;rsquo;s length minus 2 rather than 3 means I just leave out the colon.&lt;/p&gt;
&lt;p&gt;Is this the best solution? Probably not, but it&amp;rsquo;s getting the job done in my situation. If I ran into issues, my next attempt would be to get the index of every colon in the entire string and then replace the very last one with nothing.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Groovy Programming HttpClient</title>
      <link>https://hugo.unusually.pink/groovy-programming-httpclient/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/groovy-programming-httpclient/</guid>
      <description>As a follow-up to my post on creating a JWT in Groovy, I did manage to figure out how to make an HttpClient in Groovy as opposed to making raw connections. You can see this implemented in the GitHub repository I used for the previously linked post. It was honestly pretty easy to do, and there are tons of tutorials out there; the code is essentially the same regardless of whether you&amp;rsquo;re doing it in Java, Kotlin, or Groovy.</description>
      <content>&lt;p&gt;As a follow-up to my &lt;a href=&#34;https://www.unusually.pink/blog/creating-a-jwt-in-the-groovy-programming-language&#34;&gt;post on creating a JWT in Groovy&lt;/a&gt;, I &lt;em&gt;did&lt;/em&gt; manage to figure out how to make an &lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; in Groovy as opposed to making raw connections. You can see this implemented in the &lt;a href=&#34;https://github.com/JFFail/GroovyJWT/blob/master/jwt.groovy&#34;&gt;GitHub repository&lt;/a&gt; I used for the previously linked post. It was honestly pretty easy to do, and there are &lt;strong&gt;tons&lt;/strong&gt; of tutorials out there; the code is essentially the same regardless of whether you&amp;rsquo;re doing it in Java, Kotlin, or Groovy. Similar to the last time, it&amp;rsquo;ll be easier to look at all of the code in the GitHub repo, but I&amp;rsquo;ll call out the specific snippets I&amp;rsquo;m referencing throughout the post.&lt;/p&gt;
&lt;h3 id=&#34;imports&#34;&gt;Imports&lt;/h3&gt;
&lt;p&gt;I do need a handful of imports to get up and running with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.http.HttpClient
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.http.HttpRequest
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.http.HttpRequest.BodyPublishers
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.http.HttpResponse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.http.HttpResponse.BodyHandlers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If these fail to import when you try to execute the code, you are likely &lt;em&gt;not&lt;/em&gt; operating at Java 11 or above. More on why I know that later&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;payload&#34;&gt;Payload&lt;/h3&gt;
&lt;p&gt;In the last post I created a JWT. Now I need to take it and parse it into JSON to send it to the API endpoint so that I can get an access token. The simplest way to do this is to place it in a Map and then convert the Map to JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Map payloadMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;auth_token&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; jwt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
def payloadJson &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JsonOutput&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toJson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;payloadMap&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-the-client&#34;&gt;Create The Client&lt;/h3&gt;
&lt;p&gt;The process of making requests in this method involves 3 steps. The first is to create the HttpClient object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def httpClient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HttpClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connectTimeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Duration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ofSeconds&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;followRedirects&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Redirect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NORMAL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can set any number that fits with your use case for the timeout duration; 5 seconds was safe for me. There are a &lt;em&gt;lot&lt;/em&gt; of other options for the client so be sure to check out the documentation if you need more.&lt;/p&gt;
&lt;h3 id=&#34;create-the-request&#34;&gt;Create The Request&lt;/h3&gt;
&lt;p&gt;The request object is where the specifics of the connection are identified, like the URL and the method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HttpRequest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpRequest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyPublishers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ofString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;payloadJson&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json; charset=utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*/\*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the second line, I&amp;rsquo;m specifying POST since I need to send data. I&amp;rsquo;ll cover a GET example later on. In the same line, I need to specify the format of my payload as being JSON; just throwing a JSON string at the endpoint will &lt;strong&gt;not&lt;/strong&gt; work. If you only have a single header you can use &lt;code&gt;.header&lt;/code&gt; instead of &lt;code&gt;.headers&lt;/code&gt;. What caught me off guard with the headers is that you specify multiple of them not as key-value pairs like a Map but as a simple list, with each value just following its corresponding key.&lt;/p&gt;
&lt;h3 id=&#34;send-the-request&#34;&gt;Send The Request&lt;/h3&gt;
&lt;p&gt;With the client and request both created, now it&amp;rsquo;s time to send the request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; httpClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; HttpResponse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BodyHandlers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ofString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also pretty straightforward; it&amp;rsquo;s just worth mentioning that I&amp;rsquo;m specifying I want the response to be parsed into a string.&lt;/p&gt;
&lt;h3 id=&#34;error-checking&#34;&gt;Error Checking&lt;/h3&gt;
&lt;p&gt;I can check the &lt;code&gt;statusCode()&lt;/code&gt; method to verify my request was successful and then take action upon the reply.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;statusCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 200 &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    println &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${response.body()}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    println &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: Status code: ${response.statusCode()}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From here I can parse the results to a Map and do my normal thing.&lt;/p&gt;
&lt;h3 id=&#34;get-example&#34;&gt;GET Example&lt;/h3&gt;
&lt;p&gt;Using GET is the same as POST except for some details in the request. Obviously POST is replaced with GET, and then I have additional headers to specify.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HttpRequest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;currentUrl&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json; charset=utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*/\*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bearer $token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Naturally the exact headers you need will depend on the API you&amp;rsquo;re calling. Other than that, though, the process is the exact same as it was with POST, including the way you execute the request.&lt;/p&gt;
&lt;p&gt;Of course, after I implemented all of this I discovered that the back-end in my environment that was actually executing the code was &lt;em&gt;not&lt;/em&gt; running Java 11 or better, so I couldn&amp;rsquo;t even use this setup. It&amp;rsquo;s good to know for the future, though!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Creating a JWT in the Groovy Programming Language</title>
      <link>https://hugo.unusually.pink/creating-a-jwt-in-the-groovy-programming-language/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/creating-a-jwt-in-the-groovy-programming-language/</guid>
      <description>On Friday I found myself in a new situation. I was working with APIs for a new service my company has started using, but their setup was a bit more involved than what I&amp;rsquo;ve typically experienced. Accessing many services via their REST API requires you to follow a few steps to generate an application ID and an API key, you pass those with your request, and you&amp;rsquo;re done. The downside to this is that it can open up security vulnerabilities; if something happens to your API keys, for example, they can be used for nefarious purposes.</description>
      <content>&lt;p&gt;On Friday I found myself in a new situation. I was working with APIs for a new service my company has started using, but their setup was a bit more involved than what I&amp;rsquo;ve typically experienced. Accessing many services via their REST API requires you to follow a few steps to generate an application ID and an API key, you pass those with your request, and you&amp;rsquo;re done. The downside to this is that it can open up security vulnerabilities; if something happens to your API keys, for example, &lt;a href=&#34;https://medium.com/@selvaganesh93/what-happens-if-you-accidentally-commit-your-aws-access-token-to-public-github-be50d378b4c7&#34;&gt;they can be used for nefarious purposes&lt;/a&gt;. Enter the &lt;a href=&#34;https://medium.com/@selvaganesh93/what-happens-if-you-accidentally-commit-your-aws-access-token-to-public-github-be50d378b4c7&#34;&gt;JSON Web Token&lt;/a&gt; or JWT. You create a JWT by parsing together a bunch of information, like your application ID, the validity period, etc., sign it with a secret, and exchange it for an access token you can actually use to make your normal API calls.&lt;/p&gt;
&lt;p&gt;A JWT has a few advantages. First, it expires. The validity period varies based on the service; the one I was working with was 30 minutes. So if your access token is compromised, it can only work for however much time is left on the token. They can also be configured to leverage a UUID as a one-time &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_nonce&#34;&gt;nonce&lt;/a&gt; to prevent replay attacks.&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;The new service I was working with used JWTs for authentication, so I had to figure out how to do that. The vendor provided sample code, but they were leveraging Python and using a library in Python to handle the JWT. That didn&amp;rsquo;t help me too much because leveraging Python in my current setup would be difficult, and calling a library means the sample code didn&amp;rsquo;t show me how to piece things together. I&amp;rsquo;ve mentioned before that the best language for the platform I&amp;rsquo;m dealing with at the moment is &lt;a href=&#34;https://www.unusually.pink/blog/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc&#34;&gt;Groovy&lt;/a&gt;, but after some searches I found essentially no information on parsing together a JWT in Groovy. My other option for languages is PowerShell, so after some searches I found a &lt;a href=&#34;https://www.reddit.com/r/PowerShell/comments/8bc3rb/generate_jwt_json_web_token_in_powershell/&#34;&gt;hero on Reddit who posted the exact code to create a JWT&lt;/a&gt;. I modified the code a little bit to account for the properties the service I was leveraging required in the payload; I managed to create a JWT, exchange it for an access token, and make successful requests from the API. Awesome!&lt;/p&gt;
&lt;p&gt;Yesterday, though, I found myself sitting at home during another quarantine weekend, and I decided to see if I could recreate that code in Groovy since the PowerShell code was extremely readable; I just had to figure out how to do the same thing in Grooovy.&lt;/p&gt;
&lt;h1 id=&#34;high-level&#34;&gt;High Level&lt;/h1&gt;
&lt;p&gt;At a high level, the process of creating a JWT looks like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the current time and the expiration time for the token, both in &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;Unix time&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a UUID to prevent replay attacks.&lt;/li&gt;
&lt;li&gt;Create maps for the header and payload.&lt;/li&gt;
&lt;li&gt;Convert those maps to JSON and then encode them as UTF-8 base64 strings.&lt;/li&gt;
&lt;li&gt;Combine the encoded header and payload. Then create a SHA256 signature for it based on the secret key of the application where I generated the application ID.&lt;/li&gt;
&lt;li&gt;Combine the header, payload, and signature together. Pass that to the service with HTTP POST, and receive back the authentication token.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ll paste individual snippets here, but the full code is in a &lt;a href=&#34;https://github.com/JFFail/GroovyJWT&#34;&gt;Github repository&lt;/a&gt;. For reference with this post, my function definition looks like this; you can see that I&amp;rsquo;m passing a lot of information in for everything the payload will need:&lt;/p&gt;
&lt;p&gt;def createJWT(JsonSlurper slurper, Integer validSeconds, String appID, String tenantID, String appSecret, String iss)&lt;/p&gt;
&lt;h3 id=&#34;unix-time&#34;&gt;Unix Time&lt;/h3&gt;
&lt;p&gt;Getting Unix time was pretty straightforward given the &lt;code&gt;currentTimeMillis&lt;/code&gt; function in Java&amp;rsquo;s System library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;TimeZone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setDefault&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TimeZone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTimeZone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;UTC&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
def rightNowMilli &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
def rightNowSec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rightNowMilli &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; 1000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
def expirationSec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rightNowSec &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; validSeconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only hangup was that I need the time in seconds, not milliseconds, thus why I divided the value by 1000. After that, I just had to add on the number of seconds for the lifetime of the token to get the expiration time; in my case it was 1800 seconds (30 minutes.)&lt;/p&gt;
&lt;h3 id=&#34;uuid&#34;&gt;UUID&lt;/h3&gt;
&lt;p&gt;Next up I needed to generate a UUID as a unique identifier so that no one can try to re-issue this exact same request. There&amp;rsquo;s a UUID object type already, so I could generate a new, random UUID with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def jtiValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UUID&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;randomUUID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;maps&#34;&gt;Maps&lt;/h3&gt;
&lt;p&gt;For ease of later conversion to JSON, I next created maps for both the header and the payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Map header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;alg&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HS256&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; typ&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Map payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;exp&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; expirationSec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; iat&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; rightNowSec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; iss&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; iss&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sub&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; appID&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; tid&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; tenantID&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; jti&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; jtiValue&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hard-coded the values in the header map, though it&amp;rsquo;s worth mentioning SHA256 could be different. Likewise, the payload will depend heavily on the service from which a token is being requested; this is where you&amp;rsquo;re most likely to need to make modifications specific to your use case.&lt;/p&gt;
&lt;h3 id=&#34;json-conversion&#34;&gt;JSON Conversion&lt;/h3&gt;
&lt;p&gt;Next the maps are converted to JSON strings. Groovy&amp;rsquo;s &lt;code&gt;JsonOutput&lt;/code&gt; library makes this easy with a single method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def headerJson &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JsonOutput&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toJson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;header&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
def payloadJson &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JsonOutput&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toJson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;payload&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that I needed to import the library before calling it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; groovy.json.JsonOutput
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;base64-conversion&#34;&gt;Base64 Conversion&lt;/h3&gt;
&lt;p&gt;The JSON values for the header and payload both need to be converted to base64 strings. I initially started doing this in a &lt;strong&gt;far&lt;/strong&gt; more difficult manner by creating a function that would convert the bytes and return a byte array before stumbling across the fact that Strings have a &lt;code&gt;getBytes&lt;/code&gt; method. Note that Strings also have a &lt;code&gt;bytes&lt;/code&gt; property I could call directly; in my testing this seemed to give me the same result, but I liked using &lt;code&gt;getBytes&lt;/code&gt; instead because I could specify that they were UTF-8.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def headerBase64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; headerJson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encodeBase64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
def payloadBase64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; payloadJson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encodeBase64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I didn&amp;rsquo;t see any cases where the &lt;code&gt;replaceAll&lt;/code&gt; methods really did anything, but since they were in the original code I figured there must have been some use.&lt;/p&gt;
&lt;h3 id=&#34;signature&#34;&gt;Signature&lt;/h3&gt;
&lt;p&gt;This part basically involved a &lt;strong&gt;lot&lt;/strong&gt; of &lt;a href=&#34;https://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt; searches and piecing together things I found. Most of this is just Java code, and I&amp;rsquo;m honestly a little surprised that it worked&amp;hellip; &lt;a href=&#34;https://github.com/JFFail/GroovyJWT/commit/c43d189d9bcab9ca81ca4d0df7820e4532ec3299#diff-d351cb51d1faad4d0047444e8ca114ac&#34;&gt;this commit&lt;/a&gt; shows how confident I was feeling. Note that once again I had to make some imports to leverage different crypto libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.spec.SecretKeySpec
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.Mac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the code for it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def toBeSigned &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; headerBase64 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payloadBase64
SecretKeySpec secretKeySpec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SecretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;appSecret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HmacSHA256&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Mac mac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HmacSHA256&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
mac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;secretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; digest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;toBeSigned&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
def signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encodeBase64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is first concatenating together the header and payload, with a period separating the two base64 encoded values. Then I create a secret key specification using the secret key from my app. Next I instantiate a message authentication code using SHA256. That&amp;rsquo;s used to create a signature against the aforementioned header/payload combination, the result of which is also a base64 encoded string.&lt;/p&gt;
&lt;h3 id=&#34;combination&#34;&gt;Combination&lt;/h3&gt;
&lt;p&gt;The final step is to simply concatenate together the header, payload, and signature, all separated by periods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; headerBase64 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payloadBase64 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; signature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This value is what I return to the caller. I won&amp;rsquo;t go over the details here, but in the GitHub repository I have code where I actually make a POST against the API endpoint and receive an access token back in exchange for the JWT I created, so I know everything is working. I &lt;em&gt;might&lt;/em&gt; update that code in the future to use a newer &lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; from Java 11+ based on some things I had done last night in Kotlin; if I end up doing that I think it would be a good item for another post in the future.&lt;/p&gt;
&lt;p&gt;Until next time, crypto on and stay pink!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Groovy Programming: Creating an ISO Date at a Specific Date and Time in UTC</title>
      <link>https://hugo.unusually.pink/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc/</guid>
      <description>I&amp;rsquo;ll be the first to admit that the title of this post is a bit too verbose, but if someone else had a post online with a title like this it could&amp;rsquo;ve potentially saved me a lot of time. Here&amp;rsquo;s to hoping it helps someone else in their search.
As is mentioned on my personal website, I do a lot of PowerShell and Python scripting for work. Recently, though, I started working in Groovy due to the fact that it&amp;rsquo;s treated as a first-class language in a system I&amp;rsquo;ve been integrating SaaS applications into.</description>
      <content>&lt;p&gt;I&amp;rsquo;ll be the first to admit that the title of this post is a &lt;strong&gt;bit&lt;/strong&gt; too verbose, but if someone else had a post online with a title like this it could&amp;rsquo;ve potentially saved me a lot of time. Here&amp;rsquo;s to hoping it helps someone else in their search.&lt;/p&gt;
&lt;p&gt;As is mentioned on my &lt;a href=&#34;https://jfabhd.com/&#34;&gt;personal website&lt;/a&gt;, I do a lot of PowerShell and Python scripting for work. Recently, though, I started working in Groovy due to the fact that it&amp;rsquo;s treated as a first-class language in a system I&amp;rsquo;ve been integrating SaaS applications into. Without going into a big tl;dr, working in Groovy affords me a lot of convenience, security, and speed benefits. I just had to, you know, learn Groovy. Since there was a sale at Udemy at the time, I ended up snagging &lt;a href=&#34;https://www.udemy.com/course/apache-groovy/&#34;&gt;The Complete Apache Groovy Developer Course&lt;/a&gt;. It wasn&amp;rsquo;t a bad course in getting me up to speed; I went from never using Groovy (though I did use Java, upon which Groovy is based, &lt;em&gt;many&lt;/em&gt; years ago in college) to being able to get things done for work with it in about 4 nights of binge-watching the course. Be warned, though, that some of the material is a little dated. For example, the way to build JSON objects covered in the course seems to have been superseded by a far easier method, and when covering REST API requests the instructor opted to use some janky 3rd party library that at the time of this writing hadn&amp;rsquo;t been updated in 6 years or something crazy. I was able to do some searches online and leverage Java tutorials to just figure out how to natively handle REST API calls; your mileage my vary with that depending on your comfort level with REST APIs.&lt;/p&gt;
&lt;p&gt;One thing not covered in the course that I needed, though, was how to create a date object in a specific format (ISO) at a specific time (the first day of the current month) in a specific timezone (UTC.) This is a common need for me when filtering time-based events if true time UUIDs aren&amp;rsquo;t available. The key in my experience is to figure out how to get the timezone correct at the creation of the object when you need a specific hour; adjusting the timezone after the fact will result in a new offset that&amp;rsquo;ll make your hour value incorrect.&lt;/p&gt;
&lt;p&gt;Being super out of the loop with Java and very new to Groovy, this was a little tricky for me, and it seemed like no one else I was able to find online had my specific need. So after a couple of hours of throwing spaghetti at a virtual wall (i.e. copying and pasting lots of stuff from &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;) I eventually got to this; it&amp;rsquo;s probably &lt;a href=&#34;https://gist.github.com/JFFail/dabd6ab1334fb00bfe5e089d8072ac3c&#34;&gt;easier to read at the Gist link&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;TimeZone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setDefault&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TimeZone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTimeZone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;UTC&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
Integer year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;YEAR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Integer month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MONTH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
def then &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GregorianCalendar&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;year&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; month&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Desired format: 2020-06-01T00:00:00.000000+00:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;thenISO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; then&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HH:mm:ss.SSSZ&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimeZone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTimeZone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; 
thenISOFixed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thenISO&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thenISO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:00&amp;#34;&lt;/span&gt;
println thenISOFixed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I essentially needed to take the current month and year in order to create a date object at midnight (00:00:00) on the first of the month. I need that to be in UTC, and the resulting string representation needs to be in ISO format. All of this gets me what I need so that I can plug it into an API URL for time-based filtering.&lt;/p&gt;
&lt;p&gt;Everything works pretty much like you&amp;rsquo;d expect, though the format specified on line 6 gives me the offset for UTC as &lt;code&gt;0000&lt;/code&gt;. The endpoint I was passing the data to wanted it to be &lt;code&gt;00:00&lt;/code&gt;. Since I knew I&amp;rsquo;d always have no offsett, I just took a range of the string that cut off the last two zeroes so that I could replace them with &amp;ldquo;:00.&amp;rdquo; I probably could&amp;rsquo;ve done this slightly fancier with some type of &amp;ldquo;00$&amp;rdquo; regex replacement, but this works fine.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m far from the Groovy master, so as much as I hope this is helpful to someone who finds themselves in the same situation I was in, I&amp;rsquo;d equally welcome someone showing me the better way to do it if one exists. Regardless, hopefully someone else out there will bang their head against the keyboard for a shorter amount of time thanks to this. And if you happen to know a better way, feel free to give me a shout!&lt;/p&gt;
&lt;p&gt;Keep coding, and stay &lt;code&gt;#FF66CC&lt;/code&gt;!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
