<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>website on Unusually Pink</title>
    <link>https://unusually.pink/tags/website/</link>
    <description>Recent content in website on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - John Fabry</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://unusually.pink/tags/website/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enable Directory Listing On Specific Directory With Nginx</title>
      <link>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/enable-directory-listing-on-specific-directory-with-nginx/</guid>
      <description>Note: In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.
Generally when you navigate to a website, such as https://unusually.pink/, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site.</description>
      <content>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the sample below, I&amp;rsquo;m using Ubuntu Linux as the host for my web server. The instructions should be the same for other flavors of Linux, though the path to your Nginx sites configuration files may be different.&lt;/p&gt;
&lt;p&gt;Generally when you navigate to a website, such as &lt;a href=&#34;https://unusually.pink/&#34;&gt;https://unusually.pink/&lt;/a&gt;, you don&amp;rsquo;t actually get to see the files which live on the server at the location hosting all of the HTML, JavaScript, CSS, and other goodies for the site. Instead, the web server software will be configured to look for specific files in each folder, such as &lt;code&gt;index.html&lt;/code&gt;, and render those. In some instances, however, you may actually &lt;em&gt;want&lt;/em&gt; to allow someone to browser the files in a directory. This was the situation I found myself in a few days ago for a skunkworks project at work. I already had a server set up running Nginx, and I just needed to expose a particular directory.&lt;/p&gt;
&lt;p&gt;Most searches I did appeared fairly straightforward. The easiest way to do this is to define the &lt;code&gt;autoindex&lt;/code&gt; parameter inside of a &lt;code&gt;location&lt;/code&gt; block of the site&amp;rsquo;s configuration file at: &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt;. I initially did that and had something that looked like this. Note that these are only the relevant pieces for this post, and this is &lt;em&gt;not&lt;/em&gt; the full configuration file:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;Everything in the second &lt;code&gt;location&lt;/code&gt; block contained my newly added content to make this directory I had just created, &lt;code&gt;targetfolder&lt;/code&gt;, exposed. After saving the file, I first tested my configuration with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Crucially, this told me the configuration syntax was okay. Then I restarted my web server via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I tried navigating to my directory via a web browser&amp;hellip; only to be greeted by a 404 error. The 404 (which indicates that the requested resource wasn&amp;rsquo;t found on the server) tells me that something is likely amiss with how I&amp;rsquo;m referencing the requested content. I compared my configuration to a handful of samples online, though, and didn&amp;rsquo;t see what was wrong. Eventually, it dawned on me that all of the examples I found were showing how to enable directory listing for an &lt;em&gt;entire&lt;/em&gt; site, whereas my scenario was as little different considering I only wanted to expose a subfolder. I did a few more searches with that slant in mind, and I eventually hit upon a thread where someone mentioned that having multiple &lt;code&gt;root&lt;/code&gt; definitions in their configuration file caused problems for them.&lt;/p&gt;
&lt;p&gt;I tried adding one additional character to my configuration to comment out the &lt;code&gt;root&lt;/code&gt; definition in my second &lt;code&gt;location&lt;/code&gt; block:&lt;/p&gt;
&lt;p&gt;root /var/www/my.website.com/html;
index index.html index.htm index.nginx-debian.html;
server_name my.website.com;
location / {
try_files $uri $uri/ =404;
}
location /targetfolder {
#root /var/www/my.website.com/html/targetfolder;
index index.html;
autoindex on;
autoindex_exact_size off;
}&lt;/p&gt;
&lt;p&gt;After another &lt;code&gt;sudo systemctl reload nginx&lt;/code&gt;, I was able to view the directory just like I expected. In hindsight this makes a lot of sense; if I already define the root of the site somewhere earlier in the file, I can&amp;rsquo;t simply change it on a whim later on. Instead, the &lt;code&gt;location /targetfolder&lt;/code&gt; directive is going to be &lt;em&gt;relative&lt;/em&gt; to the &lt;code&gt;root&lt;/code&gt; I already specified. It was interesting to me that checking my configuration with &lt;code&gt;sudo nginx -t&lt;/code&gt; originally didn&amp;rsquo;t alert me to anything, but I&amp;rsquo;m hardly an Nginx guru. It&amp;rsquo;s certainly possible there may be some scenario where the setup I had was valid.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Cloudflare Analytics</title>
      <link>https://unusually.pink/cloudflare-analytics/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/cloudflare-analytics/</guid>
      <description>Anyone who knows me, reads the type of things I tweet about, and/or listens to the Same Shade of Difference podcast knows that I&amp;rsquo;m an advocate of online privacy. I&amp;rsquo;m all for blocking trackers, avoiding services from invasive companies like Facebook, and generally trying to keep as much of what I do online known only to me. That being said, while I typically configure my browser to block things like Google Analytics because Google is already a super creepy company that gathers an order of magnitude more data than it should about people, I also see the value in having analytics for a website.</description>
      <content>&lt;p&gt;Anyone who knows me, reads the type of things I &lt;a href=&#34;https://twitter.com/UnusuallyPink&#34;&gt;tweet about&lt;/a&gt;, and/or listens to the &lt;a href=&#34;https://sameshadeofdifference.com/&#34;&gt;Same Shade of Difference podcast&lt;/a&gt; knows that I&amp;rsquo;m an advocate of online privacy. I&amp;rsquo;m all for blocking trackers, avoiding services from invasive companies like Facebook, and generally trying to keep as much of what I do online known only to me. That being said, while I typically configure my browser to block things like Google Analytics because Google is already a super creepy company that gathers an order of magnitude more data than it should about people, I also see the value in having analytics for a website. It&amp;rsquo;s often helpful to see things like which content in particular is the most popular; if I know the types of content people like to see, then I can try to tailor what I write about to meet that need. Similarly it&amp;rsquo;s honestly just cool to be able to see when my site gets traffic from people all across the globe. Seeing that someone on the other side of the planet found my content useful or interesting is just neat. As a result, I&amp;rsquo;ve been on the lookout for an analytics options that isn&amp;rsquo;t stalker-esque like what Google offers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/marge_neat.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;One of the initial options I considered was &lt;a href=&#34;https://plausible.io/&#34;&gt;Plausible Analytics&lt;/a&gt;. They have a presence on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fediverse&#34;&gt;Fediverse&lt;/a&gt;, which is how I first became aware of the company. Their offering is appealing because it provides metrics to website owners without collecting personal data on the visitors, which is exactly what I&amp;rsquo;ve been wanting. Unfortunately for me, there&amp;rsquo;s no free option for Plausible, and while paying $4 a month for a year if you get 10,000 hits or less per month &amp;ndash; a threshold I&amp;rsquo;m &lt;em&gt;well&lt;/em&gt; under &amp;ndash; makes sense for a business or someone with a serious website, I didn&amp;rsquo;t feel like spending $48 USD per year just to get some neat metrics was worth it for me. I&amp;rsquo;m currently averaging around 1000 visits per month, so it&amp;rsquo;s not exactly as though I&amp;rsquo;m driving a business based around these analytics.&lt;/p&gt;
&lt;p&gt;With all of this in mind, the announcement of &lt;a href=&#34;https://blog.cloudflare.com/privacy-first-web-analytics/&#34;&gt;Cloudflare&amp;rsquo;s privacy-focused analytics&lt;/a&gt; immediately piqued my interest. Understandably, many people in technology circles have reservations about Cloudflare. Cloudflare serves as the gatekeeper to so much of the Internet&amp;rsquo;s traffic that when they have an outage, sometimes it feels as though the entire Internet is down; that&amp;rsquo;s not exactly an ideal situation for a healthy and robust Internet ecosystem. When Cloudflare&amp;rsquo;s analytics platform originally launched, I was dismissive of it because it was only an option for those hosting their content behind Cloudflare. If I needed DDoS protection or a CDN then I might consider something like putting my site behind Cloudflare, but without that I&amp;rsquo;m more than a little loathe to start transferring my DNS records.&lt;/p&gt;
&lt;p&gt;Right around the end of 2020, though, I saw that Cloudflare&amp;rsquo;s analytics were now open to be used by &lt;em&gt;anyone&lt;/em&gt; regardless of hosting. Curious, I logged into my existing Cloudflare account that I created back in the day when using Cloudflare was the only option for configuring &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; with an SSL certificate. Sure enough, &amp;ldquo;Web Analytics&amp;rdquo; was an option within my Cloudflare Dashboard. All I had to do was provide the address for my site, and Cloudflare gave me a snippet of JavaScript to add for the analytics.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/cloudflare_add-1024x631.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Given that my site is &lt;a href=&#34;https://unusually.pink/unusually-pink-migration/&#34;&gt;now hosted on WordPress&lt;/a&gt;, I couldn&amp;rsquo;t directly add content to the header or footer section of my HTML. After a quick DuckDuckGo search, though, I found some recommendations for the &lt;strong&gt;Insert Headers and Footers&lt;/strong&gt; plugin. The plugin adds a tab to the &lt;strong&gt;Settings&lt;/strong&gt; section of the WordPress Dashboard with fields for, you guessed it, the header and the footer. Any content that I place in there is automatically added to the header and/or footer of each page that WordPress renders. I simply pasted the snippet of JavaScript from Cloudflare into the footer section, and everything was up and running for me.&lt;/p&gt;
&lt;p&gt;Similar to Plausible, CloudFlare&amp;rsquo;s analytics platform gives me some basic details without anything particularly creepy about the people visiting my site. I see things like the country they&amp;rsquo;re from (nothing more specific than that), the browser, the operating system, the referrer (e.g. if someone is clicking a link to my site from Twitter or DuckDuckGo), and which page was viewed. The last part is the one that allows me to stay on top of what content people are finding the most useful. For example, since implementing Cloudflare analytics, I&amp;rsquo;ve been able to see that &lt;a href=&#34;https://unusually.pink/macos-big-sur-pip-installation-error/&#34;&gt;my post&lt;/a&gt; on how to resolve issues installing Python packages through &lt;code&gt;pip3&lt;/code&gt; on macOS Big Sur has consistently been the most viewed. Behind that is &lt;a href=&#34;https://unusually.pink/creating-a-jwt-in-the-groovy-programming-language/&#34;&gt;my post on how to create a JWT in Groovy&lt;/a&gt;; that&amp;rsquo;s super useful since I had no idea if anyone else would even care about Groovy-related content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/cloudflare_analytics-1024x581.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The only thing that was immediately disappointing to me was that I could only add a single site; after adding Unusually Pink, there wasn&amp;rsquo;t an option to add another site along with that. A little over a week ago, though, when I went to my Cloudflare dashboard to see how my traffic looked from the previous night, I noticed a new UI that included an option for additional sites. I quickly added several other sites to start keeping tabs on them as well. This is surprisingly helpful for me because it enables me to see that several sites I maintain get literally &lt;em&gt;no&lt;/em&gt; traffic. Those are sites that I&amp;rsquo;ll probably be taking offline and letting the domains expire since there&amp;rsquo;s clearly not much of a point in keeping them around if having them online for their own sake isn&amp;rsquo;t important to me (spoiler alert: it&amp;rsquo;s not.)&lt;/p&gt;
&lt;p&gt;The only other thing worth mentioning is that, as is the case with any analytics platform, Cloudflare won&amp;rsquo;t provide a completely accurate picture of who visits your site simply based on how each user configures their browser. For example, I noticed that the &lt;a href=&#34;https://unusually.pink/safari-14/&#34;&gt;tracking blocker built into current versions of Safari&lt;/a&gt; plays nicely with Cloudflare. However, I confirmed that &lt;a href=&#34;https://brave.com/&#34;&gt;Brave&lt;/a&gt;, the Chromium-based browser I use when I&amp;rsquo;m absolutely forced to use a Chromium-based browser, and &lt;a href=&#34;https://ublockorigin.com/&#34;&gt;uBlock Origin&lt;/a&gt; will still block the JavaScript element. As is always the case, your mileage may vary. Even without a 100% complete picture, though, I still like the insight that I glean from Cloudflare anaytics, and I don&amp;rsquo;t feel like I&amp;rsquo;m being abusive with the personal information for anyone visiting the site. With that being said, anyone who simply hates Cloudflare or disagrees with my assessment on just how private their analytics are can easily block them just as they can with every other analytics platform, which hopefully provides a happy medium.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Twenty Twenty-One WordPress Theme</title>
      <link>https://unusually.pink/twenty-twenty-one-wordpress-theme/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/twenty-twenty-one-wordpress-theme/</guid>
      <description>While I made the change a few weeks ago, it seems fitting that my first post of 2021 should be about my swap to the Twenty Twenty-One WordPress theme. For anyone who isn&amp;rsquo;t aware, each year WordPress releases a new &amp;ldquo;official&amp;rdquo; theme for the platform. While theme-elitists out there may scoff at them in favor of paid, premium themes, I&amp;rsquo;ve always found the yearly offerings to be elegant and well-designed. I had originally planned on putting this post together on January 1st, but what can I say&amp;hellip; movies on HBO Now aren&amp;rsquo;t going to binge-watch themselves.</description>
      <content>&lt;p&gt;While I made the change a few weeks ago, it seems fitting that my first post of 2021 should be about my swap to the Twenty Twenty-One WordPress theme. For anyone who isn&amp;rsquo;t aware, each year WordPress releases a new &amp;ldquo;official&amp;rdquo; theme for the platform. While theme-elitists out there may scoff at them in favor of paid, premium themes, I&amp;rsquo;ve always found the yearly offerings to be elegant and well-designed. I had &lt;em&gt;originally&lt;/em&gt; planned on putting this post together on January 1st, but what can I say&amp;hellip; movies on HBO Now aren&amp;rsquo;t going to binge-watch themselves.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;ve typically enjoyed the yearly WordPress theme releases, the previous iteration of this blog was actually back on the Twenty Sixteen theme since the yearly releases after that one didn&amp;rsquo;t feel like they were a particularly good fit for a blog. I still liked the look of the Twenty Sixteen theme, especially after I switched the colors around to match the &lt;a href=&#34;https://unusually.pink/all-dracula-everything/&#34;&gt;Dracula Theme&lt;/a&gt;, but the fact remains that 2016 is more or less ancient history in the world of web design. As a result, parts of the site just felt a bit&amp;hellip; antiquated. For example, while the banner at the top allowed me to show off the Unusually Pink graphics that we originally commissioned for the podcast, it left the site feeling just a bit old.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/cropped-cropped-Unusually-Pink-Facebook-Cover-Photo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The artwork is still amazing, though.&lt;/p&gt;
&lt;p&gt;While I spent a decent bit of time tweaking the Twenty Sixteen theme to suit my needs, once I saw the &lt;a href=&#34;https://make.wordpress.org/core/2020/09/23/introducing-twenty-twenty-one/&#34;&gt;Twenty Twenty-One theme announcement in September I decided to stop further tweaking and try being patient&lt;/a&gt;. I also followed a bit &lt;a href=&#34;https://github.com/wordpress/twentytwentyone&#34;&gt;of the progress on the GitHub repository&lt;/a&gt;, but not being a web developer meant that it didn&amp;rsquo;t really give me a good vibe for how the theme would feel in practice.&lt;/p&gt;
&lt;p&gt;Once the theme released, though, I immediately found myself drawn to how minimalist and streamlined it is. I feel like it provides me with the bare necessities, and then I can expand upon it from there to fit my needs without a lot of unnecessary overhead. One look at the current layout at the time of this writing probably clues you in to the fact that these aren&amp;rsquo;t the default colors; I once again opted to update the design to feel like the Dracula theme. While Twenty Twenty-One offers less in the customization UI for modifying the colors, it can still easily be done via CSS (a level of access that I sorely missed when &lt;a href=&#34;https://unusually.pink/unusually-pink-migration/&#34;&gt;the site was hosted on Squarespace&lt;/a&gt;.) I&amp;rsquo;m not sure if there&amp;rsquo;s a better way to do it than just opening the published site in my browser&amp;rsquo;s developer tools and using the inspection feature to get the classes of the objects I want to change, but that ended up getting me to the end result I wanted.&lt;/p&gt;
&lt;p&gt;Along with the colors, I also felt the need to adjust some of the font sizes. In the default setup, Twenty Twenty-One opts for &lt;strong&gt;big&lt;/strong&gt; fonts, and while they looked kind of nice on my brand new MacBook Pro with a Retina display, on my 1080p, 11&amp;quot; &lt;a href=&#34;https://unusually.pink/star-lite-mk-iii/&#34;&gt;Star Lite Mk III&lt;/a&gt; going to a post would result in just the header and the post title being visible. None of the actual content could be read without scrolling. I wasn&amp;rsquo;t thrilled about my site looking so gigantic on lower resolution displays, so many of the font sizes were tweaked. That being said, as someone with extremely poor vision I&amp;rsquo;m a fan of large-ish fonts, and I didn&amp;rsquo;t want to completely flip to tiny text. Readability is, arguably, one of the most import things on a text-heavy site.&lt;/p&gt;
&lt;p&gt;If anyone is curious, my full CSS customizations are below. Hopefully it&amp;rsquo;s not too offensive since frontend is most definitely not my specialty.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;While there may still be some minor adjustments for sizes and spacing, for the most part I like where things are at. I&amp;rsquo;ve historically disliked blog landing pages which only showed the beginning of each post, but I&amp;rsquo;ve done a bit of a 180 in that regard. With Twenty Twenty-One I&amp;rsquo;ve been appreciating how the front page is much less cumbersome, especially when trying to reach the links or search box at the very bottom of the page. I think it also provides a bit of a cleaner focus on the &lt;a href=&#34;https://unusually.pink/about/&#34;&gt;link for the About page&lt;/a&gt; that I link to on most of my online profiles.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Adding SSH To GitHub</title>
      <link>https://unusually.pink/adding-ssh-to-github/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/adding-ssh-to-github/</guid>
      <description>Between the Thanksgiving holiday and some shifting priorities when I got back to work, I hadn&amp;rsquo;t made any new commits to my GitHub account for about 10 days. This meant that I didn&amp;rsquo;t have any new posts to my recently-launched GitCommit site that makes a bit of a microblog from my commit messages. To be honest, putting it together was really an excuse to have something up at the domain I bought, but I really like the way it turned out.</description>
      <content>&lt;p&gt;Between the Thanksgiving holiday and some shifting priorities when I got back to work, I hadn&amp;rsquo;t made any new commits to my &lt;a href=&#34;https://github.com/jfabry-noc/&#34;&gt;GitHub account&lt;/a&gt; for about 10 days. This meant that I didn&amp;rsquo;t have any new posts to my recently-launched &lt;a href=&#34;https://gitcommit.gay&#34;&gt;GitCommit&lt;/a&gt; site that makes a bit of a microblog from my commit messages. To be honest, putting it together was really an excuse to have &lt;em&gt;something&lt;/em&gt; up at the domain I bought, but I really like the way it turned out. After making a fresh commit yesterday, though, I received an email from GitHub telling me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You recently used a password to access the repository at jfabry-noc/OxidizedBackup with git using git/2.25.1.&lt;/p&gt;
&lt;p&gt;Basic authentication using a password to Git is deprecated and will soon no longer work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also included a link to their &lt;a href=&#34;https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/&#34;&gt;authentication requirements documentation&lt;/a&gt;. On the whole it made sense to me; I typically would just have &lt;code&gt;git&lt;/code&gt; remember my credentials so that I never had to enter them. In the new setup, I would &lt;em&gt;have&lt;/em&gt; to enter them, though I could configure how long they would remain cached. On the surface, this didn&amp;rsquo;t bother me, and I went about my day making several additional commits beyond the first. Later on, though, I realized that my new commits weren&amp;rsquo;t appearing on the GitCommit site. The site is hosted by &lt;a href=&#34;https://netlify.com&#34;&gt;Netlify&lt;/a&gt;, and it works by polling my GitHub account via a &lt;code&gt;cron&lt;/code&gt; job every 4 hours (I&amp;rsquo;m hoping to eventually update it to use webhooks to have commit information pushed to it, but I haven&amp;rsquo;t had an opportunity yet.) When a new commit happens, my code pulls the repository, the commit message, and the timestamp. It then updates the HTML and automatically makes an &lt;em&gt;additional&lt;/em&gt; commit on its own repository (yes, I included code to avoid an endless repost loop.) Netlify has been configured to look at only the &lt;strong&gt;html&lt;/strong&gt; directory in the repository, dynamically updating whenever a new change is commited to that directory, much like how &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; or any other CI web hosting works.&lt;/p&gt;
&lt;p&gt;Since my new commits weren&amp;rsquo;t showing up, I first checked the &lt;a href=&#34;https://github.com/jfabry-noc/GitCommit&#34;&gt;GitHub repo for GitCommit&lt;/a&gt;. No new HTML changes had been commited to it. Next, I went to the VPS which executes the &lt;code&gt;cron&lt;/code&gt; job. For my own sanity, I long ago learned that I should implement some type of logging for any code that I plan to run automatically so that I can easily troubleshoot it during this exact situation. Checking the log file, I saw that my code &lt;em&gt;did&lt;/em&gt; successfully find the new commits and update the appropriate HTML file. It was able to make the expected commit, and running &lt;code&gt;git status&lt;/code&gt; even confirmed that my local repository was ahead of the remote by 2 commits. However, running the following didn&amp;rsquo;t work to push my changes up to GitHub so that Netlify could see them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suddenly it clicked, and I realized that the change from earlier in the day was the culprit; my code could no longer &lt;code&gt;git push&lt;/code&gt; because that was now prompting for a password that would never be typed given that the code was executed by &lt;code&gt;cron&lt;/code&gt;. To confirm, I manually executed the script from my SSH session and saw the password prompt appear. Ick.&lt;/p&gt;
&lt;p&gt;Fortunately, I realized that I wouldn&amp;rsquo;t need a password if I was syncing my repository via SSH rather than HTTPS. SSH would allow me to use certificates instead. First, I had to generate a new public-private key pair with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh-keygen -t ed25519 -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email@email.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah, I&amp;rsquo;m not telling you my email address. I&amp;rsquo;ll give you a hint; it&amp;rsquo;s &lt;a href=&#34;mailto:something@unusually.pink&#34;&gt;something@unusually.pink&lt;/a&gt;. Good luck. The above command asked for a couple of things such as the location where I wanted to store the keys and if I wanted to add a password for accessing them. I just took the defaults. Next up, I had to start a background SSH agent and tell it to use the private key I had just generated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ssh-add ~/.ssh/id&lt;span style=&#34;color:#ae81ff&#34;&gt;\_&lt;/span&gt;ed25519
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With everything set on the client side, I now had to tell GitHub to use my public key for any SSH interactions. They have &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-ssh-key-to-y&#34;&gt;very solid documentation&lt;/a&gt; available with the exact steps. Just be sure you actually copy the content of the &lt;strong&gt;public&lt;/strong&gt; key into GitHub rather than the private key. GitHub won&amp;rsquo;t accept the private key because the formatting is wrong, but the very fact that I pasted it there made me paranoid enough to regenerate the pair and do it again.&lt;/p&gt;
&lt;p&gt;To test things out, I tried to clone one of my private repositories via the SSH link, which you can select from the tabs when trying to clone anything from GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/github_ssh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That worked successfully and verified that my keys were properly identifying me. The last step was to update the local repository for GitCommit to use a new URL for the remote repository. Regardless of whether I&amp;rsquo;m using HTTPS or SSH, I still run &lt;code&gt;git push origin main&lt;/code&gt; in order to sync it to the remote; the configuration of the local repository is what specifies which URL is used. In order to flip mine from HTTPS to SSH, I simply ran the following from my local directory for GitCommit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git remote set-url origin git@github.com:jfabry-noc/GitCommit.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, I re-ran my script and &lt;code&gt;git push&lt;/code&gt; was able to successfully push my code to the remote without any interaction. After working through many commits today, I verified that my website was updated as expected.&lt;/p&gt;
&lt;p&gt;As a bonus note, astute readers may recall the issues I had following the published steps to sync the &lt;a href=&#34;https://unusually.pink/all-dracula-everything/&#39;&#34;&gt;Dracula theme for git&lt;/a&gt;. This was the exact same scenario where the instructions assumed that SSH was in use rather than HTTPS.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Connecting An Existing Firebase Hosting Project To A New Site</title>
      <link>https://unusually.pink/connecting-an-existing-firebase-hosting-project-to-a-new-site/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/connecting-an-existing-firebase-hosting-project-to-a-new-site/</guid>
      <description>As a follow-up to my last post on GitHub Pages, I mentioned that I moved one of my websites to Firebase. Firebase is a platform from Google for creating web and mobile applications. As a PaaS offering, there are a lot of different parts to the service, but as a platform for web applications hosting is naturally one of them. The free Spark plan offers 10 GB of storage, 360 MB of data transfer per day (which works out to 10 GB of bandwidth per month), and support for custom domains and SSL.</description>
      <content>&lt;p&gt;As a follow-up to my &lt;a href=&#34;https://unusually.pink/github-pages-hosting/&#34;&gt;last post on GitHub Pages&lt;/a&gt;, I mentioned that I moved one of my websites to &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. Firebase is a platform from Google for creating web and mobile applications. As a PaaS offering, there are a &lt;strong&gt;lot&lt;/strong&gt; of different parts to the service, but as a platform for web applications hosting is naturally one of them. The &lt;a href=&#34;https://firebase.google.com/pricing/&#34;&gt;free Spark plan&lt;/a&gt; offers 10 GB of storage, 360 MB of data transfer per day (which works out to 10 GB of bandwidth per month), and support for custom domains and SSL. That&amp;rsquo;s more than enough for me to host a simple, single page website that&amp;rsquo;s only made up of static HTML, CSS, and a single image. If anyone is curious, my site is using just 1.8 MB of storage and 15 MB of bandwidth. Note that bandwidth used divided by storage used will not be indicative of total hits due to caching, compression, etc.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used Firebase before, so I already had my Google account linked up to Firebase, and I even had a project still technically &amp;ldquo;live&amp;rdquo; there, though the domain had long since been shifted somewhere else. To be honest, it had been so long since I used Firebase that I almost forgot about it until I just happened to start receiving some well-timed emails from the service informing me that I needed to re-verify ownership of the domain I was using for my defunct project. I had no interest in re-verifying anything, but I did want to start hosting something new there.&lt;/p&gt;
&lt;p&gt;The first step for hosting new content was to log in to the &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;Firebase Console&lt;/a&gt;. Since I had already used the service, this gave me tiles of my existing projects; in my scenario, I just had a single project for my hosting. I clicked on that tile, and I was taken to a Project Overview screen. This gives me a high-level look at my project. To get to the hosting-specific functionality, though, I just had to click the &lt;strong&gt;Hosting&lt;/strong&gt; option under the &lt;strong&gt;Develop&lt;/strong&gt; menu to the left.&lt;/p&gt;
&lt;p&gt;On the hosting dashboard, the first item listed contains all of the domains associated with the project. Clicking the 3 dots &amp;hellip; next to a domain allowed me to delete it; I removed the two entries (apex domain and www) for the domain I used previously. Then I clicked the button for &lt;strong&gt;Add a custom domain&lt;/strong&gt;. I followed the instructions on the screen to add a custom domain; I won&amp;rsquo;t document the steps here since they&amp;rsquo;re directly covered through the &lt;a href=&#34;https://firebase.google.com/docs/hosting/custom-domain&#34;&gt;Firebase custom domain documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With everything configured on the Firebase side, I next needed to crack into the Firebase CLI to link up my local project. I opted to &lt;a href=&#34;https://firebase.google.com/docs/cli/#mac-linux-standalone-binary&#34;&gt;install the standalone CLI&lt;/a&gt;, though you can still get it through &lt;code&gt;npm&lt;/code&gt; if you prefer to roll that way. The first thing I had to do was link the CLI to my Firebase account. This is different based on whether you&amp;rsquo;re going to be using the CLI from a system with a GUI or if you&amp;rsquo;re doing it from a headless system you&amp;rsquo;re accessing via SSH. I was using it from a headless system where I cannot pop a browser to follow the normal authentication process; as a result I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase login --no-localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re running this from a system with a GUI, I believe you just omit the &lt;code&gt;--no-localhost&lt;/code&gt; parameter. In the headless setup, though, this gives a Firebase URL to navigate to on another system. I copied it out of my terminal and pasted it into the browser in my laptop. This gives me an authentication code for the CLI. I copied that from my browser, pasted it into my terminal, and that linked the CLI to my account in the Firebase platform.&lt;/p&gt;
&lt;p&gt;Since I was just moving my content from my old VPS to Firebase, I didn&amp;rsquo;t have to worry about actually &lt;em&gt;creating&lt;/em&gt; a website; I already had one that was backed up in a tarball. I simply had to expand my tarball on the same system where I was using the Firebase CLI. I did this by creating a new directory for the project, expanding my tarball that had all of my site&amp;rsquo;s content, and then copying that content to the project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir ~/laifu
tar -zxvf ~/temp/laifu.tar.gz
cp -r ~/temp/html ~/laifu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you look closely at the commands above, you&amp;rsquo;ll see that after I expand the tarball I&amp;rsquo;m recursively copying not the entire directory but the &lt;code&gt;html&lt;/code&gt; folder from it. This is due to the fact that my tarball is of the entire &lt;code&gt;/var/www/laifu.moe/&lt;/code&gt; directory that Nginx was previously hosting on my VPS, and the &lt;code&gt;html&lt;/code&gt; directory is what contains the content of the site. If your backup is storing the content directly (e.g. it&amp;rsquo;s not in a subfolder) that&amp;rsquo;s fine. However, you&amp;rsquo;ll want to make a new folder inside of your project directory that you copy the content to because you do &lt;em&gt;not&lt;/em&gt; want the content of the site to be in the root of the Firebase project&amp;rsquo;s directory. For example, your &lt;code&gt;mkdir&lt;/code&gt; command would look something like: &lt;code&gt;~/myproject/html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One I had the files situated accordingly, I needed to tell Firebase that my directory was a Firebase project. Similar to using &lt;code&gt;git&lt;/code&gt;, I do this by navigating to my project directory and running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gets the ball rolling by asking some questions interactively through the CLI. One question will ask what service the project should be connected to; be sure to pick &amp;ldquo;Hosting.&amp;rdquo; After that there should be a prompt for which existing hosting project you&amp;rsquo;d like to use. The existing project should be listed as an option to be selected. If it&amp;rsquo;s not there, you can cancel out of the process and ensure everything worked correctly with your authentication by running the following and verifying that you see the project. If it&amp;rsquo;s missing, you may need to redo the authentication (e.g. maybe you were in the wrong Google account when pasting into your browser.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase project:list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After selecting the project, the CLI will ask what to use as the &amp;ldquo;public directory.&amp;rdquo; This is essentially asking what directory &lt;em&gt;inside&lt;/em&gt; of the project directory contains the web content to be hosted. In my case I picked &lt;code&gt;html&lt;/code&gt; since that&amp;rsquo;s what I named the folder.&lt;/p&gt;
&lt;p&gt;Be wary of the next couple of prompts, which will trigger regardless of whether or not there&amp;rsquo;s something in your public directory matching them. When prompted about your &lt;code&gt;404.html&lt;/code&gt; page, opt not to overwrite it unless you really hate your existing one. When prompted about &lt;code&gt;index.html&lt;/code&gt;, &lt;strong&gt;definitely&lt;/strong&gt; don&amp;rsquo;t overwrite it or you&amp;rsquo;ll lose the first page of your site.&lt;/p&gt;
&lt;p&gt;Once that&amp;rsquo;s all done, you should get a message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Firebase initialization complete!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that the directory has been initialized successfully as a Firebase project, but the local content still hasn&amp;rsquo;t been pushed to the cloud. So the last step is to run the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firebase deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give a &amp;ldquo;Deploy complete!&amp;rdquo; message along with a Firebase-specific URL in the format of:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://project-name-GUID.web.app&#34;&gt;https://project-name-GUID.web.app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copying this URL and pasting it into a browser should allow you to verify that the content you expect is now being hosted, even if you&amp;rsquo;re currently waiting for DNS TTLs to expire before you can navigate to the custom DNS. The Hosting Dashboard of the Firebase console will also show the update in the &amp;ldquo;Release History&amp;rdquo; section.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>GitHub Pages Hosting</title>
      <link>https://unusually.pink/github-pages-hosting/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/github-pages-hosting/</guid>
      <description>As I had mentioned in my post about Dropbox Passwords, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them.</description>
      <content>&lt;p&gt;As I had mentioned in my &lt;a href=&#34;https://unusually.pink/dropbox-passwords/&#34;&gt;post about Dropbox Passwords&lt;/a&gt;, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them. With a decrease in my domains comes a decrease in websites, to the point where I started to wonder if I could get away with ditching my VPS. I had been using the same VPS for over 2 years, and it served me well. In a world with so many hosting options, though, it seemed overkill just to run 2 static websites, each of which were only a single page.&lt;/p&gt;
&lt;p&gt;One of my sites I placed on &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. I&amp;rsquo;m not a fan of using Google products, but I&amp;rsquo;ve used Firebase previously (moving my website to an existing, stale Firebase project will be the topic of another post), and the free &lt;a href=&#34;https://firebase.google.com/pricing&#34;&gt;Spark plan&lt;/a&gt; gives me more than enough for a simple site with 1 GB of storage and 10 GB of egress traffic each month.&lt;/p&gt;
&lt;p&gt;I wanted to check out some different options for &lt;a href=&#34;https://jfabhd.com&#34;&gt;jfabhd.com&lt;/a&gt;, though. After recently reading one of &lt;a href=&#34;https://kevq.uk/static-site-generators-revisited/&#34;&gt;Kev Quirk&amp;rsquo;s blog posts&lt;/a&gt;, I thought I would give &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; a shot. Their &lt;a href=&#34;https://www.netlify.com/pricing/&#34;&gt;free Starter plan&lt;/a&gt; seems great for a simple hobby site and includes CI (continuous integration) from a git repository. I signed up for an account but quickly disliked the fact that leveraging my own domain meant I needed to move my nameservers for it to Netlify. While this isn&amp;rsquo;t horrible, I &lt;em&gt;really&lt;/em&gt; prefer to keep managing my DNS in a single place as opposed to scattering nameservers around to wherever my content is hosted. Currently all of my personal domains have DNS hosted in the same place, and I&amp;rsquo;d like to keep it that way. As a result, I shelved the idea of Netlify and looked to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;I actually used GitHub Pages before, way back in the day when they were brand new and I set up my first &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;-based blog. It wasn&amp;rsquo;t bad by any stretch, but a lot of it was clunky. I remembered having to manually add some text files to the repository to configure my custom domain and to host content out of a folder that was named differently than what was expected. Likewise, there were no SSL options, so I ended up putting my GitHub Pages site behind &lt;a href=&#34;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&#34;&gt;CloudFlare&lt;/a&gt; in order to secure it. I figured this would be a good opportunity to see what, if anything, had changed. If I hated it, I wouldn&amp;rsquo;t be out anything and could continue to look at other options.&lt;/p&gt;
&lt;p&gt;The initial setup is still the same as I remember: just create a public repository with a name of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github-account.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I did this through the GitHub website in less than a minute. Next up I ran &lt;code&gt;git clone&lt;/code&gt; in order to initialize the repository on my local laptop in the same directory where I keep all of my other GitHub repos. With my local environment ready, I just copied the handful of files that I had backed up from my VPS into the root directory for the repository; if I don&amp;rsquo;t take any other action, GitHub will host content from the root of the repo. Since this is a static, single page site, I don&amp;rsquo;t need to worry about compiling it with static site generators like Jekyll or &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I was able to &lt;code&gt;commit&lt;/code&gt; the change for adding the files, navigate to &lt;a href=&#34;https://jfabry-noc.github.io&#34;&gt;https://jfaby-noc.github.io&lt;/a&gt;, and see my site.&lt;/p&gt;
&lt;p&gt;With the content out of the way, I wanted to set up my custom domain. The GitHub side of the work can now be done through the &lt;strong&gt;Settings&lt;/strong&gt; menu of the repository; it basically replaces the manual work that I previously had to do by adding files to my repository:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/gh_pages.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top allows me to change the branch and directory to host content from; in my case I could just leave the defaults. The &lt;strong&gt;Custom domain&lt;/strong&gt; sections allows me to type in my domain of choice. This just adds a file named &lt;code&gt;CNAME&lt;/code&gt; to my repo containing the domain information. Then I just had to follow &lt;a href=&#34;https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;the directions&lt;/a&gt; for setting up a custom domain in my DNS host&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s a little wonky from the directions, but to make GitHub redirect everything appropriately when using both an apex domain and a subdomain, you follow both sections of the instructions verbatim. For example, I wanted the domain to be &lt;code&gt;jfabhd.com&lt;/code&gt;, but I also wanted &lt;code&gt;www.jfabhd.com&lt;/code&gt; to still redirect to the site. I configured the apex domain via the instructions above, creating 4 A records pointing to different IP addresses. Then I configured a CNAME record for &lt;code&gt;www.jfabhd.com&lt;/code&gt; pointing &lt;em&gt;not&lt;/em&gt; to &lt;code&gt;jfabhd.com&lt;/code&gt;, but instead to &lt;code&gt;jfaby-noc.github.io&lt;/code&gt;. If you do it this way, GitHub will work it all out under the hood.&lt;/p&gt;
&lt;p&gt;Immediately after setting up my DNS records, the option for &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; was not available, telling me that the site was not configured properly. I rightly assumed this just meant DNS needed time to propagate. I checked back 15 minutes later (which is the TTL of my DNS records), and it presented me with a new message that the certificate wasn&amp;rsquo;t finished being created yet. I once again rightly assumed that they were spinning up these certificates through &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, so I browsed &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt; for a few minutes until refreshing my repository&amp;rsquo;s settings showed that the option to force HTTPS was now available. I simply checked the box, waited a few minutes, and then verified that going explicitly to &lt;code&gt;http://jfabhd.com&lt;/code&gt; would redirect me successfully to &lt;code&gt;https://jfabhd.com&lt;/code&gt;. If this doesn&amp;rsquo;t work for you, chances are that you just didn&amp;rsquo;t give it enough time. While the tooltip in the GibHub UI says it can take up to 24 hours, it took about 5 minutes for my site.&lt;/p&gt;
&lt;p&gt;The last thing to check was that the CI was working so that changes to the repo would be reflected on the site. A few things had changed since I took the backup of my site, meaning there were some needed tweaks with which I could test. For one I restarted this blog and I deleted my Twitter account since Twitter is a cesspool (that might be a good topic for another post&amp;hellip;), so I wanted to swap the Twitter link on my site with one for this blog. I first did a &lt;code&gt;git pull&lt;/code&gt; to get local copies of things like the &lt;code&gt;CNAME&lt;/code&gt; file that had been made in the cloud, and then I quickly updated my HTML to share a link with the &lt;a href=&#34;https://fontawesome.com/icons/rss?style=solid&#34;&gt;Font Awesome RSS feed icon&lt;/a&gt; as the content. After committing and pushing the change, I refreshed the site to confirm it had also been updated.&lt;/p&gt;
&lt;p&gt;On the whole, there&amp;rsquo;s really nothing for me to complain about with GitHub Pages. It&amp;rsquo;s free, I can use the same GitHub account I&amp;rsquo;m already in every day, I can use a custom domain without moving my DNS, and I get a Let&amp;rsquo;s Encrypt certificate out of the box. Obviously, though, my use case for it is very simple, and your mileage may vary. With options like this, though, I feel even better about my idea to stop running my own VPS just to host a couple of small, low-traffic websites.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Self-Hosting A Static Website</title>
      <link>https://unusually.pink/self-hosting-a-static-website/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/self-hosting-a-static-website/</guid>
      <description>Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.</description>
      <content>&lt;p&gt;Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.&lt;/p&gt;
&lt;p&gt;We first took some early steps gathering requirements. What did he want for the site? Literally just the privacy policy. Where did he want to host it? Wherever was the cheapest. Did he have a domain name already? Yes! This was fairly straightforward; he literally &lt;em&gt;just&lt;/em&gt; wanted the very basics. After a bit of discussion I convinced him to write up a quick &amp;ldquo;about me&amp;rdquo; type of page so that we could have more than just the privacy policy. From there I could get to work.&lt;/p&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;The first thing I did was have him head over to &lt;a href=&#34;https://www.vultr.com/&#34;&gt;Vultr&lt;/a&gt; and spin up their cheapest instance. I think this is running him $5 USD per month. I had him pick &lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; as the server operating system given that it&amp;rsquo;s the one I&amp;rsquo;m most familiar with. My friend has some familiarity with Linux but not a lot of practical knowledge; when I asked him to shoot me some SSH credentials with &lt;code&gt;sudo&lt;/code&gt; access he literally sent me the root account from Vultr. Ick.&lt;/p&gt;
&lt;h1 id=&#34;configuring-the-host&#34;&gt;Configuring The Host&lt;/h1&gt;
&lt;h3 id=&#34;accounts&#34;&gt;Accounts&lt;/h3&gt;
&lt;p&gt;My first goal was to configure the host. I started that off by creating user accounts for each of us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;adduser username
usermod -aG sudo username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After switching users and verifying my new account worked, I disabled root&amp;rsquo;s ability to log in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo passwd -l root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ports&#34;&gt;Ports&lt;/h3&gt;
&lt;p&gt;Next I wanted to change the default SSH port since having 22 open means a million places from across the planet are going to throw garbage traffic at your server. I did this by modifying the SSH config at &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, finding the line with &lt;code&gt;#Port 22&lt;/code&gt;, uncommenting it, and changing the port to a high number of my friend&amp;rsquo;s choice. Then I restarted SSH:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;firewall&#34;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;I wanted to enable the firewall as well, so I opened up with the new SSH port &lt;em&gt;and&lt;/em&gt; 80 and 443 for our eventual website:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ufw allow sshPortNumber/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;webserver&#34;&gt;Webserver&lt;/h3&gt;
&lt;p&gt;I next needed a web server; &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; has been my go-to choice for a long time. Rather than re-hashing all of the steps, I&amp;rsquo;ll just recommend following the excellent documentation from &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04&#34;&gt;DigitalOcean&lt;/a&gt; which nicely covers the Nginx configuration. That takes you to the point where you are hosting a website. Then you just need content on it.&lt;/p&gt;
&lt;h3 id=&#34;certificate&#34;&gt;Certificate&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m an advocate of using HTTPS for everything, and with free certificates from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; there&amp;rsquo;s no reason not to. Given that we have shell access, using &lt;code&gt;certbot&lt;/code&gt; is the way to go. There&amp;rsquo;s also excellent &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&#34;&gt;documentation on that process on Ubuntu with Nginx&lt;/a&gt;. I highly recommend selecting the option to redirect any HTTP traffic to HTTPS.&lt;/p&gt;
&lt;h1 id=&#34;website&#34;&gt;Website&lt;/h1&gt;
&lt;p&gt;Now for the website itself. I&amp;rsquo;m not really much of a web developer, and I dislike making anything frontend; I don&amp;rsquo;t exactly have the best design sense. So I once again opted to leverage &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to take care of that for me. I&amp;rsquo;ve written about &lt;a href=&#34;https://failti.me/posts/hugo_setup_guide/&#34;&gt;the specifics of using Hugo in detail&lt;/a&gt;. Since we really just wanted a generic landing page with my friend&amp;rsquo;s socials and then links to the About and Privacy Policy pages, I ended up going with the &lt;a href=&#34;https://themes.gohugo.io/hermit/&#34;&gt;Hermit theme&lt;/a&gt;. It has a nice, simple look. My friend&amp;rsquo;s favorite color is mint green, so the default background also works nicely with that when I changed the accent color. The theme nicely includes an &lt;a href=&#34;https://github.com/Track3/hermit/tree/master/exampleSite&#34;&gt;exampleSite&lt;/a&gt; so that I can steal their &lt;code&gt;config.toml&lt;/code&gt; file and also their &amp;ldquo;About&amp;rdquo; page to make things even easier for myself.&lt;/p&gt;
&lt;h1 id=&#34;backups&#34;&gt;Backups&lt;/h1&gt;
&lt;p&gt;One of the nice things about Hugo is that, since everything is a simple text file, it&amp;rsquo;s very easy to compress your entire site and save a backup. Then if something terrible happens to your server, it&amp;rsquo;s extremely easy to get the site back up and running on a different machine. In this case, I made tarballs for both the finished, compiled site and the Hugo directory storing the configuration and Markdown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zvcf ~/temp/html_output.tar.gz /var/www/mySite.com/
tar -zvcf ~/temp/hugo_directory.tar.gz /var/www/mySite.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the tarballs created, I used an SFTP client to copy them off the server for safe keeping.&lt;/p&gt;
&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h1&gt;
&lt;p&gt;In total it took me about an hour and a half to get everything up and running. Having gone through this process &lt;em&gt;many&lt;/em&gt; times for websites of my own, I&amp;rsquo;ve got a decent bit of experience with the process, but this shows it still doesn&amp;rsquo;t necessarily take a super long time to get a decent website up and running. The big benefits are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The site is &lt;em&gt;cheap&lt;/em&gt; to run. Even the smallest instance at any VPS provider will be able to handle multiple sites with ease unless they start getting really popular, so if my friend wants to create any other sites in the future he won&amp;rsquo;t need additional hosting.&lt;/li&gt;
&lt;li&gt;Backups are stupid simple. My friend isn&amp;rsquo;t beholden to a hosting provider or trying to work within the confines of something more expensive like Wordpress or Squarespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The downsides are present, though, so you have to be cool with them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup takes more technical chops than clicking through a Squarespace template editor. While the documentation for everything in this post is extremely good, if working out a terminal freaks you out then this likely isn&amp;rsquo;t for you.&lt;/li&gt;
&lt;li&gt;Content is authored in Markdown. This likely doesn&amp;rsquo;t matter for my friend at the moment since he&amp;rsquo;s not really posting anything new to the site, but it would be something to keep in mind if he decided to start a blog. In that scenario, I usually just SSH to the server and author my content in &lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;. You could also author the Markdown elsewhere and copy it to the server, or use SFTP to open the Markdown file on the server from an editor on your local machine. It&amp;rsquo;s definitely &lt;em&gt;not&lt;/em&gt; as simple as a WYIWYG editor in your browser, though.&lt;/li&gt;
&lt;li&gt;Maintenance is something that will need to be done at least periodically. The server will need to be patched. That&amp;rsquo;s easy enough to do with a simple &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; and then reboot when necessary, but it&amp;rsquo;s just another step to keep in mind. Likewise, bouncing the server means that the website will be down, even if it&amp;rsquo;s typically only for a moment or two.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being kind of pretentious, technical snob I personally find it &lt;em&gt;easier&lt;/em&gt; to author my comment in Markdown on Vim instead of using a WYSIWYG editor in a GUI, but your mileage will vary based on your own prefrences.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Switching To Squarespace</title>
      <link>https://unusually.pink/switching-to-squarespace/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/switching-to-squarespace/</guid>
      <description>If you happened to see this site around the time when the first post went up, you might notice that:
  The site looks very different now.
  A lot of what’s in that first post no longer seems to be true.
  For example, this is not the Rusty theme for Hugo. Those technically savvy would also notice that the site no longer has the same DNS record value as laifu.</description>
      <content>&lt;p&gt;If you happened to see this site around the time when the &lt;a href=&#34;https://www.unusually.pink/blog/its-all-about-being-unusually-pink&#34;&gt;first post&lt;/a&gt; went up, you might notice that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The site looks very different now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lot of what’s in that first post no longer seems to be true.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, this is &lt;em&gt;not&lt;/em&gt; the &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-rusty/&#34;&gt;Rusty&lt;/a&gt; theme for Hugo. Those technically savvy would also notice that the site no longer has the same DNS record value as &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt; where things were originally hosted. That’s because the site is no longer running on my own web server and is not created using Hugo. There were a few reasons for this. The main was just that I’m &lt;strong&gt;really&lt;/strong&gt; bad at web design. The Rusty theme in Hugo is pretty light on imagery, which I’m cool with. Once we decided to actually make &lt;em&gt;Unusually Pink&lt;/em&gt; into a thing and do a podcast, though, we had our &lt;strong&gt;amazing&lt;/strong&gt; logos made by the uber-talented &lt;a href=&#34;https://www.jpfdesigns.com/&#34;&gt;JPFDesigns&lt;/a&gt;. Integrating those into the Rusty theme for Hugo was a bit more than I was up for; CSS is legitimately the final boss of my life, and my life is (apparently) an NES &lt;em&gt;Contra&lt;/em&gt; game; I couldn’t do it.&lt;/p&gt;
&lt;p&gt;The other reason was just that it allows for &lt;strong&gt;much&lt;/strong&gt; better reliability. The site isn’t beholden to my ability to not mess up my web server. Not that it’s particularly likely for me to do something to brick it (I’ve been using Linux and Nginx for my web servers for ages now), but it’s possible. I was also responsible for backups, which I’d prefer to take off of my own hands if possible.&lt;/p&gt;
&lt;p&gt;The last reason was that the site really needed to be divided from one main section (e.g. the blog I originally planned just to do &lt;strong&gt;something&lt;/strong&gt; with the domain) to two sections: a blog and a list of podcast episodes. While I was able to just dump a &lt;strong&gt;/podcast&lt;/strong&gt; directory into my &lt;strong&gt;static&lt;/strong&gt; folder for Hugo, it meant that posting podcast episodes and summaries was now an entirely manual process rather than something assisted by a CMS-esque system like Hugo.&lt;/p&gt;
&lt;p&gt;Swapping to &lt;a href=&#34;https://www.squarespace.com/&#34;&gt;Squarespace&lt;/a&gt; allowed me to let someone far smarter than me figure out all of that within a theme; all I had to do was upload some images (Squarespace is awesome at scaling images for me, even when it needed to make one tiny for the favicon) and then swap around a few of the colors in the theme to get something &lt;em&gt;unusually pink&lt;/em&gt;. I was also able to simply add two blogs to the site; one is a normal blog and the other will have posts for each podcast episode. In this way, both sections of the site are managed by a CMS rather than being done manually. Doing it manually may not seem like &lt;strong&gt;too&lt;/strong&gt; big of a deal at first, but once you start to get too many posts for a single page, creating and manually updating the pagination after each new post would be enough to drive someone insane.&lt;/p&gt;
&lt;p&gt;As for choosing Squarespace, it’s the one I’ve heard the most about through various avenues on the Internet. Their pricing was reasonable, and I figured it seemed like a safe bet since I know a few other people who have experience with them. The other recommendation I got was Wix, which I admittedly had never heard of previously. Looking at the &lt;a href=&#34;https://www.wix.com/upgrade/website&#34;&gt;pricing for Wix&lt;/a&gt; compared to the &lt;a href=&#34;https://www.squarespace.com/pricing&#34;&gt;pricing for Squarespace&lt;/a&gt;, though, I think it’s clear that Squarespace is a better deal. The Wix $11 USD per month package is pretty lackluster, especially when you look at 2 GB of bandwidth and 3 GB of storage. To get something more comparable to Squarespace’s $12 per month package that includes unlimited bandwidth and storage, you’d need the $14 per month plan from Wix… and that still doesn’t give you unlimited storage.&lt;/p&gt;
&lt;p&gt;Expect the site to still go through a few minor changes as we continue to tweak the layout, colors, and everything else. Feel free to drop any feedback to our &lt;a href=&#34;https://twitter.com/UnusuallyPink&#34;&gt;Twitter profile&lt;/a&gt;!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>It&#39;s all about being Unusually Pink.</title>
      <link>https://unusually.pink/its-all-about-being-unusually-pink./</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/its-all-about-being-unusually-pink./</guid>
      <description>This domain was a completely random purchase. Earlier today while taking a break from work (which was sorely needed… I had 3 weeks off over the holidays, and coming back today was not easy), I decided to hop on Mastodon for the first time in quite a while. A friend of mine who was previously on the same instance as me had apparently swapped to a different instance during the month or so that I was gone.</description>
      <content>&lt;p&gt;This domain was a completely random purchase. Earlier today while taking a break from work (which was sorely needed… I had 3 weeks off over the holidays, and coming back today was &lt;em&gt;not&lt;/em&gt; easy), I decided to hop on Mastodon for the first time in quite a while. A friend of mine who was previously on the same instance as me had apparently swapped to a different instance during the month or so that I was gone. I just happened to get lucky enough that another individual I follow happened to boost a toot from him; this friend was using the same avatar on his new instance that he used on the previous instance, so I immediately knew it was him. In seeing what instance he was on, I was a bit surprised. It had a &lt;code&gt;.pink&lt;/code&gt; TLD. I had no idea &lt;code&gt;.$COLORS&lt;/code&gt; was a thing now.&lt;/p&gt;
&lt;p&gt;I hopped over to my registrar of choice (&lt;a href=&#34;https://namecheap.com&#34;&gt;Namecheap&lt;/a&gt;) and saw that I could snag a domain for just $2.88 USD. It was a no-brainer. This was especially true because another friend of mine has a saying about the color pink. She doesn’t normally enjoy pink things, but she likes things which are (to quote her) “unusually pink.” A pink heart? Boring. A pink &lt;a href=&#34;https://www.razer.com/quartz&#34;&gt;Razer keyboard and mouse combo&lt;/a&gt;? Unusually pink and therefore extremely cool. (If you happen to be curious, I own both that keyboard and mouse. They match wonderfully with the pink LEDs in my gaming desktop. Bonus points to me if I’m using them to play Overwatch while wearing my pink Mercy t-shirt.) Hopefully she wasn’t too mad that I snagged this domain. If you’re reading this, I’m sorry. But I did offer up a sub-domain of her choice should she want one!&lt;/p&gt;
&lt;p&gt;At any rate, I made the purchase but had no idea what to do with it. After rolling a few things around in my mind, I decided that I would just make a blog on it. I used to blog a &lt;em&gt;lot&lt;/em&gt; back in my college days, and I managed to garner enough readership that a few companies would occasionally send me free anime and video games if I promised to write a review on my blog. I lost my luster for writing a few years back, but maybe this will motivate me to do it more frequently. I already had the hosting space available on my VPS currently running &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt;, which doesn’t need all of the resources on the server by a longshot. Plus, I found this sick theme! It’s &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-rusty/&#34;&gt;Rusty&lt;/a&gt; from the Hugo Themes gallery. It also gave me an excuse to learn how to use site blocks in Nginx as I’ve used Nginx for years but never with multiple sites on the same server. Spoiler alert: it’s super easy to do.&lt;/p&gt;
&lt;p&gt;Hopefully I’ll put up more posts in the near future! They’ll be… unusually pink.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
