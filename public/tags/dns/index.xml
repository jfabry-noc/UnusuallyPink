<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dns on Unusually Pink</title>
    <link>https://unusually.pink/tags/dns/</link>
    <description>Recent content in dns on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - John Fabry</copyright>
    <lastBuildDate>Sat, 31 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://unusually.pink/tags/dns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trying Out NextDNS</title>
      <link>https://unusually.pink/trying-out-nextdns/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/trying-out-nextdns/</guid>
      <description>I recently decided to take a little bit of time to set up NextDNS. While on the surface it&amp;rsquo;s similar to the myriad other DNS resolvers out there you can opt to use instead of the likely horrible DNS servers provided by your ISP, NextDNS is essentially a cloud-based Pi-hole. You can use some of the built-in blacklists in the product to block things like advertising, trackers, malware domains, and more.</description>
      <content>&lt;p&gt;I recently decided to take a little bit of time to set up &lt;a href=&#34;https://nextdns.io/&#34;&gt;NextDNS&lt;/a&gt;. While on the surface it&amp;rsquo;s similar to the myriad other DNS resolvers out there you can opt to use instead of the likely horrible DNS servers provided by your ISP, NextDNS is essentially a cloud-based &lt;a href=&#34;https://pi-hole.net/&#34;&gt;Pi-hole&lt;/a&gt;. You can use some of the built-in blacklists in the product to block things like advertising, trackers, malware domains, and more. There are a few key benefits to blocking things at the DNS level rather than relying on something to do the blocking your web browser. First off, most mobile browsers don&amp;rsquo;t offer the same robust extension ecosystems we&amp;rsquo;re all used to with full computers; you might be able to toggle some settings to block trackers, for example, but advertising is often a different beast altogether (though the &lt;em&gt;really&lt;/em&gt; bad advertisements typically also have egregious tackers, meaning that blocking the trackers will block the ads.) Additionally, there are some nefarious browser extension posing as ad-blockers, and there have been instances of &lt;a href=&#34;https://arstechnica.com/information-technology/2020/10/popular-chromium-ad-blockers-caught-stealing-user-data-and-accessing-accounts/&#34;&gt;legitimate extensions being sold and turned nefarious&lt;/a&gt;. Google&amp;rsquo;s &lt;a href=&#34;https://9to5google.com/2019/01/22/google-chrome-break-ad-blockers/&#34;&gt;extremely sleazy war on ad-blocking&lt;/a&gt; also makes DNS-based filtering attractive, though I&amp;rsquo;d still recommend people avoid Chromium-based browsers if at all possible. The other nice part is that you can easily configure DNS settings on a router, meaning the same degree of protection can apply to IoT devices with no accessible network settings of their own. This similarly applies to applications on your computer that connect to the network outside of a browser, as we&amp;rsquo;ll see later.&lt;/p&gt;
&lt;p&gt;NextDNS handles this by allowing you to specify your public IP address in their portal, thus linking traffic from your home with your NextDNS profile and all of the configurations that are in place there. The only caveat to it is needing to configure DDNS in some way or simply remembering to go to the portal in order to update the IP address should it ever change. Additionally, they offer apps for basically every major platform for configuring your devices and pointing them to the appropriate account. While you &lt;em&gt;can&lt;/em&gt; just update the DNS settings in your host operating system rather than using an app, the app is still required for linking your device to your profile so that it will leverage the appropriate block lists. What I found to be &lt;em&gt;really&lt;/em&gt; nice was that the iOS and iPad apps are able to leverage the new iOS 14 DNS profiles, meaning that it &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; need to create a shell VPN tunnel just for your DNS requests; that&amp;rsquo;s a huge win.&lt;/p&gt;
&lt;p&gt;To really test it out, for about 2 weeks I disabled the ad-blockers in my common browsers and tried to let NextDNS handle the brunt of my filtering needs. Getting it configured everywhere was fairly simple. The web portal will tell you what your current public IP is and offers a simple button to update your account to leverage that IP address. This made it simple to get basically everything in my home network using it after I modified the DNS servers in my router. I still went ahead and configured the settings individually on my devices, too, for the rare instance during a global pandemic when I&amp;rsquo;m on a network other than my home network. The iOS and iPad apps just need you to tap a button to add the new DNS profile to the device. Likewise, the macOS app simply adds a new icon to your tray at the top-right and offers a toggle for turning on your NextDNS settings. Unsurprisingly, there&amp;rsquo;s no Manjaro Linux app, though the service offers a bevy of examples for configuring your DNS settings on Linux; you&amp;rsquo;re just stuck in the position of not being able to link the device to your NextDNS account if you happen to leave the home network. The only real problem I ran into was that I had configured Firefox to use DNS over HTTPS and forgotten about it; once I realized I needed an additional change beyond the OS DNS settings, everything was fine.&lt;/p&gt;
&lt;p&gt;Operating this way, for the most part browsing the web was business as usual. Not &lt;em&gt;quite&lt;/em&gt; as many advertisements were being blocked as I would have expected with a browser extension enabled (more on that later), but on the whole the experience was still positive. What really surprised me, though, was the degree to which IoT devices are just an absolute dumpster fire; checking the metrics NextDNS generates showed that anywhere from 10 - 20% of my total DNS requests were being blocked, but nearly all of the top 10 blocked domains were based on under-the-hood queries being made by my devices phoning home rather than from actual advertising or tracking on web pages. All of this is nicely showcased with graphs in the NextDNS portal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/next_dns_graphs-1024x403.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;While I expected the combined privacy invasion of my two Amazon Echo devices to be the worst offender, my single Roku device actually took the top spot by a significant margin. My top 10 blocked domains were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scribe.logs.roku.com - 17,226&lt;/li&gt;
&lt;li&gt;device-metrics-us-2.amazon.com - 1,327&lt;/li&gt;
&lt;li&gt;telemetry.dropbox.com - 1,121&lt;/li&gt;
&lt;li&gt;giga.logs.roku.com - 1,095&lt;/li&gt;
&lt;li&gt;device-metrics-us.amazon.com - 794&lt;/li&gt;
&lt;li&gt;mads.amazon-adsystem.com - 717&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only non-device domain making the top 10 was from telemetry queries from Dropbox, the frequency of which was a bit disturbing. Roku really caught me off guard, though, with a single device making over 18,000 queries in just a couple of weeks. While using more domains, the two Echo devices made under 3,000 (which is still really bad!)&lt;/p&gt;
&lt;p&gt;As a bit of an aside, I was curious if the devices would simply give up on whatever they were phoning home about and drop the information or if they were storing it locally to upload in a bulk at the first opportunity. I ended up disabling NextDNS on my router around 9 AM and checked on the traffic of both my Echo and my Roku, neither of which were being actively used at the time. The Roku showed zero data use since the time I had been streaming with it the night before:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/roku_wifi_small.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Echo, on the other hand, &lt;em&gt;immediately&lt;/em&gt; spiked with network usage to transmit who-knows-what. That&amp;rsquo;s nice and terrifying:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/echo_wifi_small.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The other insight I found particularly interesting was just how deeply some of the biggest players on the web have their claws embedded across the Internet. For example, I don&amp;rsquo;t think any big Internet company is more evil than Facebook (though Google is trying hard), so I created a custom blocklist preventing &lt;code&gt;facebook.com&lt;/code&gt; from resolving. This prevents not just Facebook from loading but also some of Facebook&amp;rsquo;s other properties. For example, I hate and don&amp;rsquo;t use Instagram, but some friends occasionally send me posts from there. Instagram straight up won&amp;rsquo;t work if the main Facebook domain can&amp;rsquo;t be resolved. How gross is that?&lt;/p&gt;
&lt;p&gt;NextDNS operates by giving you 300,000 customized DNS queries per month where your policies and blacklists will be applied. After 300k queries, the service will act like a normal DNS resolver; while your devices won&amp;rsquo;t suddenly stop having functioning DNS, they won&amp;rsquo;t be benefiting from any of the blocks you might be expecting. For just a couple of dollars a month, you can get access to unlimited DNS queries, and subscribing for a year gives a month for free. I found staying on top of my query usage to be a bit confusing, though. As is shown in the screenshot above, my total number of queries for the month is provided, along with how many were blocked. I was averaging around 30,000 queries per day on this graph. I realized after the first week, though, that going into my account settings in the NextDNS portal gave me a &lt;em&gt;different&lt;/em&gt; metric on how many of my free queries had been used, and the data there was significantly lower. I ended my testing after using 280,000 queries according to the analytics graph, while my account settings showed that I had used just shy of 200,000 queries. I have no idea how those two numbers are different by 80,000 queries, especially when the two weeks of testing were done in the same month.&lt;/p&gt;
&lt;p&gt;While I liked NextDNS, it wasn&amp;rsquo;t perfect. I had mentioned previously that the blocking wasn&amp;rsquo;t quite as good as what I&amp;rsquo;d expect from just relying on an extension when browsing the web. The main reason I could see for this is that some companies host trackers and advertising on the same domain they use for other, more legitimate purposes. For example, checking the &lt;a href=&#34;https://unusually.pink/safari-14/&#34;&gt;blocked tracking metrics within Safari 14&lt;/a&gt; showed that &lt;code&gt;bing.com&lt;/code&gt; was still high in the running. Naturally a service like NextDNS can&amp;rsquo;t just block the entire Bing domain without breaking plenty of services people actually might want to use. If &amp;ldquo;close enough&amp;rdquo; satisfies your needs for blocking ads then I could see NextDNS being a good solution. If you&amp;rsquo;re like me and want to block &lt;em&gt;everything&lt;/em&gt;, though, then you&amp;rsquo;re still going to need extensions in your browser, and that makes the value proposition for paying for something like NextDNS for unlimited queries a bit less tenable. What ultimately made the decision for me, though, was that I ended up running into a handful of issues with the app I used the most: the one on macOS. I&amp;rsquo;m willing to own that the issue might stem from my setup or my device, as my MacBook has 4 different VPN clients on it that I use (and frequently switch between) for work, the network stack on the device crashes with semi-regular frequency, and my home network is &lt;em&gt;significantly&lt;/em&gt; more convoluted than most. What I saw, though, was that my DNS queries would periodically just fail. Trying to &lt;code&gt;dig&lt;/code&gt; from the CLI would give me a timeout error, like the NextDNS servers weren&amp;rsquo;t responding. Pings to known IP addresses worked fine. If I turned off the NextDNS macOS application, then everything worked fine. Toggling it back on would result in broken queries again. Fixing this was a mixed back that ranged from completely closing and re-launching the app to disabling my wireless network in macOS all the way to rebooting my laptop. Between that problem and the fact that it wasn&amp;rsquo;t a standalone blocking solution for me, I opted to not dive into paying for the service, even though it has a lot of promise and &lt;em&gt;does&lt;/em&gt; keep my Roku from being the chattiest device possible.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>GitHub Pages Hosting</title>
      <link>https://unusually.pink/github-pages-hosting/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/github-pages-hosting/</guid>
      <description>As I had mentioned in my post about Dropbox Passwords, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them.</description>
      <content>&lt;p&gt;As I had mentioned in my &lt;a href=&#34;https://unusually.pink/dropbox-passwords/&#34;&gt;post about Dropbox Passwords&lt;/a&gt;, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them. With a decrease in my domains comes a decrease in websites, to the point where I started to wonder if I could get away with ditching my VPS. I had been using the same VPS for over 2 years, and it served me well. In a world with so many hosting options, though, it seemed overkill just to run 2 static websites, each of which were only a single page.&lt;/p&gt;
&lt;p&gt;One of my sites I placed on &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. I&amp;rsquo;m not a fan of using Google products, but I&amp;rsquo;ve used Firebase previously (moving my website to an existing, stale Firebase project will be the topic of another post), and the free &lt;a href=&#34;https://firebase.google.com/pricing&#34;&gt;Spark plan&lt;/a&gt; gives me more than enough for a simple site with 1 GB of storage and 10 GB of egress traffic each month.&lt;/p&gt;
&lt;p&gt;I wanted to check out some different options for &lt;a href=&#34;https://jfabhd.com&#34;&gt;jfabhd.com&lt;/a&gt;, though. After recently reading one of &lt;a href=&#34;https://kevq.uk/static-site-generators-revisited/&#34;&gt;Kev Quirk&amp;rsquo;s blog posts&lt;/a&gt;, I thought I would give &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; a shot. Their &lt;a href=&#34;https://www.netlify.com/pricing/&#34;&gt;free Starter plan&lt;/a&gt; seems great for a simple hobby site and includes CI (continuous integration) from a git repository. I signed up for an account but quickly disliked the fact that leveraging my own domain meant I needed to move my nameservers for it to Netlify. While this isn&amp;rsquo;t horrible, I &lt;em&gt;really&lt;/em&gt; prefer to keep managing my DNS in a single place as opposed to scattering nameservers around to wherever my content is hosted. Currently all of my personal domains have DNS hosted in the same place, and I&amp;rsquo;d like to keep it that way. As a result, I shelved the idea of Netlify and looked to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;I actually used GitHub Pages before, way back in the day when they were brand new and I set up my first &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;-based blog. It wasn&amp;rsquo;t bad by any stretch, but a lot of it was clunky. I remembered having to manually add some text files to the repository to configure my custom domain and to host content out of a folder that was named differently than what was expected. Likewise, there were no SSL options, so I ended up putting my GitHub Pages site behind &lt;a href=&#34;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&#34;&gt;CloudFlare&lt;/a&gt; in order to secure it. I figured this would be a good opportunity to see what, if anything, had changed. If I hated it, I wouldn&amp;rsquo;t be out anything and could continue to look at other options.&lt;/p&gt;
&lt;p&gt;The initial setup is still the same as I remember: just create a public repository with a name of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github-account.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I did this through the GitHub website in less than a minute. Next up I ran &lt;code&gt;git clone&lt;/code&gt; in order to initialize the repository on my local laptop in the same directory where I keep all of my other GitHub repos. With my local environment ready, I just copied the handful of files that I had backed up from my VPS into the root directory for the repository; if I don&amp;rsquo;t take any other action, GitHub will host content from the root of the repo. Since this is a static, single page site, I don&amp;rsquo;t need to worry about compiling it with static site generators like Jekyll or &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I was able to &lt;code&gt;commit&lt;/code&gt; the change for adding the files, navigate to &lt;a href=&#34;https://jfabry-noc.github.io&#34;&gt;https://jfaby-noc.github.io&lt;/a&gt;, and see my site.&lt;/p&gt;
&lt;p&gt;With the content out of the way, I wanted to set up my custom domain. The GitHub side of the work can now be done through the &lt;strong&gt;Settings&lt;/strong&gt; menu of the repository; it basically replaces the manual work that I previously had to do by adding files to my repository:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unusually.pink/images/gh_pages.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top allows me to change the branch and directory to host content from; in my case I could just leave the defaults. The &lt;strong&gt;Custom domain&lt;/strong&gt; sections allows me to type in my domain of choice. This just adds a file named &lt;code&gt;CNAME&lt;/code&gt; to my repo containing the domain information. Then I just had to follow &lt;a href=&#34;https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;the directions&lt;/a&gt; for setting up a custom domain in my DNS host&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s a little wonky from the directions, but to make GitHub redirect everything appropriately when using both an apex domain and a subdomain, you follow both sections of the instructions verbatim. For example, I wanted the domain to be &lt;code&gt;jfabhd.com&lt;/code&gt;, but I also wanted &lt;code&gt;www.jfabhd.com&lt;/code&gt; to still redirect to the site. I configured the apex domain via the instructions above, creating 4 A records pointing to different IP addresses. Then I configured a CNAME record for &lt;code&gt;www.jfabhd.com&lt;/code&gt; pointing &lt;em&gt;not&lt;/em&gt; to &lt;code&gt;jfabhd.com&lt;/code&gt;, but instead to &lt;code&gt;jfaby-noc.github.io&lt;/code&gt;. If you do it this way, GitHub will work it all out under the hood.&lt;/p&gt;
&lt;p&gt;Immediately after setting up my DNS records, the option for &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; was not available, telling me that the site was not configured properly. I rightly assumed this just meant DNS needed time to propagate. I checked back 15 minutes later (which is the TTL of my DNS records), and it presented me with a new message that the certificate wasn&amp;rsquo;t finished being created yet. I once again rightly assumed that they were spinning up these certificates through &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, so I browsed &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt; for a few minutes until refreshing my repository&amp;rsquo;s settings showed that the option to force HTTPS was now available. I simply checked the box, waited a few minutes, and then verified that going explicitly to &lt;code&gt;http://jfabhd.com&lt;/code&gt; would redirect me successfully to &lt;code&gt;https://jfabhd.com&lt;/code&gt;. If this doesn&amp;rsquo;t work for you, chances are that you just didn&amp;rsquo;t give it enough time. While the tooltip in the GibHub UI says it can take up to 24 hours, it took about 5 minutes for my site.&lt;/p&gt;
&lt;p&gt;The last thing to check was that the CI was working so that changes to the repo would be reflected on the site. A few things had changed since I took the backup of my site, meaning there were some needed tweaks with which I could test. For one I restarted this blog and I deleted my Twitter account since Twitter is a cesspool (that might be a good topic for another post&amp;hellip;), so I wanted to swap the Twitter link on my site with one for this blog. I first did a &lt;code&gt;git pull&lt;/code&gt; to get local copies of things like the &lt;code&gt;CNAME&lt;/code&gt; file that had been made in the cloud, and then I quickly updated my HTML to share a link with the &lt;a href=&#34;https://fontawesome.com/icons/rss?style=solid&#34;&gt;Font Awesome RSS feed icon&lt;/a&gt; as the content. After committing and pushing the change, I refreshed the site to confirm it had also been updated.&lt;/p&gt;
&lt;p&gt;On the whole, there&amp;rsquo;s really nothing for me to complain about with GitHub Pages. It&amp;rsquo;s free, I can use the same GitHub account I&amp;rsquo;m already in every day, I can use a custom domain without moving my DNS, and I get a Let&amp;rsquo;s Encrypt certificate out of the box. Obviously, though, my use case for it is very simple, and your mileage may vary. With options like this, though, I feel even better about my idea to stop running my own VPS just to host a couple of small, low-traffic websites.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>It&#39;s Always DNS</title>
      <link>https://unusually.pink/its-always-dns/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/its-always-dns/</guid>
      <description>There&amp;rsquo;s a saying among system administrators:
 It&amp;rsquo;s always DNS.
 Meaning that whenever there’s an issue, DNS is likely the culprit. This morning that adage proved itself yet again.
My home network is currently running off of a Cradlepoint router. Cradlepoint’s specialty is making routers that can leverage LTE, so my router is configured to use my home ISP as the primary WAN link, but it will fail over to a cellular connection if my home ISP is unavailable.</description>
      <content>&lt;p&gt;There&amp;rsquo;s a saying among system administrators:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s always DNS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meaning that whenever there’s an issue, DNS is likely the culprit. This morning that adage proved itself yet again.&lt;/p&gt;
&lt;p&gt;My home network is currently running off of a &lt;a href=&#34;https://cradlepoint.com/&#34;&gt;Cradlepoint&lt;/a&gt; router. Cradlepoint’s specialty is making routers that can leverage LTE, so my router is configured to use my home ISP as the primary WAN link, but it will fail over to a cellular connection if my home ISP is unavailable. This is pretty handy, especially considering that I now work from home full-time. That being said, mobile data isn’t cheap here, and the data plan the Cradlepoint is using is paid for by my company. While it’s nice to fail over to LTE while I’m trying to work, I &lt;em&gt;don’t&lt;/em&gt; want to be eating through LTE data while I’m just sitting on the couch watching Hulu. As a result, I’ve configured alerting from the router’s cloud management platform to notify me when a failover occurs so that I can troubleshoot the network and tailor my online activity accordingly if I’m going to be on LTE for a while.&lt;/p&gt;
&lt;p&gt;This morning was basically one of the worst starts to a weekend morning where I want to hang out with a cup of coffee and catch up on my RSS feeds. I woke up to an email alert from a few hours prior letting me know that my router had failed over to LTE. It happened once around 6 AM for a few minutes, failed back over to my ISP network, and then maintained that for roughly 40 minutes before failing over to LTE again a little before 7 AM. The first step, which I could easily do from bed with my phone, was to check for any outages from my ISP. Logging into my account there showed me that there weren’t any known outages, though.&lt;/p&gt;
&lt;p&gt;Finally being forced to shuffle out of bed and into the living room to get eyes on the situation, I saw that the lights on the modem looked normal. I logged into the router’s management interface and verified that everything looked correct. I rebooted the modem to be safe, and the Cradlepoint immediately reconnected to LTE rather than using my modem’s connection. I bounced the Cradlepoint, and the connection status persisted. I disabled LTE on the router, and it listed the Ethernet port as the current WAN link, which seemed good. I tried connecting to &lt;a href=&#34;https://laifu.moe&#34;&gt;Laifu.moe&lt;/a&gt;, though, and it wouldn’t load up. I tried to ping one of the &lt;a href=&#34;https://www.opendns.com/&#34;&gt;OpenDNS&lt;/a&gt; servers of &lt;code&gt;208.67.220.220&lt;/code&gt; and also got no response. This was a critical mistake, though I didn’t know it yet at the time.&lt;/p&gt;
&lt;p&gt;Thinking now that maybe something was up with my Cradlepoint, I pulled a bin of miscellaneous tech stuff out of the closet and fished through it to find the router from my ISP that I never use. I plugged that in line after my modem, removing the Cradlepoint from the equation, and bounced the modem. The ISP-provided router came online right away with the characteristic blue light that indicates everything is fine. I connected my laptop to its WiFi network and tried to load a webpage… with no success. I once again tried to ping &lt;code&gt;208.67.220.220&lt;/code&gt; also without any response.&lt;/p&gt;
&lt;p&gt;This was when I finally realized the flaw in my troubleshooting. Both the Cradlepoint and my ISP-provided router had been configured by me to use the OpenDNS servers as what they hand out with DHCP leases. Literally all of my devices are using &lt;code&gt;208.67.220.220&lt;/code&gt; and &lt;code&gt;208.67.222.222&lt;/code&gt; as their DNS servers. Likewise, the Cradlepoint needs something it can test to determine if a WAN link is up or down so that it can fail over to LTE and fail back to the Ethernet WAN link. I had &lt;em&gt;that&lt;/em&gt; set as &lt;code&gt;208.67.220.220&lt;/code&gt; as well. So what if &lt;strong&gt;that&lt;/strong&gt; was the problem? While still connected to my ISP router’s WiFi network, I tried to ping &lt;code&gt;8.8.8.8&lt;/code&gt; and immediately got a response. OpenDNS is what was unreachable.&lt;/p&gt;
&lt;p&gt;Ripping the ISP router out of the network, I linked the Cradlepoint back up. I reconfigured it to use &lt;a href=&#34;http://1.1.1.1/&#34;&gt;1.1.1.1&lt;/a&gt; as the DNS servers it hands out, and to leverage that for the state of the WAN link. As soon as I did that, everything began working and the Cradlepoint failed back to the Ethernet WAN link on the next check. I should probably rethink this setup where I’m using the same IP address for DNS as I am for the state of the WAN, but I should also remember that it’s always DNS and check that a little earlier in the process.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
