<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macos on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/macos/</link>
    <description>Recent content in macos on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Mon, 15 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/macos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>macOS Big Sur 11.2 Homebrew and Git Error</title>
      <link>https://hugo.unusually.pink/macos-big-sur-11.2-homebrew-and-git-error/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/macos-big-sur-11.2-homebrew-and-git-error/</guid>
      <description>After I upgraded my macOS install from 11.1 to 11.2, the next time I tried running brew update to update all of the packages available in Homebrew, I got a wall of text regarding things going off the rails that ultimately culminated with this error:
 Error: Failure while executing; git config --replace-all homebrew.analyticsmessage true was terminated by uncaught signal KILL.
 When this happens, not only is Homebrew broken, but git itself is broken.</description>
      <content>&lt;p&gt;After I upgraded my macOS install from 11.1 to 11.2, the next time I tried running &lt;code&gt;brew update&lt;/code&gt; to update all of the packages available in &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, I got a wall of text regarding things going off the rails that ultimately culminated with this error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: Failure while executing; &lt;code&gt;git config --replace-all homebrew.analyticsmessage true&lt;/code&gt; was terminated by uncaught signal KILL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When this happens, not only is Homebrew broken, but &lt;code&gt;git&lt;/code&gt; itself is broken. Running a simple &lt;code&gt;git status&lt;/code&gt; inside of an existing repository will similarly result in an error. I initially tweeted about it after I found a &lt;a href=&#34;https://github.com/Homebrew/discussions/discussions/673&#34;&gt;relevant thread on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I did have to combine the steps from a few different support threads, though, so after I had to go through the same process again after upgrading from macOS 11.2 to 11.2.1, I figured I&amp;rsquo;d throw together a quick post about what worked for me. From the input others are sharing on GitHub, it seems different combinations are working for different people, so your mileage may vary.&lt;/p&gt;
&lt;p&gt;The first thing that I needed to do is reinstall the Xcode CLI tools. This is &lt;em&gt;not&lt;/em&gt; a full Xcode installation, so no need to worry about a massive download. If you get the warning about being on battery and the recommendation that you only do the installation while the device is plugged in, you can likely just ignore it and proceed on battery power; on my system the install takes about 2 minutes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For some people, the second and final step is to reinstall &lt;code&gt;git&lt;/code&gt;. This did &lt;em&gt;not&lt;/em&gt; work for me, though. Following &lt;a href=&#34;https://github.com/Homebrew/discussions/discussions/439#discussioncomment-261267&#34;&gt;another thread&lt;/a&gt;, I discovered that I needed to reinstall two dependencies of &lt;code&gt;git&lt;/code&gt;: &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;pcre2&lt;/code&gt;. I&amp;rsquo;m assuming that you can likely reinstall both with one command without any issues, but both times I&amp;rsquo;ve seen the problem thus far I&amp;rsquo;ve run the commands individually:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew reinstall gettext
brew reinstall pcre2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final step then is to &lt;em&gt;now&lt;/em&gt; reinstall &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew reinstall git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that&amp;rsquo;s done, now re-running &lt;code&gt;brew update&lt;/code&gt; or &lt;em&gt;any&lt;/em&gt; &lt;code&gt;git&lt;/code&gt; command should be successful.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Switching To Brave</title>
      <link>https://hugo.unusually.pink/switching-to-brave/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/switching-to-brave/</guid>
      <description>I spend the majority of my computing time on the MacBook Pro that I use for work. For a very long time, I&amp;rsquo;ve used Safari as my main browser on it. Unsurprisingly, Safari integrates very nicely with the rest of macOS, and I honestly just really like it as a browser. Lately, though, I&amp;rsquo;ve been experiencing increased frustration with Safari and the web as a whole that has had me looking for alternatives.</description>
      <content>&lt;p&gt;I spend the majority of my computing time on the MacBook Pro that I use for work. For a very long time, I&amp;rsquo;ve used Safari as my main browser on it. Unsurprisingly, Safari integrates very nicely with the rest of macOS, and I honestly just really like it as a browser. Lately, though, I&amp;rsquo;ve been experiencing increased frustration with Safari and the web as a whole that has had me looking for alternatives. I&amp;rsquo;ll preface this entire post by saying that I could easily work around most of my problems by doing what I&amp;rsquo;ve historically done and using Safari for most things and a different browser for the remainder that don&amp;rsquo;t work well in Safari, but I really dislike having multiple browsers open. While I&amp;rsquo;m not nearly as guilty as most of my colleagues about having an egregious number of tabs open, it&amp;rsquo;s still a pain to deal with swapping between browser windows and finding what site is open where.&lt;/p&gt;
&lt;h2 id=&#34;issues&#34;&gt;Issues&lt;/h2&gt;
&lt;p&gt;The main issue with Safari is compatibility. As someone who is (mercifully) not a web developer, I don&amp;rsquo;t know if the problem is with WebKit itself, with the utter dominance of the Blink, or a combination of the two, but the web in 2021 feels much like the web of the early 2000&amp;rsquo;s. The difference is that instead of everyone developing specifically for Internet Explorer 6, they&amp;rsquo;re developing for Chrome. Various web conferencing applications, for example, just won&amp;rsquo;t work in Safari. Some of them like Microsoft Teams will flat-out tell you this if you try, while others will let you make the attempt and then not work as expected. I get that this is commonly done so that developers can offer a &amp;ldquo;desktop&amp;rdquo; app via Electron, but it still sucks. My favorite bug from recent memory is that SharePoint will manage to get the selection area mis-aligned with the mouse cursor in Safari, meaning that to click on a particular file or directory I have to just watch the highlighting rather than my cursor and click on something arbitrary; it&amp;rsquo;s either that or I refresh the page and hope for a better experience.&lt;/p&gt;
&lt;p&gt;The lack of configuration options also make Safari periodically difficult to use in a work environment. For example, 3rd party cookies are blocked by default in Safari. This is &lt;em&gt;awesome&lt;/em&gt;, in my opinion, since they should be blocked 99% of the time, yet almost no one outside of the technically minded is going to bother going into their settings to make that change. However, sometimes I need to allow 3rd party cookies, and Safari doesn&amp;rsquo;t seem to offer up options for this. The &lt;a href=&#34;https://admin.teams.microsoft.com&#34;&gt;Microsoft Teams Admin Center&lt;/a&gt; is a shining example of this. Without 3rd party cookies, you&amp;rsquo;ll just get an error page. I&amp;rsquo;ve historically had to fire up a different browser in order to access it.&lt;/p&gt;
&lt;p&gt;The final issue, which is definitely Safari-specific, is the update cadence. Most browsers are providing monthly updates. Safari, much like the Internet Explorer of years past, is still tying its major updates with OS updates. This means that &lt;a href=&#34;https://unusually.pink/safari-14/&#34;&gt;while the release of Safari 14 was awesome&lt;/a&gt;, for example, I&amp;rsquo;ll wait much longer for Safari 15 to bring additional improvements than I would with a competing browser.&lt;/p&gt;
&lt;p&gt;On the whole, I still &lt;em&gt;really&lt;/em&gt; like Safari, and I think it&amp;rsquo;s great in a personal context. For work, though, it&amp;rsquo;s just a bit too inflexible and unsupported.&lt;/p&gt;
&lt;h2 id=&#34;brave&#34;&gt;Brave&lt;/h2&gt;
&lt;p&gt;My primary concern with alternative browsers was simply native support. I have a MacBook Pro running an M1 chip, and while translating x86 applications to ARM via Rosetta 2 has been seamless with plenty of applications, I wanted my browsing experience to be as snappy as possible. Tons of applications feature ARM support under Linux, which I&amp;rsquo;ve seen firsthand with my &lt;a href=&#34;https://unusually.pink/unusually-pink-impressions-pinebook-pro/&#34;&gt;Pinebook Pro&lt;/a&gt;. I figured it would only be a matter of time before developers made the necessary tweaks for M1 support. Firefox was &lt;a href=&#34;https://www.macrumors.com/2020/12/15/firefox-now-natively-supports-m1-macs/&#34;&gt;one of the first browsers I knew of to support M1 chips&lt;/a&gt;, but I wasn&amp;rsquo;t sure if that was the direction I wanted to go. I love Firefox, and I still use it on all of my Linux systems; I&amp;rsquo;m using it to write this post on my &lt;a href=&#34;https://unusually.pink/star-lite-mk-iii/&#34;&gt;Star Lite Mk III&lt;/a&gt; right now. There have been a lot of concerns surrounding the direction of Firefox after &lt;a href=&#34;https://arstechnica.com/information-technology/2020/08/firefox-maker-mozilla-lays-off-250-workers-says-covid-19-lowered-revenue/&#34;&gt;Mozilla laid off a large number of staff in 2020&lt;/a&gt;, a group that allegedly included most &amp;ndash; if not all &amp;ndash; of their incident response team. Additionally, I experience many of the same issues with Firefox and the Gecko engine as I do with Safari and WebKit in today&amp;rsquo;s Chrome-centric web.&lt;/p&gt;
&lt;p&gt;Instead, I decided to give Brave a shot. Brave &lt;a href=&#34;https://www.engadget.com/apple-silicon-brave-browser-132047721.html&#34;&gt;added M1 support at the very end of 2020&lt;/a&gt;, and I already had it installed on my machine to use whenever Safari wasn&amp;rsquo;t an option for all of the aforementioned reasons. I simply swapped it to my default browser and spent the past week using it. Brave is a Chromium fork, meaning it renders pages like Chrome and will experience the same high degree of compatibility across sites. It also can install all of the same extensions as Chrome, though that&amp;rsquo;s far less important than one might think as I&amp;rsquo;ll discuss shortly.&lt;/p&gt;
&lt;p&gt;Like most Chromium forks, all of the Google junk that gets added to Chrome is absent. In fact, Brave&amp;rsquo;s main mission is to be a privacy-focused browser. It features a robust advertising and tracking blocker built-in, with tons of options for configuring exceptions, disabling it entirely for certain sites, and more. What really surprised me was the aggression of blocking that it was capable of. I used the tracking blocker in Safari, for example, and the typical reporting from it would block somewhere around 200 trackers per week. After using Brave for a week, my metrics look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hugo.unusually.pink/images/brave_blocker.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To be clear, this is in no way an apples-to-apples (no pun intended) comparison since I have Brave blocking both trackers and ads while Safari can only do trackers. The numbers are still staggering after just a week, though, and I was particularly interested in seeing metrics like how much bandwidth was saved by not loading that content. There are also baseline levels of blocking that can be configured, and I initially attempted to go with the Strict option. I quickly found that too many sites flat out broke, so I switched it to Standard with much better results. Additionally, options exist for allowing things like buttons on sites for Twitter, Facebook, LinkedIn, etc. The other bonus is that such robust blocking built in means I didn&amp;rsquo;t need the array of security extensions I may be inclined to install with other browsers. After a week, the only extension I&amp;rsquo;ve added to Brave is one for my password manager.&lt;/p&gt;
&lt;p&gt;Another nice security feature with Brave is that it offers two different takes on Incognito mode. The first is the traditional Incognito mode where it won&amp;rsquo;t load any cookies from your main browsing session, and any cookies gathered during that Incognito session are removed once it ends. The other option does the exact same as the first, but it also &lt;a href=&#34;https://www.torproject.org/&#34;&gt;routes your traffic through Tor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Brave has seemingly endless customization, and everything discussed thus far can be toggled off and on in the settings. Don&amp;rsquo;t need Tor with Incognito? You can turn it off so that it doesn&amp;rsquo;t even show up as an option. In fact, going through the settings to configure Brave is the only real hurdle to using it, and it probably took me about 30 minutes to look through everything and get it set up the way that I wanted. That being said, I found the default configuration to be &lt;em&gt;very&lt;/em&gt; good, and for most people who may not care to go through the settings it&amp;rsquo;ll be more than fine.&lt;/p&gt;
&lt;p&gt;Brave seems great on my battery life with no discernible difference from Safari. I haven&amp;rsquo;t really paid much attention to it, though, because honestly everything seems to scream on an M1 MacBook Pro without using much energy in the first place. I don&amp;rsquo;t know if I&amp;rsquo;ve ever heard the fan kick on in the months that I&amp;rsquo;ve used the device, and I literally never pay attention to the battery life. I typically work from various locations around my apartment for the morning and then settle in at my desk with a dock during the afternoon. I&amp;rsquo;ve worked undocked for an entire day a couple of times before and still ended the day with enough battery life to comfortably return to my normal routine the next day without any problems.&lt;/p&gt;
&lt;p&gt;After a week, I&amp;rsquo;ve been pleased with Brave. As is typically the case, I&amp;rsquo;m always open to checking out new software, and I&amp;rsquo;m interested in maybe giving Vivaldi, which I&amp;rsquo;ve used on Linux previously, a try on my MacBook once they offer M1 support.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>macOS Big Sur pip Installation Error</title>
      <link>https://hugo.unusually.pink/macos-big-sur-pip-installation-error/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/macos-big-sur-pip-installation-error/</guid>
      <description>Given that I have technological FOMO while also being a technology masochist, I upgraded my 2018 MacBook Pro to macOS 11 &amp;ldquo;Big Sur&amp;rdquo; as soon as it was available. Common sense dictates that I should have waited a while to let others encounter and fix some of the kinks prior to upgrading myself, but what&amp;rsquo;s the fun in that? I admittedly had a very smooth experience without many issues, and I&amp;rsquo;ve been happily on Big Sur for a few weeks now.</description>
      <content>&lt;p&gt;Given that I have technological FOMO while also being a technology masochist, I upgraded my 2018 MacBook Pro to macOS 11 &amp;ldquo;Big Sur&amp;rdquo; as soon as it was available. Common sense dictates that I should have waited a while to let others encounter and fix some of the kinks prior to upgrading myself, but what&amp;rsquo;s the fun in that? I admittedly had a very smooth experience without many issues, and I&amp;rsquo;ve been happily on Big Sur for a few weeks now. I encountered my first big error a few days ago, though, while helping a friend with some Python code. We needed to use the &lt;a href=&#34;https://www.paramiko.org&#34;&gt;&lt;code&gt;paramiko&lt;/code&gt;&lt;/a&gt; package, which I didn&amp;rsquo;t have installed. I tried to install it with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo pip3 install paramiko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was the first time I tried to use &lt;code&gt;pip3&lt;/code&gt; to install a Python package since upgrading to Big Sur, and I was immediately rewarded with an entire screen&amp;rsquo;s worth of cascading error messages. I took a little time to parse through them before hitting on something that seemed fairly key:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clang: error: invalid version number in &amp;lsquo;MACOSX_DEPLOYMENT_TARGET=11.0&amp;rsquo;&lt;/p&gt;
&lt;p&gt;error: command &amp;lsquo;/usr/bin/clang&amp;rsquo; failed with exit code 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seemed that the &lt;code&gt;clang&lt;/code&gt; compiler was unhappy with the fact that the targeted version of macOS was 11.0. This makes sense to me since all of the releases of macOS, back to when it was called OS X in 2001, were numbered 10.x.y. Big Sur was the first version of macOS in nearly two decades to bump the version from 10 to 11, and apparently my &lt;code&gt;clang&lt;/code&gt; configuration &lt;em&gt;really&lt;/em&gt; didn&amp;rsquo;t like that. Figuring that in 2 weeks since the release of Big Sur someone else had surely attempted to install some Python 3 packages, I started searching online. Plenty of responses recommended updating the Xcode CLI tools via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I gave this a shot, but I simply got a message stating there weren&amp;rsquo;t any updates available. I kept digging and finally hit upon a &lt;a href=&#34;https://stackoverflow.com/questions/63972113/big-sur-clang-invalid-version-error-due-to-macosx-deployment-target&#34;&gt;Stackoverflow thread&lt;/a&gt; with a solution that involved manually deleting the directory with the Xcode CLI tools and then reinstalling. I assumed that this wouldn&amp;rsquo;t do anything since the tooling didn&amp;rsquo;t see any needed updates in the first place, but on a whim I tried it. First I nuked the &lt;code&gt;/Library/Developer/CommandLineTools&lt;/code&gt; directory with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo rm -rf /Library/Developer/CommandLineTools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that was done, I kicked off reinstalling the CLI tools via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This initially estimated that it would take over 2 hours, followed by 20 minutes, followed by 2 minutes. Wildly inaccurate time estimates aside, after waiting a minute or two I had the tooling available once again. I tried to install &lt;code&gt;paramiko&lt;/code&gt;, and was happily greeted with the progress indicators as it compiled along with all of its dependencies. I tried some quick code calling the package, and sure enough everything worked successfully. It&amp;rsquo;s curious to me that checking for updates shows nothing, but reinstalling the Xcode CLI tools still resolves the issue. My guess is there is a configuration file somewhere that needs to be updated, and it gets both created and configured at the time of installation. This would mean I opted for the nuclear option when a bit more finesse would have sufficed, but with things working I didn&amp;rsquo;t feel like trying to dig through configuration files to verify when I had code to write.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SSHFS On macOS</title>
      <link>https://hugo.unusually.pink/sshfs-on-macos/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/sshfs-on-macos/</guid>
      <description>Having switched to a MacBook Pro for work when I started a new job about 6 months ago, I&amp;rsquo;ve been on an interesting journey in finding new software to fit my workflow after over a decade of operating primarily on Windows for my professional computing. Given that I&amp;rsquo;ve used Linux for years at a personal level, I can typically do anything I need on macOS by opening a Terminal; it&amp;rsquo;s only when I&amp;rsquo;ve got to operate at the graphical level that I can get a little tripped up by the differences between macOS and Windows.</description>
      <content>&lt;p&gt;Having switched to a MacBook Pro for work when I started a new job about 6 months ago, I&amp;rsquo;ve been on an interesting journey in finding new software to fit my workflow after over a decade of operating primarily on Windows for my professional computing. Given that I&amp;rsquo;ve used Linux for &lt;strong&gt;years&lt;/strong&gt; at a personal level, I can typically do anything I need on macOS by opening a Terminal; it&amp;rsquo;s only when I&amp;rsquo;ve got to operate at the graphical level that I can get a little tripped up by the differences between macOS and Windows.&lt;/p&gt;
&lt;p&gt;I recently found myself needing to copy some files from a cloud VPS running on &lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt;. The reverse had been simple enough; copying files from my local machine to the VPS was as simple as running one &lt;code&gt;rsync&lt;/code&gt; command. Note that I swap the SSH port on all of my VPS instances to something non-standard so that I don&amp;rsquo;t get so many random &lt;strong&gt;root&lt;/strong&gt; authentication attempts when nefarious people see that port 22 is open. Even though I disable root login I still want to discourage the attempts for anything that has SSH open to the Internet. If you think I&amp;rsquo;m overreacting and you have a server in the same position, just do this and see how you feel after:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tail /var/log/auth.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s low-key terrifying. That being said, it was still easy enough to &lt;code&gt;rsync&lt;/code&gt; anything from my MacBook Pro to the VPS (usually a script I had been working on that I figured would take hours to run and thus would be better suited to running on my VPS) via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rsync --delete -azP -e &amp;quot;ssh -p #####&amp;quot; LocalFolder/ usere@server.domain:/local/file/path/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the &lt;code&gt;#####&lt;/code&gt; should be replaced by the SSH port number on your server if you&amp;rsquo;re using something other than the default of port 22. You can verify the SSH port in use by checking &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; on your server and looking for the &lt;code&gt;Port&lt;/code&gt; entry.&lt;/p&gt;
&lt;p&gt;For me, though, this typically &lt;em&gt;only&lt;/em&gt; works in the direction of going from my local laptop to my VPS. After finishing one particularly log-running script, though, I had a file on my VPS that I needed to copy back to my MacBook. In that case, &lt;code&gt;rsync&lt;/code&gt; wouldn&amp;rsquo;t work because my laptop doesn&amp;rsquo;t have a public IP address, and I &lt;em&gt;really&lt;/em&gt; didn&amp;rsquo;t want to bother with trying to do port-forwarding for it. In the Windows world, I would&amp;rsquo;ve typically used something like &lt;a href=&#34;https://winscp.net/eng/index.php&#34;&gt;WinSCP&lt;/a&gt; to copy the files. &lt;a href=&#34;https://filezilla-project.org/&#34;&gt;FileZilla&lt;/a&gt; also works but, in my previous experience, has been super buggy. I tried looking in the macOS app store, and I was almost immediately disappointed. Most of the offerings either 1.) looked super shady with bad reviews or 2.) were aubscription-based applications. Don&amp;rsquo;t get me wrong&amp;hellip; I&amp;rsquo;m not particularly opposed to subscription services. In fact, &lt;a href=&#34;https://sameshadeofdifference.com/&#34;&gt;I have a podcast episode waiting to be published on this very topic&lt;/a&gt;. But for something like a simple &lt;em&gt;file transfer&lt;/em&gt;? I refuse to pay a subscription for something so basic.&lt;/p&gt;
&lt;p&gt;As a result, I ended up looking for open-source alternatives. After just a little hunting I stumbled across &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt;. I installed the &lt;code&gt;sshfs&lt;/code&gt; base from &lt;a href=&#34;https://www.unusually.pink/podcast/episode-16-abandonment-and-homebrew&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before &lt;code&gt;sshfs&lt;/code&gt; will work, though, you also need to install &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;FUSE&lt;/a&gt;, which I just did from their website. Note that after upgrading my device from Mojave to Catalina I needed a new version of FUSE; luckily the system is good about letting you know that your version is out of date if that&amp;rsquo;s a problem.&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;sshfs&lt;/code&gt; allows me to do is to mount a remote filesystem like a local filesystem that I can then use to copy files back and forth. To be extra basic, I created my mount point in my &lt;code&gt;~/Downloads&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/Downloads/sftp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It took me some messing around to figure out the exact syntax I needed to successfully mount the filesystem for my VPS, but I eventually ended up with a shell script that just included this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo sshfs -o allow_other,defer_permissions -p ##### user@server.domain:/local/file/path /Full/Path/ToLocal/MountPoint/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just like before, change the port number, server, and file path information to match your actual setup. After running this, you can then open Finder in macOS and easily copy files to and from the server without worry about port forwarding. The only caveat I&amp;rsquo;ve noticed is that sometimes macOS becomes extremely unhappy if the remote filesystem is left mounted and the local client loses connectivity to the remote system, for example because the laptop fell asleep and disconnected from WiFi. As a result, I only leave the connection up when I&amp;rsquo;m actively working with it. When I need to disconnect the mounted remote filesyste, I can either click the &amp;ldquo;eject&amp;rdquo; icon next to it in Finder or I can run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo unmount /Full/Path/ToLocal/MountPoint
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case the mount point is &lt;code&gt;~/Downloads/sftp&lt;/code&gt;. I now use this setup on a nearly daily basis, and I&amp;rsquo;ve not run into any issues. The free, open-source solution is working great without forcing me to try out random shady-looking apps or coughing up money for a subscription just to move files between devices.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
