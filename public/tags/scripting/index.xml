<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scripting on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/scripting/</link>
    <description>Recent content in scripting on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Mon, 18 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parse ISO 8601 String With Timezone Offset To Date Object In Groovy</title>
      <link>https://hugo.unusually.pink/parse-iso-8601-string-with-timezone-offset-to-date-object-in-groovy/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/parse-iso-8601-string-with-timezone-offset-to-date-object-in-groovy/</guid>
      <description>My Groovy posts always have the absolute worst titles, but I figure that making them verbose is really the only way to make them discoverable. I write a good bit of Groovy code at work, and given that it&amp;rsquo;s been a few years since the heyday of Groovy it can occasionally be a bit of a struggle to figure out exactly what I need with the resources I dig up online.</description>
      <content>&lt;p&gt;My &lt;a href=&#34;https://unusually.pink/groovy-programming-creating-an-iso-date-at-a-specific-date-and-time-in-utc/&#34;&gt;Groovy posts always have the absolute worst titles&lt;/a&gt;, but I figure that making them verbose is really the only way to make them discoverable. I write a good bit of Groovy code at work, and given that it&amp;rsquo;s been a few years since the heyday of Groovy it can occasionally be a bit of a struggle to figure out exactly what I need with the resources I dig up online. Any time I manage to figure out something that was difficult to find information on, it seems like a good opportunity to fill the gap a bit.&lt;/p&gt;
&lt;p&gt;I do a lot of work with APIs, mostly making calls against cloud-based systems. In the cloud, no one generally cares about what timezone you happen to be in, so UTC is always used. I&amp;rsquo;ve recently been making calls against local software platform, though, and &lt;strong&gt;it&lt;/strong&gt; returns timestamps in the local time of the server running it. Ick. I ended up with string values like the following which I then needed to parse as a Date object in Groovy for the sake of comparison.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;2020-10-17T02:00:21.644-04:00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;m quite familiar with converting something like this &lt;em&gt;without&lt;/em&gt; the timezone offset at the end; that one was new for me. My first struggle was exactly what to search for in order to dig up information on this; I eventually discovered that this is &lt;a href=&#34;https://www.iso.org/iso-8601-date-and-time-format.html&#34;&gt;an ISO 8601 date and time format&lt;/a&gt;. I first attempted to simply pass this value straight to &lt;code&gt;Date.parse()&lt;/code&gt; like I would with something in UTC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;def dateString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-10-17T02:00:21.644-04:00&amp;#34;&lt;/span&gt;
def dateObject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HH:mm:ss.SSSZ&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; dateString&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attempting this gives a really nice error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unparseable date: &amp;ldquo;2020-10-17T02:00:21.644-04:00&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Groovy telling me to get bent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After more digging than I care to admit, I finally got to the root of the problem: Groovy doesn&amp;rsquo;t like the colon in the timezone offset. Rather than &lt;code&gt;04:00&lt;/code&gt; it wants &lt;code&gt;0400&lt;/code&gt;. Given that I work in the western hemisphere, I &lt;em&gt;could&lt;/em&gt; have taken the easy route and simply removed the last 3 characters, replacing &lt;code&gt;:00&lt;/code&gt; with &lt;code&gt;00&lt;/code&gt;. It&amp;rsquo;s not the most elegant solution, though, and there are parts of the world with timezone offsets in fractions of an hour; assuming it&amp;rsquo;s always going to be a whole hour isn&amp;rsquo;t safe. My first take, written last week, was to be extremely complicated by splitting the string into a list at each colon. From there, I concatenated the list items back into a string, separating them with colons, until attaching the very last piece, which is added sans colon:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It technically works but doesn&amp;rsquo;t look so good; no one would ever call the above solution &amp;ldquo;elegant&amp;rdquo; by any stretch. That was done late on a Friday, though, and over the weekend I had a better thought pop into my head. What if instead of spitting up the entire string I simply:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verified first that the end of the string matched what was expected.&lt;/li&gt;
&lt;li&gt;Took a substring that was everything up until the problematic part of the offset.&lt;/li&gt;
&lt;li&gt;Took a substring for the numbers after the last colon.&lt;/li&gt;
&lt;li&gt;Put the parts from 2 and 3 together.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After shaking off a bit of regular expression rust, this is what I ended up using:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The partial regex match of &lt;code&gt;:\d{2}$&lt;/code&gt; validates that the string ends with a colon followed by any 2 digits. If so, I first create a substring from the first index (0) up to the index at the length of the string minus 3, meaning I omit the colon and last 2 numbers. Then I append to that a substring from the overall string&amp;rsquo;s length minus &lt;strong&gt;2&lt;/strong&gt; through the end of the string. Using the overall string&amp;rsquo;s length minus 2 rather than 3 means I just leave out the colon.&lt;/p&gt;
&lt;p&gt;Is this the best solution? Probably not, but it&amp;rsquo;s getting the job done in my situation. If I ran into issues, my next attempt would be to get the index of every colon in the entire string and then replace the very last one with nothing.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Python&#39;s Beautiful Soup</title>
      <link>https://hugo.unusually.pink/pythons-beautiful-soup/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/pythons-beautiful-soup/</guid>
      <description>In my last post, I more or less just complained about what a dumpster fire developing anything for Twitter is. Originally, though, the post was intended to be about what I was developing for Twitter. It’s nothing amazing or even complicated, but it was a fun learning experience… Twitter itself not withstanding. I made a Twitter bot tweeting different shades of pink each day. Since that’ll most likely seem nonsensical to most people, let me explain.</description>
      <content>&lt;p&gt;In my &lt;a href=&#34;https://unusually.pink/twitter-development-impressions/&#34;&gt;last post&lt;/a&gt;, I more or less just complained about what a dumpster fire developing anything for Twitter is. Originally, though, the post was intended to be about &lt;em&gt;what&lt;/em&gt; I was developing for Twitter. It’s nothing amazing or even complicated, but it was a fun learning experience… Twitter itself not withstanding. I made a Twitter bot tweeting different shades of pink each day. Since that’ll most likely seem nonsensical to most people, let me explain.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;A little over a year ago, a friend and I started a podcast. I won’t go into the backstory of why we named it what we did, but the name of the podcast revolved around the color pink due to an inside joke between my friend and I. We ended up publishing 21 episodes in the span of a year before we decided to stop it. I had moved about an hour away from where I previously lived for a new job, so recording in-person involved a decent bit of travel for one of us. Then the coronavirus pandemic really started to take off in my country, and given what a dumpster fire trying to record a podcast remotely is, my friend and I jointly decided to shutter the podcast. It was a fun experience, but nothing either of us were really wanting to keep putting time and money into. As is typically the case, we reached this conclusion just a month after the hosting for both the podcast and our website renewed. Go figure.&lt;/p&gt;
&lt;p&gt;That being said, we had set up social media for the podcast, and that social media was now doing exactly nothing. While I didn’t want to do anything with the Facebook or Instagram accounts that my co-host ran (you couldn’t pay me to touch a Facebook property), I thought about what I could do with the lingering Twitter account. I eventually decided to make a simple bot that would tweet a different shade of the color pink each day.&lt;/p&gt;
&lt;h2 id=&#34;python-and-beautiful-soup&#34;&gt;Python and Beautiful Soup&lt;/h2&gt;
&lt;p&gt;As I &lt;a href=&#34;https://unusually.pink/twitter-development-impressions/&#34;&gt;mentioned previously&lt;/a&gt;, the actual code to post to Twitter ended up being extremely simple. I just used the &lt;a href=&#34;https://github.com/ryanmcgrath/twython&#34;&gt;Twython&lt;/a&gt; library to do the heavy lifting. What ended up being more interesting was how to create the database of colors I would use. After all, I don’t personally know that many different shades fo pink, and I wanted to include the RGB and hex color codes for each shade in the daily post. I basically needed a repository of shades of pink. After some DuckDuckGo-fu, I eventually found &lt;a href=&#34;https://html-color.codes/pink#:~:text=Pink%20Color%20Codes%3A%20colors%20shown%20are%20similar%20to,palevioletred%3A%20%23db7093%20%2F%20rgb%28219%2C112%2C147%29%20deeppink%3A%20%23ff1493%20%2F%20rgb%28255%2C20%2C147%29&#34;&gt;a page that included not just the RGB and hex color codes, but also a &lt;em&gt;name&lt;/em&gt;&lt;/a&gt;. It was exactly what I needed.&lt;/p&gt;
&lt;p&gt;The only problem was how to get the information from that page into something I could use in my script for the bot. My immediate thought was to copy and paste all of the information, but along with being error-prone over hundreds of shades, that’s also insanely tedious. In a shell script, something like &lt;code&gt;xmllint&lt;/code&gt; would fit the bill. Since I was already working in Python, though, I decided to use &lt;a href=&#34;https://pypi.org/project/beautifulsoup4/&#34;&gt;Beautiful Soup&lt;/a&gt;. I had actually used Beautiful Soup one time before on a project years ago where I admittedly didn’t really know Python and most definitely didn’t understand what I was doing with Beautiful Soup; I just ended up copying and pasting a bunch of code from the Internet until things worked the way I wanted.&lt;/p&gt;
&lt;p&gt;This time, I took just a little time to read the documentation for Beautiful Soup and understand what I was actually doing. The crux of my script comes down to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;divisions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color-inner&amp;#34;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gets me each of the &lt;code&gt;div&lt;/code&gt; groupings for a color. With each of those groupings defined, it was then simple to get the name, hex, and RGB information I needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; division &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; divisions:
    color_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; division&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color-sub&amp;#34;&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()
    color_hex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; division&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color-id&amp;#34;&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()
    color_rgb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; division&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color-rgb&amp;#34;&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of trying to copy everything by hand, I had a working script to get all of the colors without needing to worry about human error. Plus, if the source website adds any new colors it’s trivial to re-run the script and get an updated list. I ended up making a map for each color and adding all of the maps to a list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;rows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: color_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hex&amp;#34;&lt;/span&gt;: color_hex, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rgb&amp;#34;&lt;/span&gt;: color_rgb})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I wrapped it all up at the end by exporting the list of maps to a JSON file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pinks.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
   json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(all_colors, outfile)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My other script which actually pushes the post to Twitter ingests this JSON file and then selects a random shade from it.&lt;/p&gt;
&lt;h2 id=&#34;twitter-still-sucks&#34;&gt;Twitter Still Sucks&lt;/h2&gt;
&lt;p&gt;As if further proof was needed that Twitter is garbage, though, I found myself simultaneously amused and irritated just a few days ago when I saw that a daily post had not been completed. When logging into the account for the bot, I received a notification that the account had been flagged for “suspicious activity”, and I had to walk through a verification process before the account could post again. It’s amazing to me that a platform which tolerates the most hateful and dangerous rhetoric chooses to flag a clear bot that makes a single post each day with details on a different shade of the color pink as “suspicious.” It’s just further proof that Twitter really isn’t worth anyone’s time at this point.&lt;/p&gt;
&lt;p&gt;My latest project, though, involves pushing data to Mastodon instead of Twitter. This post will serve as the first test of it, so assuming everything works look for a post on that in the near future.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Twitter Development Impressions</title>
      <link>https://hugo.unusually.pink/twitter-development-impressions/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/twitter-development-impressions/</guid>
      <description>I recently had an idea to turn the Twitter account for my defunct podcast into a Twitter bot posting a new shade of pink every day; it makes sense because the podcast and Twitter account were centered around the color pink. I didn’t really think anyone would care about this particular bot, but it seemed like a fun project idea to work on. It ended up being an interesting learning experience, but not at all for the reasons I actually expected.</description>
      <content>&lt;p&gt;I recently had an idea to turn the Twitter account for my defunct podcast into a Twitter bot posting a new shade of pink every day; it makes sense because the podcast and Twitter account were centered around the color pink. I didn’t really think anyone would care about this particular bot, but it seemed like a fun project idea to work on. It ended up being an interesting learning experience, but not at all for the reasons I actually expected.&lt;/p&gt;
&lt;h2 id=&#34;developer-account&#34;&gt;Developer Account&lt;/h2&gt;
&lt;p&gt;Getting a Twitter developer account can be either really simple or really irritating, and there’s no discernable difference that dictates what experience you’ll get. I went to the &lt;a href=&#34;https://developer.twitter.com/en&#34;&gt;Developer portal&lt;/a&gt; and registered for a developer account with my normal Twitter account. This account is clearly me IRL; my name is in it, I have a photo of myself on the account, it links to my personal website, and the post history clearly indicates that the account is a person rather than a bot. As part of registering for the account, I had to describe what I was going to create. I honestly stated that I was just going to create a bot that would tweet a shade of pink each day. Twitter asks questions such as if you plan to export data out of the service, if you plan to display information posted to Twitter outside of Twitter, etc. I answered “no” to all of these questions since I wasn’t pulling any data out of the service. I just needed to post.&lt;/p&gt;
&lt;p&gt;After I completed the registration form, I received a message that my account was under review and I would receive a notification when that review was completed. I was a little bummed since it happened to be a long weekend for me, and I was hoping that this project would give me something to fill the time. I was hopeful maybe the review would be completed quickly. I was wrong. It took just shy of 2 weeks before the review was completed. I had almost forgotten about the whole thing since I’ve been trying to stay off of Twitter as of late, but then I got an email telling me I was allowed in. Wild.&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Handling &lt;a href=&#34;https://docs.joinmastodon.org/methods/apps/oauth/&#34;&gt;authentication with Mastodon&lt;/a&gt; is a relatively simple, straightforward process if you’ve done this sort of thing with… pretty much any API. It’s a little different than the type of things I do for work since creating a client means people &lt;em&gt;other&lt;/em&gt; than the person writing the code can be authenticating, but it still makes sense and is well documented. On the other hand, &lt;a href=&#34;https://developer.twitter.com/en/docs/basics/authentication/oauth-1-0a&#34;&gt;authenticating through Twitter&lt;/a&gt; is a complete nightmare. Outside of the specifics of authentication, everything in Twitter’s documentation seems aimed at keeping each individual page as short as possible. As a result, every page links to numerous other pages, and you end up having dozens of browser tabs open just to have some clue as to what your complete workflow looks like. For the OAuth 1.0a option, which is &lt;em&gt;the&lt;/em&gt; option to use if you need an account other than the registered developer account to leverage an application, they recommend strongly against making the &lt;a href=&#34;https://awk.ninja/posts/groovy_jwt/&#34;&gt;JWT&lt;/a&gt; yourself in favor of leveraging a library… but they don’t actually share any of the particulars about their JWT setup… or even &lt;em&gt;call&lt;/em&gt; it a JWT. You very clearly get the impression that Twitter doesn’t want anyone actually using their API. Crazy.&lt;/p&gt;
&lt;p&gt;After seeing the poor documentation, I abandoned my ideas of making my bot in Rust or maybe Bash, and instead just decided to use Python with the &lt;a href=&#34;https://github.com/ryanmcgrath/twython&#34;&gt;twython library&lt;/a&gt;. I’ve manually parsed together enough JWTs that I didn’t think I cared enough to do it again for this. Seeing the workflow for twython showcased the next bit of crazy, though, which is that the &lt;a href=&#34;https://developer.twitter.com/en/docs/basics/authentication/oauth-1-0a/obtaining-user-access-tokens&#34;&gt;authentication workflow sends the OAuth token to the callback URL&lt;/a&gt;. I basically needed to set up something completely different with an HTTP listener for the OAuth token so that I could move forwad with authentication. That was &lt;em&gt;entirely&lt;/em&gt; more than I wanted to put into this simple bot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The craziness of this makes me still think I’m not actually understanding the setup properly. I did verify, though, that the response received from where I was running the code included just the HTTP status, so the information is not coming back to the sender by default. Likewise, I couldn’t open my application up to other users without giving a callback URL, so omitting that wasn’t an option, either. Hit me up on Mastodon if I’m just dumb and there’s a reasonable way to handle this that I’m misunderstanding.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;registering-another-developer-account&#34;&gt;Registering Another Developer Account&lt;/h2&gt;
&lt;p&gt;At this point I realized that I really should have just registered for a developer account with the account I was planning to use with the bot. I started that process again fully expecting to wait another two weeks. I filled out all of the same information during the registration process, but this time when I completed the form I was immediately kicked over to the developer portal to start working on whatever I needed.&lt;/p&gt;
&lt;p&gt;I’m still amazed that while the registration for my actual account that I use as a human being, I had to wait two weeks to get developer access. When I registered witht the account that had been used for my podcast, though, I was allowed access sans review. The podcast Twitter account generally had nothing posted to it other than the automatic posts from &lt;a href=&#34;https://www.squarespace.com/&#34;&gt;Squarespace&lt;/a&gt;, had the podcast logo as the profile picture, had no website linked, and quite clearly was not a person… yet that’s the account that got in right away. Okie dokie!&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;Since I now had the account I was planning to post from in the developer portal, I could spin up my OAuth token directly from there in my browser as opposed to having to leverage 3-legged OAuth to a callback URL. As I started working on the code, though, I quickly realized that the script for the bot to post was going to be insanely easy. Instead, the much more interesting part of the code was the script I wrote to make a little local repository of information on shades of pink that was completely unrelated to Twitter. I had originally planned to cover that in this post, but since this ended up being longer than I expected that’s what I’ll cover next time around.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Deciphering the Office 365 PSTN Usage Report</title>
      <link>https://hugo.unusually.pink/deciphering-the-office-365-pstn-usage-report/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/deciphering-the-office-365-pstn-usage-report/</guid>
      <description>Background Last week I received a bit of a mystifying alert from Office 365 letting me know that our pool of PSTN dial-out minutes for the month had been 80% consumed. This was mystifying due to the fact that as someone who has managed O365 for nearly a decade I didn&amp;rsquo;t realize there was a pool of minutes. PSTN (Public Switched Telephone Network) had to be related in some way or another to the capability my company has purchased from Office 365 to have a dial-in option added to our Microsoft Teams meetings.</description>
      <content>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Last week I received a bit of a mystifying alert from Office 365 letting me know that our pool of PSTN dial-out minutes for the month had been 80% consumed. This was mystifying due to the fact that as someone who has managed O365 for nearly a decade I didn&amp;rsquo;t realize there &lt;em&gt;was&lt;/em&gt; a pool of minutes. PSTN (Public Switched Telephone Network) had to be related in some way or another to the capability my company has purchased from Office 365 to have a dial-in option added to our Microsoft Teams meetings. Any meeting we create has a dial-in number so that anyone who has a poor data connection can still dial a telephone and at least join the audio portion of the meeting.&lt;/p&gt;
&lt;p&gt;While the main function of the Audioconferencing license is to provide that dial-&lt;strong&gt;in&lt;/strong&gt; functionality, dial-&lt;strong&gt;out&lt;/strong&gt; options also exist. For example, while in a Teams meeting if you realize you need someone else to participate you have the option to have Teams dial that person if you provide a phone number. Likewise, if you&amp;rsquo;re struggling in a low-coverage area you can tap a button in the Teams mobile app to have the service call you.&lt;/p&gt;
&lt;p&gt;Sure enough (say what you want about Microsoft, but their documentation for Office 365 tends to be extremely good), I found the &lt;a href=&#34;https://docs.microsoft.com/en-us/microsoftteams/audio-conferencing-subscription-dial-out&#34;&gt;official confirmation&lt;/a&gt;. It just seems like a bit of a forgotten caveat considering you have to go to the legacy Skype portal to see it; the numbers are completely absent from the Teams portal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can monitor the usage against your dial-out minute pool in the &amp;ldquo;legacy&amp;rdquo; Skype for Business Admin Center. In the Microsoft Teams Admin Center, navigate to Legacy portal &amp;gt; Reports &amp;gt; PSTN Minute Pools. The Zone A dial-out minute pool will be labeled in the report as &amp;ldquo;Outbound Calls to Zone A Countries.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;digging-in&#34;&gt;Digging In&lt;/h2&gt;
&lt;p&gt;When I checked the total number of minutes we had in our pool, I did some quick math to confirm that we were allotted 60 dial-out minutes per Audioconferencing license that was &lt;strong&gt;assigned&lt;/strong&gt;; purchased licenses that were not yet assigned to a user didn&amp;rsquo;t factor into the equation.&lt;/p&gt;
&lt;p&gt;I was still a bit stumped as to &lt;em&gt;who&lt;/em&gt; would be eating through our minutes, though, considering I figured dial-out to be a pretty niche feature. Luckily, the reporting section of the legacy Skype portal gives a report of how the minutes are used. There&amp;rsquo;s even an option to export it for a particular time range. I exported the data on the month-to-date in my tenant, which saved a .csv file. Opening it up showed me that there was still some work to do. The report listed dates for each call, the UPN (userPrincipalName) of the user, a source number, a destination number, and the duration of the call&amp;hellip; in seconds. It also included both the dial-out information I wanted &lt;strong&gt;and&lt;/strong&gt; the dial-in information that I don&amp;rsquo;t care about since that is unlimited. Ick.&lt;/p&gt;
&lt;p&gt;I first fired up my text editor and put together a Python script. It weeded out any of the dial-in entries. For all of the dial-out entries, it added the UPN of the user to a list of dictionaries with a count of the seconds for their call. For each entry in the report, it was checked against my list of dictionaries, one for each user. If the user already had a dictionary in the list, the duration of that call was added to the user&amp;rsquo;s existing total. If the user wasn&amp;rsquo;t in the list yet, the script would append a new dictionary to the list for that user with the duration of the current call serving as their starting point. So the key for each dictionary was the UPN and the value was the number of seconds. Each dictionary in the list only needed one key-value pair.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sharing this initial version of the script because while the code worked perfectly, the logic was flawed. The report actually showed that &lt;a href=&#34;https://instagram.com/craftbrewgeek&#34;&gt;Craft Brew Geek&lt;/a&gt; was using &lt;em&gt;significantly&lt;/em&gt; more minutes than anyone else. While I was aware of the fact that he was frequently using his phone for Teams meetings while everyone is under quarantine due to his fixed-line provider having issues, I thought he was doing that via LTE rather than PSTN. He described his method of joining meetings to me, and he was literally tapping the &amp;ldquo;Join&amp;rdquo; button from the Teams app on his phone. To verify this was using LTE data, I even noted the LTE data consumed by the Teams app on my phone for the month, did a 10 minute Teams audio-only call with Brandi by joining the same way Craft Brew Geek was, and then checking the data usage again. Sure enough, it went up by 10 MB; this process wasn&amp;rsquo;t touching PSTN at all. I made doubly sure by assigning a policy to just my O365 account in Teams to block dial-out. I verified that tapping the &amp;ldquo;Join&amp;rdquo; button on my phone still worked fine while opting for the explicit &amp;ldquo;Dial me&amp;rdquo; option ended in an error.&lt;/p&gt;
&lt;p&gt;The report also struck me as odd because it only listed 2 days for Craft Brew Geek, despite the fact that I know he&amp;rsquo;s been joining Teams calls the same way for 2 months now while we all work from home. I went back to the data this time paying attention to the source and destination numbers listed in the report. I noticed for all of Craft Brew Geek&amp;rsquo;s entries, the number listed as the source number was the number from Microsoft that we selected as the &amp;ldquo;default&amp;rdquo; number for our tenant due to it having the closest proximity to the majority of our employees. The destination number was the same every time as well, but it &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; Craft Brew Geek&amp;rsquo;s number. It was the number for a different employee in our company.&lt;/p&gt;
&lt;p&gt;This is when I finally realized that the UPN listed in the report is &lt;strong&gt;not&lt;/strong&gt; necessarily the UPN of the user who consumed the minutes; that wouldn&amp;rsquo;t even necessarily make sense considering you could have a meeting dial-out to an external participant (e.g. if you were using Teams to conduct an interview) or you may not have any telephone information stored for your users in Office 365. Instead, the UPN listed in the report is who &lt;strong&gt;scheduled&lt;/strong&gt; the meeting.&lt;/p&gt;
&lt;p&gt;Realizing that my logic was flawed due to the ambiguity of the report, I modified my script and replaced the UPN as the key in each dictionary with the destination telephone number. What I ended up with is &lt;a href=&#34;https://gist.github.com/JFFail/a2da00a7c379d2805825a27a07bc89b4&#34;&gt;this Python script&lt;/a&gt;. It&amp;rsquo;s quick and dirty since I wasn&amp;rsquo;t trying anything fancy; I just wanted a quick, sorted listing of our dial-out usage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; csv

usage\_tracker \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

report\_file \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./pstn\_report.csv&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(report\_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, newline\&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; csvfile:
    reader \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DictReader(csvfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; reader:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row\[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Call Type&amp;#34;&lt;/span&gt;\] \&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;conf\_out&amp;#34;&lt;/span&gt;:
            seconds \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(row\[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duration Seconds&amp;#34;&lt;/span&gt;\])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row\[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Destination Number&amp;#34;&lt;/span&gt;\] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; usage\_tracker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                usage\_tracker\[row\[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Destination Number&amp;#34;&lt;/span&gt;\]\] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; seconds
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                usage\_tracker\[row\[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Destination Number&amp;#34;&lt;/span&gt;\]\] \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seconds

usage\_tuple\_list \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(usage\_tracker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items(), key\&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x\[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;\], reverse\&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

total\_minutes \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; element &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; usage\_tuple\_list:
    current\_minutes \&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round(element\[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;\] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
    total\_minutes &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; current\_minutes
    print(element\[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;\] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(current\_minutes))

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;============================&amp;#34;&lt;/span&gt;)
print(total\_minutes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, all I needed to do was figure out who the telephone numbers my script spit out belonged to. Our company maintains a listing of numbers for each employee, so it was simple for me to search it for each entry. This showed us that one employee who was using dial-out heavily for himself as a matter of convenience during the quarantine was using basically all of our minutes.&lt;/p&gt;
&lt;h2 id=&#34;aftermath&#34;&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;The main takeaways from this incident are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be mindful of the PSTN dial-out pool in Office 365 if you&amp;rsquo;re doing audioconferencing. I hadn&amp;rsquo;t thought of it because the O365 instance I managed previously was absolutely massive; this means we had significantly more minutes in the pool for a feature most people never use since the size of the pool is based on license assignment. Keep tabs on it in a smaller organization, especially when everyone is suddenly working remotely.&lt;/li&gt;
&lt;li&gt;The report from the legacy Skype admin center is pretty confusing, and it&amp;rsquo;s easy to mistake who is consuming dial-out minutes. Keep tabs on the destination number(s) in the report to find out who is actually doing it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it! Stay pink (from a socially acceptable distance, of course.)&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Sorting IP Addresses With PowerShell</title>
      <link>https://hugo.unusually.pink/sorting-ip-addresses-with-powershell/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/sorting-ip-addresses-with-powershell/</guid>
      <description>I was recently attempting to sort a list of IP addresses that I had in a text file. PowerShell is awesome at sorting, so I figured I would use it given that I had nearly 2000 of them. I initially just tried to pipe the contents of the file to the Sort-Object cmdlet:
Get-Content -Path .\ipListFixed.txt | Sort-Object
The results were, suffice to say, lackluster. I ended up with something like this:</description>
      <content>&lt;p&gt;I was recently attempting to sort a list of IP addresses that I had in a text file. PowerShell is awesome at sorting, so I figured I would use it given that I had nearly 2000 of them. I initially just tried to pipe the contents of the file to the &lt;strong&gt;Sort-Object&lt;/strong&gt; cmdlet:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-Content -Path .\ipListFixed.txt | Sort-Object&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The results were, suffice to say, lackluster. I ended up with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10.1.69.1
10.1.69.12
10.1.69.148
10.1.69.149
10.1.69.17
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gross, right? Obviously 10.1.69.17 shouldn’t be after 10.1.69.148 or .149. The issue is that the whole octet isn’t being considered. It’s being sorted like they’re just strings rather than IP addresses; 7 is bigger than 4 so they’re sorted accordingly. PowerShell isn’t really comparing the numbers of 17 to 148, for example, to realize that 17 is actually smaller.&lt;/p&gt;
&lt;p&gt;It makes sense; PowerShell can’t assume that the value is an IP address so it’s treating the value like a string instead. This means that the key is to &lt;em&gt;tell&lt;/em&gt; PowerShell it’s an IP address so that PowerShell can adjust the way it does sorting. This is possible by casting the values as the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.version?view=netcore-2.2&#34;&gt;.NET Version class&lt;/a&gt;. Since I happened to be pulling the IPs from a file, I did the casting within the &lt;strong&gt;-Property&lt;/strong&gt; parameter that I added to the &lt;strong&gt;Sort-Object&lt;/strong&gt; cmdlet:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-Content -Path .\ipListFixed.txt | Sort-Object -Property { [System.Version]$_ }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This yields &lt;em&gt;significantly&lt;/em&gt; better results:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10.1.69.1
10.1.69.2
10.1.69.12
10.1.69.17
10.1.69.29
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Stay pink!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>PowerShell: Export Non-Standard and Multi-Value AD Attributes to CSV</title>
      <link>https://hugo.unusually.pink/powershell-export-non-standard-and-multi-value-ad-attributes-to-csv/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/powershell-export-non-standard-and-multi-value-ad-attributes-to-csv/</guid>
      <description>I’ve recently been spending a lot of my time at work doing PowerShell scripting for a project that’s currently underway. While working on a bit of code late last week I ran into two interesting problems that I had yet to really stumble across despite doing heavy PowerShell scripting against Active Directory for nearly a decade now.
Exporting Non-standard Attributes To CSV My first issue was that I needed to export some non-standard attributes from contact objects in AD to a .</description>
      <content>&lt;p&gt;I’ve recently been spending a lot of my time at work doing PowerShell scripting for a project that’s currently underway. While working on a bit of code late last week I ran into two interesting problems that I had yet to really stumble across despite doing heavy PowerShell scripting against Active Directory for nearly a decade now.&lt;/p&gt;
&lt;h2 id=&#34;exporting-non-standard-attributes-to-csv&#34;&gt;Exporting Non-standard Attributes To CSV&lt;/h2&gt;
&lt;p&gt;My first issue was that I needed to export some non-standard attributes from contact objects in AD to a .csv file. When I say “non-standard” I don’t mean that we’ve done a custom schema extension or anything like that. Instead, I simply mean that the AD PowerShell module only wants to include certain attributes when exporting AD objects to a .csv file. For example, if I run &lt;strong&gt;Get-ADObject&lt;/strong&gt; &lt;strong&gt;-Properties *&lt;/strong&gt; against a particular contact object and simply let the output dump to my shell, I see all of the attributes I expect including stuff like &lt;strong&gt;givenName&lt;/strong&gt; and &lt;strong&gt;sn&lt;/strong&gt;. However, if I run the exact same cmdlet but pipe the result to &lt;strong&gt;Export-Csv&lt;/strong&gt; rather than sending it to the shell I will not have all the same attributes; ones like &lt;strong&gt;givenName&lt;/strong&gt; and &lt;strong&gt;sn&lt;/strong&gt; will now be missing. That’s a problem.&lt;/p&gt;
&lt;h2 id=&#34;storing-mutli-value-attributes-in-a-csv&#34;&gt;Storing Mutli-Value Attributes In a CSV&lt;/h2&gt;
&lt;p&gt;The other problem was that one of the attributes I needed is &lt;strong&gt;proxyAddresses&lt;/strong&gt;. This is a multi-value attribute as contacts could very likely have multiple proxy addresses associated with a particular mailbox. They may have an alias, x500 addresses, etc. If you use PowerShell to pull this information from AD and dump it to the screen you’ll see the expected proxy address information. If you call &lt;strong&gt;GetType()&lt;/strong&gt; on the &lt;strong&gt;proxyAddresses&lt;/strong&gt; attribute you’ll see it listed as an array. That’s why if you export a contact to a .csv file and include &lt;strong&gt;proxyAddresses&lt;/strong&gt;, the value for each contact in that particular column will simply read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft.ActiveDirectory.Management.ADPropertyValueCollection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PowerShell isn’t sure what to do with a multi-value attribute as far as the .csv file goes so it stores the data type. This is also a problem!&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;My solution to this was the following. Note that it’ll be easier to view &lt;a href=&#34;https://gist.github.com/JFFail/6dd9acb0020845a905eeda8fbc8de1a7&#34;&gt;the Gist for it&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Get the objects with the required attributes and storing proxyAddresses properly in the .csv file.
Get-ADObject -Filter { objectClass -eq &amp;quot;contact&amp;quot; } -Server myserver.mydomain.net -SearchBase &amp;quot;OU=Contacts,DC=mydomain,DC=net&amp;quot; -SearchScope OneLevel -Properties name,givenName,sn,displayName,telephoneNumber,proxyAddresses,targetAddress,mail,mailNickname,company,department,l,physicalDeliveryOfficeName,postalCode,st,streetAddress,title | Select-Object name,givenName,sn,displayName,telephoneNumber,targetAddress,mail,mailNickname,company,department,l,physicalDeliveryOfficeName,postalCode,st,streetAddress,title,@{name=&amp;quot;proxyAddresses&amp;quot;; expression={$_.proxyAddresses -join &amp;quot;;&amp;quot;}} | Export-Csv -Path .\sample.csv -Encoding ASCII -Append -NoClobber -NoTypeInformation

# Shows how to then use the proxyAddresses attribute in the future.
$allContacts = Import-Csv -Path .\sample.csv
foreach($singleContact in $allContacts) {
    $proxyAddresses = $singleContact.proxyAddresses.Split(&amp;quot;;&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first thing I needed was to get the properties I actually needed as opposed to just the ones PowerShell felt like including due to the object type. The solution was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Specify all of the attributes I wanted in &lt;strong&gt;-Properties&lt;/strong&gt; to ensure they would be available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipe the AD object to &lt;strong&gt;Select-Object&lt;/strong&gt; and then re-specify each of the properties I wanted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This works because PowerShell is selecting the attributes to include in the .csv file based on the type of object. &lt;strong&gt;Select-Object&lt;/strong&gt; takes whatever comes through the pipeline, though, and makes a brand new, generic object from it. That object will include any properties from that original object that you specify, hence why I tell it the exact listing of properties that I need again.&lt;/p&gt;
&lt;p&gt;This leads to the solution to the second problem which is what to do for &lt;strong&gt;proxyAddresses&lt;/strong&gt;. PowerShell allows for the use of an expression to parse together a new property. In this instance the expression is to take the existing &lt;strong&gt;proxyAddresses&lt;/strong&gt; array and &lt;strong&gt;-join&lt;/strong&gt; it into a string. Each of the items in the array are separated by a semicolon. If a contact has the following proxy addresses, for example:&lt;/p&gt;
&lt;p&gt;SMTP:pretty@unusually.pink
smtp:awesome@unusually.pink&lt;/p&gt;
&lt;p&gt;Then the property in the .csv file will be stored as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SMTP:pretty@unusually.pink;smtp:awesome@unusually.pink
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could pick any character for the delimiter that you want as long as it isn’t used in other data that you’re storing.&lt;/p&gt;
&lt;p&gt;In this instance my goal was to take the exported data, re-import it, and then create contacts in a different AD forest. When creating a new object AD is expecting an array for the &lt;strong&gt;proxyAddresses&lt;/strong&gt; attribute. A string with a random delimiter won’t do it. That’s where the second part of the example comes into play. If I’m looping through all of the data stored in the .csv file I can recreate the array of proxy addresses by splitting the string on my delimiter (in this case a semicolon) and assigning the result to a variable. That variable will be an array which can then be used to popular &lt;strong&gt;proxyAddresses&lt;/strong&gt; when running &lt;strong&gt;New-ADObject&lt;/strong&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
