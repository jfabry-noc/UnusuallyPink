<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>https on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/https/</link>
    <description>Recent content in https on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/https/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adding SSH To GitHub</title>
      <link>https://hugo.unusually.pink/posts/adding-ssh-to-github/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/posts/adding-ssh-to-github/</guid>
      <description>Between the Thanksgiving holiday and some shifting priorities when I got back to work, I hadn&amp;rsquo;t made any new commits to my GitHub account for about 10 days. This meant that I didn&amp;rsquo;t have any new posts to my recently-launched GitCommit site that makes a bit of a microblog from my commit messages. To be honest, putting it together was really an excuse to have something up at the domain I bought, but I really like the way it turned out.</description>
      <content>&lt;p&gt;Between the Thanksgiving holiday and some shifting priorities when I got back to work, I hadn&amp;rsquo;t made any new commits to my &lt;a href=&#34;https://github.com/jfabry-noc/&#34;&gt;GitHub account&lt;/a&gt; for about 10 days. This meant that I didn&amp;rsquo;t have any new posts to my recently-launched &lt;a href=&#34;https://gitcommit.gay&#34;&gt;GitCommit&lt;/a&gt; site that makes a bit of a microblog from my commit messages. To be honest, putting it together was really an excuse to have &lt;em&gt;something&lt;/em&gt; up at the domain I bought, but I really like the way it turned out. After making a fresh commit yesterday, though, I received an email from GitHub telling me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You recently used a password to access the repository at jfabry-noc/OxidizedBackup with git using git/2.25.1.&lt;/p&gt;
&lt;p&gt;Basic authentication using a password to Git is deprecated and will soon no longer work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also included a link to their &lt;a href=&#34;https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/&#34;&gt;authentication requirements documentation&lt;/a&gt;. On the whole it made sense to me; I typically would just have &lt;code&gt;git&lt;/code&gt; remember my credentials so that I never had to enter them. In the new setup, I would &lt;em&gt;have&lt;/em&gt; to enter them, though I could configure how long they would remain cached. On the surface, this didn&amp;rsquo;t bother me, and I went about my day making several additional commits beyond the first. Later on, though, I realized that my new commits weren&amp;rsquo;t appearing on the GitCommit site. The site is hosted by &lt;a href=&#34;https://netlify.com&#34;&gt;Netlify&lt;/a&gt;, and it works by polling my GitHub account via a &lt;code&gt;cron&lt;/code&gt; job every 4 hours (I&amp;rsquo;m hoping to eventually update it to use webhooks to have commit information pushed to it, but I haven&amp;rsquo;t had an opportunity yet.) When a new commit happens, my code pulls the repository, the commit message, and the timestamp. It then updates the HTML and automatically makes an &lt;em&gt;additional&lt;/em&gt; commit on its own repository (yes, I included code to avoid an endless repost loop.) Netlify has been configured to look at only the &lt;strong&gt;html&lt;/strong&gt; directory in the repository, dynamically updating whenever a new change is commited to that directory, much like how &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; or any other CI web hosting works.&lt;/p&gt;
&lt;p&gt;Since my new commits weren&amp;rsquo;t showing up, I first checked the &lt;a href=&#34;https://github.com/jfabry-noc/GitCommit&#34;&gt;GitHub repo for GitCommit&lt;/a&gt;. No new HTML changes had been commited to it. Next, I went to the VPS which executes the &lt;code&gt;cron&lt;/code&gt; job. For my own sanity, I long ago learned that I should implement some type of logging for any code that I plan to run automatically so that I can easily troubleshoot it during this exact situation. Checking the log file, I saw that my code &lt;em&gt;did&lt;/em&gt; successfully find the new commits and update the appropriate HTML file. It was able to make the expected commit, and running &lt;code&gt;git status&lt;/code&gt; even confirmed that my local repository was ahead of the remote by 2 commits. However, running the following didn&amp;rsquo;t work to push my changes up to GitHub so that Netlify could see them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suddenly it clicked, and I realized that the change from earlier in the day was the culprit; my code could no longer &lt;code&gt;git push&lt;/code&gt; because that was now prompting for a password that would never be typed given that the code was executed by &lt;code&gt;cron&lt;/code&gt;. To confirm, I manually executed the script from my SSH session and saw the password prompt appear. Ick.&lt;/p&gt;
&lt;p&gt;Fortunately, I realized that I wouldn&amp;rsquo;t need a password if I was syncing my repository via SSH rather than HTTPS. SSH would allow me to use certificates instead. First, I had to generate a new public-private key pair with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh-keygen -t ed25519 -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email@email.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah, I&amp;rsquo;m not telling you my email address. I&amp;rsquo;ll give you a hint; it&amp;rsquo;s &lt;a href=&#34;mailto:something@unusually.pink&#34;&gt;something@unusually.pink&lt;/a&gt;. Good luck. The above command asked for a couple of things such as the location where I wanted to store the keys and if I wanted to add a password for accessing them. I just took the defaults. Next up, I had to start a background SSH agent and tell it to use the private key I had just generated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ssh-add ~/.ssh/id&lt;span style=&#34;color:#ae81ff&#34;&gt;\_&lt;/span&gt;ed25519
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With everything set on the client side, I now had to tell GitHub to use my public key for any SSH interactions. They have &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-ssh-key-to-y&#34;&gt;very solid documentation&lt;/a&gt; available with the exact steps. Just be sure you actually copy the content of the &lt;strong&gt;public&lt;/strong&gt; key into GitHub rather than the private key. GitHub won&amp;rsquo;t accept the private key because the formatting is wrong, but the very fact that I pasted it there made me paranoid enough to regenerate the pair and do it again.&lt;/p&gt;
&lt;p&gt;To test things out, I tried to clone one of my private repositories via the SSH link, which you can select from the tabs when trying to clone anything from GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/github_ssh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That worked successfully and verified that my keys were properly identifying me. The last step was to update the local repository for GitCommit to use a new URL for the remote repository. Regardless of whether I&amp;rsquo;m using HTTPS or SSH, I still run &lt;code&gt;git push origin main&lt;/code&gt; in order to sync it to the remote; the configuration of the local repository is what specifies which URL is used. In order to flip mine from HTTPS to SSH, I simply ran the following from my local directory for GitCommit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git remote set-url origin git@github.com:jfabry-noc/GitCommit.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, I re-ran my script and &lt;code&gt;git push&lt;/code&gt; was able to successfully push my code to the remote without any interaction. After working through many commits today, I verified that my website was updated as expected.&lt;/p&gt;
&lt;p&gt;As a bonus note, astute readers may recall the issues I had following the published steps to sync the &lt;a href=&#34;https://unusually.pink/all-dracula-everything/&#39;&#34;&gt;Dracula theme for git&lt;/a&gt;. This was the exact same scenario where the instructions assumed that SSH was in use rather than HTTPS.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fixing Let&#39;s Encrypt Certificates After You Delete Them Like An Idiot</title>
      <link>https://hugo.unusually.pink/posts/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/posts/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</guid>
      <description>In Episode 11, I had discussed how I run a couple of my websites on a Linux server running Nginx as the web server and encrypting connections to them via Let’s Encrypt certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via certbot. If you don’t recall the episode, I had taken my web server which was only running laifu.moe and added awk.ninja to it so that I had both sites running on the same server.</description>
      <content>&lt;p&gt;In &lt;a href=&#34;https://www.unusually.pink/podcast/episode-11-attach-all-the-storage&#34;&gt;Episode 11&lt;/a&gt;, I had discussed how I run a couple of my websites on a Linux server running &lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; as the web server and encrypting connections to them via &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt; certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;certbot&lt;/a&gt;. If you don’t recall the episode, I had taken my web server which was only running &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt; and added &lt;a href=&#34;https://awk.ninja&#34;&gt;awk.ninja&lt;/a&gt; to it so that I had both sites running on the same server. When I added awk.ninja, I had to re-run certbot and get a certificate for it along with the certificate I had for laifu.moe. That’s where I messed up; I got tipped off when I received the following email from Let’s Encrypt letting me know that my certificate for laifu.moe was about to expire.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Your certificate (or certificates) for the names listed below will expire in 10 days (on 07 Jul 19 12:52 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.&lt;/p&gt;
&lt;p&gt;We recommend renewing certificates automatically when they have a third of their&lt;br&gt;
total lifetime left. For Let’s Encrypt’s current 90-day certificates, that means&lt;br&gt;
renewing 30 days before expiration. See&lt;br&gt;
&lt;a href=&#34;https://letsencrypt.org/docs/integration-guide/&#34;&gt;https://letsencrypt.org/docs/integration-guide/&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;laifu.moe&lt;br&gt;
&lt;a href=&#34;http://www.laifu.moe&#34;&gt;www.laifu.moe&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seemed odd to me since I knew I had a &lt;strong&gt;cron&lt;/strong&gt; job running to update the certificates. I checked the expiration for the certificate on laifu.moe and saw that it had nearly two months left on it. I checked the certificate applied to awk.ninja and saw the same thing. EXACTLY the same thing in fact. In double-checking the certificate on laifu.moe, I realized that the Common Name was for awk.ninja. I was using the awk.ninja certificate for &lt;em&gt;both&lt;/em&gt; of my sites. Oops. What happened was that when I added awk.ninja and re-ran &lt;strong&gt;certbot&lt;/strong&gt;, I got the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/FixingLetsEncryptCertificatesAfterYouDeleteThemLikeAnIdiot_certbot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;My thought at the time was that I needed to select ALL of the sites. In reality, this overwrote the configuration I already had on laifu.moe and applied the awk.ninja certificate to both sites. This is where I decided to be really stupid. I decided that I would delete the existing certificates, re-run &lt;strong&gt;certbot&lt;/strong&gt; twice (one for laifu.moe and once for awk.ninja), and then be done. I started off by deleting the awk.ninja certificate that was applied to both sites:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo certbot delete --cert-name awk.ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I did the same to delete the laifu.moe certificate. Then I tried to do a vanilla run of &lt;strong&gt;certbot&lt;/strong&gt; to get the menu in my screenshot above and individually configure each of my two sites. Instead of getting that menu, though, I received an error message that my sites were pointing to certificates that didn’t exist. &lt;strong&gt;certbot&lt;/strong&gt; then exited without giving me any further options. The problem is that my configuration files below still referenced the certificates that I just nuked. Oops.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/nginx/sites-available/awk.ninja
/etc/nginx/sites-available/laifu.moe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After thinking about it for a few seconds, it made sense; &lt;strong&gt;certbot&lt;/strong&gt; can’t know what’s going on and is expecting me to do some cleanup on the mess I made instead of making assumptions about whether or not I should still have certificates. To keep my life simple, I decided to go back to a clean slate on my &lt;strong&gt;sites-available&lt;/strong&gt; configurations since I knew that I could get &lt;strong&gt;certbot&lt;/strong&gt; to redo the configuration again as long as I could get it to successfully run. As a result, I just set the configurations for both laifu.moe and awk.ninja back to a super vanilla setup. Just &lt;strong&gt;%s/laifu.moe/awk.ninja/g&lt;/strong&gt; on the file below for what I configured on awk.ninja.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen [::]:80;

        root /var/www/laifu.moe/html;
        index index.html index.htm index.nginx-debian.html;

        server_name laifu.moe www.laifu.moe;

        location / {
                try_files $uri $uri/ =404;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once I had that done, I restarted nginx just to make sure it was working and I could hit port 80 for both sites.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that working, I was able to re-run &lt;strong&gt;certbot&lt;/strong&gt; and finally get the menu from my initial screenshot. I first configured a certificate for awk.ninja and its www variant. Once that was done, I ran &lt;strong&gt;certbot&lt;/strong&gt; one more time and walked through getting a certificate for laifu.moe and its www-variant. In both instances, I opted to have &lt;strong&gt;certbot&lt;/strong&gt; reconfigure the files in &lt;strong&gt;sites-available&lt;/strong&gt; to redirect all HTTP traffic for HTTPS. I restarted Nginx one more time and &lt;em&gt;finally&lt;/em&gt; I had everything configured the way I wanted with each site using its &lt;em&gt;own&lt;/em&gt; certificate.&lt;/p&gt;
&lt;p&gt;The moral of the story is to actually troubleshoot the problem instead of just starting off by deleting shit from your server. Also, try staying pink!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
