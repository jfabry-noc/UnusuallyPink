<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lets-encrypt on Unusually Pink</title>
    <link>https://hugo.unusually.pink/tags/lets-encrypt/</link>
    <description>Recent content in lets-encrypt on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021</copyright>
    <lastBuildDate>Sun, 20 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.unusually.pink/tags/lets-encrypt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub Pages Hosting</title>
      <link>https://hugo.unusually.pink/github-pages-hosting/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/github-pages-hosting/</guid>
      <description>As I had mentioned in my post about Dropbox Passwords, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them.</description>
      <content>&lt;p&gt;As I had mentioned in my &lt;a href=&#34;https://unusually.pink/dropbox-passwords/&#34;&gt;post about Dropbox Passwords&lt;/a&gt;, I&amp;rsquo;m looking to cut down on the number of services that I pay for each month. One of the areas I&amp;rsquo;ve decided to cut down on are my domains; I&amp;rsquo;m letting a few domains that I never ended up finding much of a use for expire rather than having them automatically renew. Some have been renewing like this for years just because I didn&amp;rsquo;t want to lose them for some reason despite never having any real use for them. With a decrease in my domains comes a decrease in websites, to the point where I started to wonder if I could get away with ditching my VPS. I had been using the same VPS for over 2 years, and it served me well. In a world with so many hosting options, though, it seemed overkill just to run 2 static websites, each of which were only a single page.&lt;/p&gt;
&lt;p&gt;One of my sites I placed on &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;. I&amp;rsquo;m not a fan of using Google products, but I&amp;rsquo;ve used Firebase previously (moving my website to an existing, stale Firebase project will be the topic of another post), and the free &lt;a href=&#34;https://firebase.google.com/pricing&#34;&gt;Spark plan&lt;/a&gt; gives me more than enough for a simple site with 1 GB of storage and 10 GB of egress traffic each month.&lt;/p&gt;
&lt;p&gt;I wanted to check out some different options for &lt;a href=&#34;https://jfabhd.com&#34;&gt;jfabhd.com&lt;/a&gt;, though. After recently reading one of &lt;a href=&#34;https://kevq.uk/static-site-generators-revisited/&#34;&gt;Kev Quirk&amp;rsquo;s blog posts&lt;/a&gt;, I thought I would give &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; a shot. Their &lt;a href=&#34;https://www.netlify.com/pricing/&#34;&gt;free Starter plan&lt;/a&gt; seems great for a simple hobby site and includes CI (continuous integration) from a git repository. I signed up for an account but quickly disliked the fact that leveraging my own domain meant I needed to move my nameservers for it to Netlify. While this isn&amp;rsquo;t horrible, I &lt;em&gt;really&lt;/em&gt; prefer to keep managing my DNS in a single place as opposed to scattering nameservers around to wherever my content is hosted. Currently all of my personal domains have DNS hosted in the same place, and I&amp;rsquo;d like to keep it that way. As a result, I shelved the idea of Netlify and looked to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;I actually used GitHub Pages before, way back in the day when they were brand new and I set up my first &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;-based blog. It wasn&amp;rsquo;t bad by any stretch, but a lot of it was clunky. I remembered having to manually add some text files to the repository to configure my custom domain and to host content out of a folder that was named differently than what was expected. Likewise, there were no SSL options, so I ended up putting my GitHub Pages site behind &lt;a href=&#34;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&#34;&gt;CloudFlare&lt;/a&gt; in order to secure it. I figured this would be a good opportunity to see what, if anything, had changed. If I hated it, I wouldn&amp;rsquo;t be out anything and could continue to look at other options.&lt;/p&gt;
&lt;p&gt;The initial setup is still the same as I remember: just create a public repository with a name of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github-account.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I did this through the GitHub website in less than a minute. Next up I ran &lt;code&gt;git clone&lt;/code&gt; in order to initialize the repository on my local laptop in the same directory where I keep all of my other GitHub repos. With my local environment ready, I just copied the handful of files that I had backed up from my VPS into the root directory for the repository; if I don&amp;rsquo;t take any other action, GitHub will host content from the root of the repo. Since this is a static, single page site, I don&amp;rsquo;t need to worry about compiling it with static site generators like Jekyll or &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I was able to &lt;code&gt;commit&lt;/code&gt; the change for adding the files, navigate to &lt;a href=&#34;https://jfabry-noc.github.io&#34;&gt;https://jfaby-noc.github.io&lt;/a&gt;, and see my site.&lt;/p&gt;
&lt;p&gt;With the content out of the way, I wanted to set up my custom domain. The GitHub side of the work can now be done through the &lt;strong&gt;Settings&lt;/strong&gt; menu of the repository; it basically replaces the manual work that I previously had to do by adding files to my repository:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hugo.unusually.pink/images/gh_pages.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top allows me to change the branch and directory to host content from; in my case I could just leave the defaults. The &lt;strong&gt;Custom domain&lt;/strong&gt; sections allows me to type in my domain of choice. This just adds a file named &lt;code&gt;CNAME&lt;/code&gt; to my repo containing the domain information. Then I just had to follow &lt;a href=&#34;https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;the directions&lt;/a&gt; for setting up a custom domain in my DNS host&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s a little wonky from the directions, but to make GitHub redirect everything appropriately when using both an apex domain and a subdomain, you follow both sections of the instructions verbatim. For example, I wanted the domain to be &lt;code&gt;jfabhd.com&lt;/code&gt;, but I also wanted &lt;code&gt;www.jfabhd.com&lt;/code&gt; to still redirect to the site. I configured the apex domain via the instructions above, creating 4 A records pointing to different IP addresses. Then I configured a CNAME record for &lt;code&gt;www.jfabhd.com&lt;/code&gt; pointing &lt;em&gt;not&lt;/em&gt; to &lt;code&gt;jfabhd.com&lt;/code&gt;, but instead to &lt;code&gt;jfaby-noc.github.io&lt;/code&gt;. If you do it this way, GitHub will work it all out under the hood.&lt;/p&gt;
&lt;p&gt;Immediately after setting up my DNS records, the option for &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; was not available, telling me that the site was not configured properly. I rightly assumed this just meant DNS needed time to propagate. I checked back 15 minutes later (which is the TTL of my DNS records), and it presented me with a new message that the certificate wasn&amp;rsquo;t finished being created yet. I once again rightly assumed that they were spinning up these certificates through &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, so I browsed &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt; for a few minutes until refreshing my repository&amp;rsquo;s settings showed that the option to force HTTPS was now available. I simply checked the box, waited a few minutes, and then verified that going explicitly to &lt;code&gt;http://jfabhd.com&lt;/code&gt; would redirect me successfully to &lt;code&gt;https://jfabhd.com&lt;/code&gt;. If this doesn&amp;rsquo;t work for you, chances are that you just didn&amp;rsquo;t give it enough time. While the tooltip in the GibHub UI says it can take up to 24 hours, it took about 5 minutes for my site.&lt;/p&gt;
&lt;p&gt;The last thing to check was that the CI was working so that changes to the repo would be reflected on the site. A few things had changed since I took the backup of my site, meaning there were some needed tweaks with which I could test. For one I restarted this blog and I deleted my Twitter account since Twitter is a cesspool (that might be a good topic for another post&amp;hellip;), so I wanted to swap the Twitter link on my site with one for this blog. I first did a &lt;code&gt;git pull&lt;/code&gt; to get local copies of things like the &lt;code&gt;CNAME&lt;/code&gt; file that had been made in the cloud, and then I quickly updated my HTML to share a link with the &lt;a href=&#34;https://fontawesome.com/icons/rss?style=solid&#34;&gt;Font Awesome RSS feed icon&lt;/a&gt; as the content. After committing and pushing the change, I refreshed the site to confirm it had also been updated.&lt;/p&gt;
&lt;p&gt;On the whole, there&amp;rsquo;s really nothing for me to complain about with GitHub Pages. It&amp;rsquo;s free, I can use the same GitHub account I&amp;rsquo;m already in every day, I can use a custom domain without moving my DNS, and I get a Let&amp;rsquo;s Encrypt certificate out of the box. Obviously, though, my use case for it is very simple, and your mileage may vary. With options like this, though, I feel even better about my idea to stop running my own VPS just to host a couple of small, low-traffic websites.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Self-Hosting A Static Website</title>
      <link>https://hugo.unusually.pink/self-hosting-a-static-website/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/self-hosting-a-static-website/</guid>
      <description>Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.</description>
      <content>&lt;p&gt;Earlier this week a friend reached out to me regarding a website. He had just finished developing his very first iOS game and was ready to submit it to Apple for approval. One of Apple&amp;rsquo;s myriad requirements, though, is a website containing the author&amp;rsquo;s privacy policy. My friend had no website and no idea how to make one, so he asked me if I could help. It seems wild to me that someone could have the chops to make an iOS app in Objective-C or Swift but not be able to make a website, but each of us has a different skill set.&lt;/p&gt;
&lt;p&gt;We first took some early steps gathering requirements. What did he want for the site? Literally just the privacy policy. Where did he want to host it? Wherever was the cheapest. Did he have a domain name already? Yes! This was fairly straightforward; he literally &lt;em&gt;just&lt;/em&gt; wanted the very basics. After a bit of discussion I convinced him to write up a quick &amp;ldquo;about me&amp;rdquo; type of page so that we could have more than just the privacy policy. From there I could get to work.&lt;/p&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;The first thing I did was have him head over to &lt;a href=&#34;https://www.vultr.com/&#34;&gt;Vultr&lt;/a&gt; and spin up their cheapest instance. I think this is running him $5 USD per month. I had him pick &lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; as the server operating system given that it&amp;rsquo;s the one I&amp;rsquo;m most familiar with. My friend has some familiarity with Linux but not a lot of practical knowledge; when I asked him to shoot me some SSH credentials with &lt;code&gt;sudo&lt;/code&gt; access he literally sent me the root account from Vultr. Ick.&lt;/p&gt;
&lt;h1 id=&#34;configuring-the-host&#34;&gt;Configuring The Host&lt;/h1&gt;
&lt;h3 id=&#34;accounts&#34;&gt;Accounts&lt;/h3&gt;
&lt;p&gt;My first goal was to configure the host. I started that off by creating user accounts for each of us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;adduser username
usermod -aG sudo username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After switching users and verifying my new account worked, I disabled root&amp;rsquo;s ability to log in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo passwd -l root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ports&#34;&gt;Ports&lt;/h3&gt;
&lt;p&gt;Next I wanted to change the default SSH port since having 22 open means a million places from across the planet are going to throw garbage traffic at your server. I did this by modifying the SSH config at &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, finding the line with &lt;code&gt;#Port 22&lt;/code&gt;, uncommenting it, and changing the port to a high number of my friend&amp;rsquo;s choice. Then I restarted SSH:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;firewall&#34;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;I wanted to enable the firewall as well, so I opened up with the new SSH port &lt;em&gt;and&lt;/em&gt; 80 and 443 for our eventual website:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ufw allow sshPortNumber/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;webserver&#34;&gt;Webserver&lt;/h3&gt;
&lt;p&gt;I next needed a web server; &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; has been my go-to choice for a long time. Rather than re-hashing all of the steps, I&amp;rsquo;ll just recommend following the excellent documentation from &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04&#34;&gt;DigitalOcean&lt;/a&gt; which nicely covers the Nginx configuration. That takes you to the point where you are hosting a website. Then you just need content on it.&lt;/p&gt;
&lt;h3 id=&#34;certificate&#34;&gt;Certificate&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m an advocate of using HTTPS for everything, and with free certificates from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; there&amp;rsquo;s no reason not to. Given that we have shell access, using &lt;code&gt;certbot&lt;/code&gt; is the way to go. There&amp;rsquo;s also excellent &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&#34;&gt;documentation on that process on Ubuntu with Nginx&lt;/a&gt;. I highly recommend selecting the option to redirect any HTTP traffic to HTTPS.&lt;/p&gt;
&lt;h1 id=&#34;website&#34;&gt;Website&lt;/h1&gt;
&lt;p&gt;Now for the website itself. I&amp;rsquo;m not really much of a web developer, and I dislike making anything frontend; I don&amp;rsquo;t exactly have the best design sense. So I once again opted to leverage &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to take care of that for me. I&amp;rsquo;ve written about &lt;a href=&#34;https://failti.me/posts/hugo_setup_guide/&#34;&gt;the specifics of using Hugo in detail&lt;/a&gt;. Since we really just wanted a generic landing page with my friend&amp;rsquo;s socials and then links to the About and Privacy Policy pages, I ended up going with the &lt;a href=&#34;https://themes.gohugo.io/hermit/&#34;&gt;Hermit theme&lt;/a&gt;. It has a nice, simple look. My friend&amp;rsquo;s favorite color is mint green, so the default background also works nicely with that when I changed the accent color. The theme nicely includes an &lt;a href=&#34;https://github.com/Track3/hermit/tree/master/exampleSite&#34;&gt;exampleSite&lt;/a&gt; so that I can steal their &lt;code&gt;config.toml&lt;/code&gt; file and also their &amp;ldquo;About&amp;rdquo; page to make things even easier for myself.&lt;/p&gt;
&lt;h1 id=&#34;backups&#34;&gt;Backups&lt;/h1&gt;
&lt;p&gt;One of the nice things about Hugo is that, since everything is a simple text file, it&amp;rsquo;s very easy to compress your entire site and save a backup. Then if something terrible happens to your server, it&amp;rsquo;s extremely easy to get the site back up and running on a different machine. In this case, I made tarballs for both the finished, compiled site and the Hugo directory storing the configuration and Markdown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tar -zvcf ~/temp/html_output.tar.gz /var/www/mySite.com/
tar -zvcf ~/temp/hugo_directory.tar.gz /var/www/mySite.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the tarballs created, I used an SFTP client to copy them off the server for safe keeping.&lt;/p&gt;
&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h1&gt;
&lt;p&gt;In total it took me about an hour and a half to get everything up and running. Having gone through this process &lt;em&gt;many&lt;/em&gt; times for websites of my own, I&amp;rsquo;ve got a decent bit of experience with the process, but this shows it still doesn&amp;rsquo;t necessarily take a super long time to get a decent website up and running. The big benefits are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The site is &lt;em&gt;cheap&lt;/em&gt; to run. Even the smallest instance at any VPS provider will be able to handle multiple sites with ease unless they start getting really popular, so if my friend wants to create any other sites in the future he won&amp;rsquo;t need additional hosting.&lt;/li&gt;
&lt;li&gt;Backups are stupid simple. My friend isn&amp;rsquo;t beholden to a hosting provider or trying to work within the confines of something more expensive like Wordpress or Squarespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The downsides are present, though, so you have to be cool with them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup takes more technical chops than clicking through a Squarespace template editor. While the documentation for everything in this post is extremely good, if working out a terminal freaks you out then this likely isn&amp;rsquo;t for you.&lt;/li&gt;
&lt;li&gt;Content is authored in Markdown. This likely doesn&amp;rsquo;t matter for my friend at the moment since he&amp;rsquo;s not really posting anything new to the site, but it would be something to keep in mind if he decided to start a blog. In that scenario, I usually just SSH to the server and author my content in &lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;. You could also author the Markdown elsewhere and copy it to the server, or use SFTP to open the Markdown file on the server from an editor on your local machine. It&amp;rsquo;s definitely &lt;em&gt;not&lt;/em&gt; as simple as a WYIWYG editor in your browser, though.&lt;/li&gt;
&lt;li&gt;Maintenance is something that will need to be done at least periodically. The server will need to be patched. That&amp;rsquo;s easy enough to do with a simple &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; and then reboot when necessary, but it&amp;rsquo;s just another step to keep in mind. Likewise, bouncing the server means that the website will be down, even if it&amp;rsquo;s typically only for a moment or two.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being kind of pretentious, technical snob I personally find it &lt;em&gt;easier&lt;/em&gt; to author my comment in Markdown on Vim instead of using a WYSIWYG editor in a GUI, but your mileage will vary based on your own prefrences.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fixing Let&#39;s Encrypt Certificates After You Delete Them Like An Idiot</title>
      <link>https://hugo.unusually.pink/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/fixing-lets-encrypt-certificates-after-you-delete-them-like-an-idiot/</guid>
      <description>In Episode 11, I had discussed how I run a couple of my websites on a Linux server running Nginx as the web server and encrypting connections to them via Let’s Encrypt certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via certbot. If you don’t recall the episode, I had taken my web server which was only running laifu.moe and added awk.ninja to it so that I had both sites running on the same server.</description>
      <content>&lt;p&gt;In &lt;a href=&#34;https://www.unusually.pink/podcast/episode-11-attach-all-the-storage&#34;&gt;Episode 11&lt;/a&gt;, I had discussed how I run a couple of my websites on a Linux server running &lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; as the web server and encrypting connections to them via &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt; certificates. Shortly after recording that episode, though, I realized I had messed up my certificate configuration via &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;certbot&lt;/a&gt;. If you don’t recall the episode, I had taken my web server which was only running &lt;a href=&#34;https://laifu.moe&#34;&gt;laifu.moe&lt;/a&gt; and added &lt;a href=&#34;https://awk.ninja&#34;&gt;awk.ninja&lt;/a&gt; to it so that I had both sites running on the same server. When I added awk.ninja, I had to re-run certbot and get a certificate for it along with the certificate I had for laifu.moe. That’s where I messed up; I got tipped off when I received the following email from Let’s Encrypt letting me know that my certificate for laifu.moe was about to expire.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Your certificate (or certificates) for the names listed below will expire in 10 days (on 07 Jul 19 12:52 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.&lt;/p&gt;
&lt;p&gt;We recommend renewing certificates automatically when they have a third of their&lt;br&gt;
total lifetime left. For Let’s Encrypt’s current 90-day certificates, that means&lt;br&gt;
renewing 30 days before expiration. See&lt;br&gt;
&lt;a href=&#34;https://letsencrypt.org/docs/integration-guide/&#34;&gt;https://letsencrypt.org/docs/integration-guide/&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;laifu.moe&lt;br&gt;
&lt;a href=&#34;http://www.laifu.moe&#34;&gt;www.laifu.moe&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seemed odd to me since I knew I had a &lt;strong&gt;cron&lt;/strong&gt; job running to update the certificates. I checked the expiration for the certificate on laifu.moe and saw that it had nearly two months left on it. I checked the certificate applied to awk.ninja and saw the same thing. EXACTLY the same thing in fact. In double-checking the certificate on laifu.moe, I realized that the Common Name was for awk.ninja. I was using the awk.ninja certificate for &lt;em&gt;both&lt;/em&gt; of my sites. Oops. What happened was that when I added awk.ninja and re-ran &lt;strong&gt;certbot&lt;/strong&gt;, I got the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hugo.unusually.pink/images/FixingLetsEncryptCertificatesAfterYouDeleteThemLikeAnIdiot_certbot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;My thought at the time was that I needed to select ALL of the sites. In reality, this overwrote the configuration I already had on laifu.moe and applied the awk.ninja certificate to both sites. This is where I decided to be really stupid. I decided that I would delete the existing certificates, re-run &lt;strong&gt;certbot&lt;/strong&gt; twice (one for laifu.moe and once for awk.ninja), and then be done. I started off by deleting the awk.ninja certificate that was applied to both sites:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo certbot delete --cert-name awk.ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I did the same to delete the laifu.moe certificate. Then I tried to do a vanilla run of &lt;strong&gt;certbot&lt;/strong&gt; to get the menu in my screenshot above and individually configure each of my two sites. Instead of getting that menu, though, I received an error message that my sites were pointing to certificates that didn’t exist. &lt;strong&gt;certbot&lt;/strong&gt; then exited without giving me any further options. The problem is that my configuration files below still referenced the certificates that I just nuked. Oops.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/nginx/sites-available/awk.ninja
/etc/nginx/sites-available/laifu.moe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After thinking about it for a few seconds, it made sense; &lt;strong&gt;certbot&lt;/strong&gt; can’t know what’s going on and is expecting me to do some cleanup on the mess I made instead of making assumptions about whether or not I should still have certificates. To keep my life simple, I decided to go back to a clean slate on my &lt;strong&gt;sites-available&lt;/strong&gt; configurations since I knew that I could get &lt;strong&gt;certbot&lt;/strong&gt; to redo the configuration again as long as I could get it to successfully run. As a result, I just set the configurations for both laifu.moe and awk.ninja back to a super vanilla setup. Just &lt;strong&gt;%s/laifu.moe/awk.ninja/g&lt;/strong&gt; on the file below for what I configured on awk.ninja.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen [::]:80;

        root /var/www/laifu.moe/html;
        index index.html index.htm index.nginx-debian.html;

        server_name laifu.moe www.laifu.moe;

        location / {
                try_files $uri $uri/ =404;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once I had that done, I restarted nginx just to make sure it was working and I could hit port 80 for both sites.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that working, I was able to re-run &lt;strong&gt;certbot&lt;/strong&gt; and finally get the menu from my initial screenshot. I first configured a certificate for awk.ninja and its www variant. Once that was done, I ran &lt;strong&gt;certbot&lt;/strong&gt; one more time and walked through getting a certificate for laifu.moe and its www-variant. In both instances, I opted to have &lt;strong&gt;certbot&lt;/strong&gt; reconfigure the files in &lt;strong&gt;sites-available&lt;/strong&gt; to redirect all HTTP traffic for HTTPS. I restarted Nginx one more time and &lt;em&gt;finally&lt;/em&gt; I had everything configured the way I wanted with each site using its &lt;em&gt;own&lt;/em&gt; certificate.&lt;/p&gt;
&lt;p&gt;The moral of the story is to actually troubleshoot the problem instead of just starting off by deleting shit from your server. Also, try staying pink!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>PSA: Get Ready For New Let&#39;s Encrypt Validation</title>
      <link>https://hugo.unusually.pink/psa-get-ready-for-new-lets-encrypt-validation/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.unusually.pink/psa-get-ready-for-new-lets-encrypt-validation/</guid>
      <description>If you’re using Let’s Encrypt, now would be a really great time to make sure that you’re ready for them to stop supporting ACME TLS-SNI-01 domain validation. I got an email a couple of days ago (as I assume everyone using Let’s Encrypt did) letting me know this change was coming. I had nothing to actually do, but going through the validation was super easy and is likely worth the time to ensure your site(s) aren’t impacted.</description>
      <content>&lt;p&gt;If you’re using &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt;, now would be a really great time to make sure that you’re ready for them to stop supporting ACME TLS-SNI-01 domain validation. I got an email a couple of days ago (as I assume everyone using Let’s Encrypt did) letting me know this change was coming. I had nothing to actually do, but going through the validation was super easy and is likely worth the time to ensure your site(s) aren’t impacted. March 13th is the deadline for ACME TLS-SNI-01 to no longer function, so there’s still a lot of time to take a couple of minutes and verify you’re in good shape.&lt;/p&gt;
&lt;p&gt;*Note: I’m using &lt;code&gt;certbot&lt;/code&gt;, which makes this whole thing super easy. If you’re &lt;strong&gt;not&lt;/strong&gt; using &lt;code&gt;certbot&lt;/code&gt; then your steps will be different.*&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://letsencrypt.org/docs/staging-environment/&#34;&gt;Let’s Encrypt staging environment&lt;/a&gt; already has disabled ACME TLS-SNI-01 validation, so checking against that is a good test. As a &lt;code&gt;certbot&lt;/code&gt; user, I also needed to validate that I was using at least version 0.28 of the application, which is simple enough to do via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;certbot --version    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That appears to be the latest version offered by the PPA: &lt;code&gt;ppa:certbot/certbot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Testing a &lt;code&gt;certbot&lt;/code&gt; run against the staging environment is toggled via the &lt;code&gt;--dry-run&lt;/code&gt; switch. If you do a dry run of your renewal against the staging environment and everything comes back successful, you should be in good shape:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo certbot renew --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My certs all validated successfully, so everything is ready to go for the change. I presume if there are any failures then the dry run will alert you to what needs to be fixed; I can’t say for sure since I was lucky enough to not see any of those. Full instructions from Let’s Encrypt are &lt;a href=&#34;https://community.letsencrypt.org/t/how-to-stop-using-tls-sni-01-with-certbot/83210&#34;&gt;available on their site&lt;/a&gt;, though.&lt;/p&gt;
&lt;p&gt;Happy encrypting!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
