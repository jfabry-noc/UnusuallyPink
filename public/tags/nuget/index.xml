<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nuget on Unusually Pink</title>
    <link>https://unusually.pink/tags/nuget/</link>
    <description>Recent content in nuget on Unusually Pink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - John Fabry</copyright>
    <lastBuildDate>Sun, 11 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://unusually.pink/tags/nuget/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Updating PowerShellGet</title>
      <link>https://unusually.pink/updating-powershellget/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unusually.pink/updating-powershellget/</guid>
      <description>It&amp;rsquo;s not too often these days that I find myself needing to update the underpinnings of PowerShell. The majority of the PowerShell work I do now is based on PowerShell Core, the current version of which is 7.0.3, and frequently just comes with newer versions of the supporting modules. PowerShell Core began with PowerShell 6 and is created with .NET Core, which is Microsoft&amp;rsquo;s open source and cross-platform flavor of .</description>
      <content>&lt;p&gt;It&amp;rsquo;s not too often these days that I find myself needing to update the underpinnings of PowerShell. The majority of the PowerShell work I do now is based on &lt;a href=&#34;https://github.com/PowerShell/PowerShell&#34;&gt;PowerShell Core&lt;/a&gt;, the current version of which is 7.0.3, and frequently just comes with newer versions of the supporting modules. PowerShell Core began with PowerShell 6 and is created with .NET Core, which is Microsoft&amp;rsquo;s open source and cross-platform flavor of .NET. PowerShell version 5 and before, known as Windows PowerShell, is the original, Windows-specific variant of PowerShell. Microsoft doesn&amp;rsquo;t really do any new development work on Windows PowerShell, instead opting to work on PowerShell Core and slowly make the full set of functionality available on all platforms.&lt;/p&gt;
&lt;p&gt;This is awesome, but some systems very specifically target Windows PowerShell. This can easily happen since the interpreter even has a different name; Windows PowerShell calls &lt;code&gt;powershell.exe&lt;/code&gt; while PowerShell Core calls &lt;code&gt;pwsh.exe&lt;/code&gt; in an effort to allow the two versions to co-exist on the same Windows host. As a result, systems which proxy PowerShell commands or scripts on your behalf down to a target machine that have not been updated to expect PowerShell Core will generally target Windows PowerShell instead. This was the situation I found myself in last week.&lt;/p&gt;
&lt;p&gt;I was attempting to load a script that I had written into a monitoring platform which will then send my script down to any number of &amp;ldquo;collector&amp;rdquo; machines in order to for it to execute and do the actual data aggregation. In this case, my script failed because it was calling the &lt;code&gt;MSAL.PS&lt;/code&gt; module. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-dotnet&#34;&gt;MSAL&lt;/a&gt; is the Microsoft Authentication Library, and as the name indicates it facilitates authentication to Azure AD. It replaces the older Azure AD Authentication Library (ADAL), and is honestly &lt;em&gt;much&lt;/em&gt; nicer to use. The module needs to be installed first, though, and while I had previously installed it on the target system under PowerShell Core, Windows PowerShell is a completely separate entity with a separate space for modules. I remoted to the system and ran the following to handle the installation from an administrative Windows PowerShell session:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module -Name MSAL.PS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of joy, I got the following error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: The specified module &amp;lsquo;MSAL.PS&amp;rsquo; with PowerShellGetFormatVersion &amp;lsquo;2.0&amp;rsquo; is not supported by the current version of PowerShellGet. Get the latest version of the PowerShellGet module to install this module, &amp;lsquo;MSAL.PS&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ick&amp;hellip; some things were a bit old in the Windows PowerShell installation. This was one of the rare instances where the error message didn&amp;rsquo;t tell me &lt;em&gt;exactly&lt;/em&gt; how to fix the issue, though, so I did a few searches on this exact error. The trick is that updating &lt;code&gt;PowerShellGet&lt;/code&gt; involves not one but two steps.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;PowerShellGet&lt;/code&gt; is a module specific for discovering and installing PowerShell packages from the &lt;a href=&#34;https://www.powershellgallery.com/&#34;&gt;PowerShell Gallery&lt;/a&gt;, it leverages Microsoft&amp;rsquo;s much more generic &lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet package manager&lt;/a&gt;. To get the latest version of PowerShellGet, I &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/scripting/gallery/installing-psget?view=powershell-7&#34;&gt;first had to make sure I was using the latest version of NuGet&lt;/a&gt; by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-PackageProvider Nuget -Force&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once that completed, &lt;em&gt;then&lt;/em&gt; I was able to successfully update PowerShellGet via:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module -Name PowerShellGet -Force&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once the update completes, the current PowerShell session will still be running the old version. I just closed PowerShell, re-launched a new administrator instance, and then successfully installed the module via the same cmdlet from earlier:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module -Name MSAL.PS&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
